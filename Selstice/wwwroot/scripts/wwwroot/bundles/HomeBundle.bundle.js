!function (e) { var t = {}; function n(r) { if (t[r])
    return t[r].exports; var i = t[r] = { i: r, l: !1, exports: {} }; return e[r].call(i.exports, i, i.exports, n), i.l = !0, i.exports; } n.m = e, n.c = t, n.d = function (e, t, r) { n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: r }); }, n.r = function (e) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }); }, n.t = function (e, t) { if (1 & t && (e = n(e)), 8 & t)
    return e; if (4 & t && "object" == typeof e && e && e.__esModule)
    return e; var r = Object.create(null); if (n.r(r), Object.defineProperty(r, "default", { enumerable: !0, value: e }), 2 & t && "string" != typeof e)
    for (var i in e)
        n.d(r, i, function (t) { return e[t]; }.bind(null, i)); return r; }, n.n = function (e) { var t = e && e.__esModule ? function () { return e.default; } : function () { return e; }; return n.d(t, "a", t), t; }, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t); }, n.p = "", n(n.s = 409); }([function (e, t, n) { var r = n(2), i = n(23), o = n(15), a = n(14), u = n(22), s = function (e, t, n) { var c, l, f, p, d = e & s.F, h = e & s.G, v = e & s.S, m = e & s.P, y = e & s.B, g = h ? r : v ? r[t] || (r[t] = {}) : (r[t] || {}).prototype, b = h ? i : i[t] || (i[t] = {}), w = b.prototype || (b.prototype = {}); for (c in h && (n = t), n)
        f = ((l = !d && g && void 0 !== g[c]) ? g : n)[c], p = y && l ? u(f, r) : m && "function" == typeof f ? u(Function.call, f) : f, g && a(g, c, f, e & s.U), b[c] != f && o(b, c, p), m && w[c] != f && (w[c] = f); }; r.core = i, s.F = 1, s.G = 2, s.S = 4, s.P = 8, s.B = 16, s.W = 32, s.U = 64, s.R = 128, e.exports = s; }, function (e, t, n) { var r = n(4); e.exports = function (e) { if (!r(e))
        throw TypeError(e + " is not an object!"); return e; }; }, function (e, t) { var n = e.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")(); "number" == typeof __g && (__g = n); }, function (e, t) { e.exports = function (e) { try {
        return !!e();
    }
    catch (e) {
        return !0;
    } }; }, function (e, t) { e.exports = function (e) { return "object" == typeof e ? null !== e : "function" == typeof e; }; }, function (e, t, n) { e.exports = n(190)(); }, function (e, t, n) { var r = n(68)("wks"), i = n(42), o = n(2).Symbol, a = "function" == typeof o; (e.exports = function (e) { return r[e] || (r[e] = a && o[e] || (a ? o : i)("Symbol." + e)); }).store = r; }, function (e, t, n) {
        "use strict";
        e.exports = n(204);
    }, function (e, t, n) { var r = n(26), i = Math.min; e.exports = function (e) { return e > 0 ? i(r(e), 9007199254740991) : 0; }; }, function (e, t, n) { var r = n(1), i = n(136), o = n(28), a = Object.defineProperty; t.f = n(10) ? Object.defineProperty : function (e, t, n) { if (r(e), t = o(t, !0), r(n), i)
        try {
            return a(e, t, n);
        }
        catch (e) { } if ("get" in n || "set" in n)
        throw TypeError("Accessors not supported!"); return "value" in n && (e[t] = n.value), e; }; }, function (e, t, n) { e.exports = !n(3)(function () { return 7 != Object.defineProperty({}, "a", { get: function () { return 7; } }).a; }); }, function (e, t, n) { var r = n(27); e.exports = function (e) { return Object(r(e)); }; }, function (e, t) { e.exports = function (e) { if ("function" != typeof e)
        throw TypeError(e + " is not a function!"); return e; }; }, function (e, t, n) { var r = n(0), i = n(3), o = n(27), a = /"/g, u = function (e, t, n, r) { var i = String(o(e)), u = "<" + t; return "" !== n && (u += " " + n + '="' + String(r).replace(a, "&quot;") + '"'), u + ">" + i + "</" + t + ">"; }; e.exports = function (e, t) { var n = {}; n[e] = t(u), r(r.P + r.F * i(function () { var t = ""[e]('"'); return t !== t.toLowerCase() || t.split('"').length > 3; }), "String", n); }; }, function (e, t, n) { var r = n(2), i = n(15), o = n(19), a = n(42)("src"), u = Function.toString, s = ("" + u).split("toString"); n(23).inspectSource = function (e) { return u.call(e); }, (e.exports = function (e, t, n, u) { var c = "function" == typeof n; c && (o(n, "name") || i(n, "name", t)), e[t] !== n && (c && (o(n, a) || i(n, a, e[t] ? "" + e[t] : s.join(String(t)))), e === r ? e[t] = n : u ? e[t] ? e[t] = n : i(e, t, n) : (delete e[t], i(e, t, n))); })(Function.prototype, "toString", function () { return "function" == typeof this && this[a] || u.call(this); }); }, function (e, t, n) { var r = n(9), i = n(43); e.exports = n(10) ? function (e, t, n) { return r.f(e, t, i(1, n)); } : function (e, t, n) { return e[t] = n, e; }; }, function (e, t, n) { var r = n(19), i = n(11), o = n(97)("IE_PROTO"), a = Object.prototype; e.exports = Object.getPrototypeOf || function (e) { return e = i(e), r(e, o) ? e[o] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? a : null; }; }, function (e, t, n) { var r = n(49), i = n(43), o = n(18), a = n(28), u = n(19), s = n(136), c = Object.getOwnPropertyDescriptor; t.f = n(10) ? c : function (e, t) { if (e = o(e), t = a(t, !0), s)
        try {
            return c(e, t);
        }
        catch (e) { } if (u(e, t))
        return i(!r.f.call(e, t), e[t]); }; }, function (e, t, n) { var r = n(50), i = n(27); e.exports = function (e) { return r(i(e)); }; }, function (e, t) { var n = {}.hasOwnProperty; e.exports = function (e, t) { return n.call(e, t); }; }, function (e, t, n) {
        "use strict";
        var r = n(3);
        e.exports = function (e, t) { return !!e && r(function () { t ? e.call(null, function () { }, 1) : e.call(null); }); };
    }, function (e, t) { var n = {}.toString; e.exports = function (e) { return n.call(e).slice(8, -1); }; }, function (e, t, n) { var r = n(12); e.exports = function (e, t, n) { if (r(e), void 0 === t)
        return e; switch (n) {
        case 1: return function (n) { return e.call(t, n); };
        case 2: return function (n, r) { return e.call(t, n, r); };
        case 3: return function (n, r, i) { return e.call(t, n, r, i); };
    } return function () { return e.apply(t, arguments); }; }; }, function (e, t) { var n = e.exports = { version: "2.5.7" }; "number" == typeof __e && (__e = n); }, function (e, t, n) { var r = n(22), i = n(50), o = n(11), a = n(8), u = n(80); e.exports = function (e, t) { var n = 1 == e, s = 2 == e, c = 3 == e, l = 4 == e, f = 6 == e, p = 5 == e || f, d = t || u; return function (t, u, h) { for (var v, m, y = o(t), g = i(y), b = r(u, h, 3), w = a(g.length), _ = 0, x = n ? d(t, w) : s ? d(t, 0) : void 0; w > _; _++)
        if ((p || _ in g) && (m = b(v = g[_], _, y), e))
            if (n)
                x[_] = m;
            else if (m)
                switch (e) {
                    case 3: return !0;
                    case 5: return v;
                    case 6: return _;
                    case 2: x.push(v);
                }
            else if (l)
                return !1; return f ? -1 : c || l ? l : x; }; }; }, function (e, t, n) { var r = n(0), i = n(23), o = n(3); e.exports = function (e, t) { var n = (i.Object || {})[e] || Object[e], a = {}; a[e] = t(n), r(r.S + r.F * o(function () { n(1); }), "Object", a); }; }, function (e, t) { var n = Math.ceil, r = Math.floor; e.exports = function (e) { return isNaN(e = +e) ? 0 : (e > 0 ? r : n)(e); }; }, function (e, t) { e.exports = function (e) { if (void 0 == e)
        throw TypeError("Can't call method on  " + e); return e; }; }, function (e, t, n) { var r = n(4); e.exports = function (e, t) { if (!r(e))
        return e; var n, i; if (t && "function" == typeof (n = e.toString) && !r(i = n.call(e)))
        return i; if ("function" == typeof (n = e.valueOf) && !r(i = n.call(e)))
        return i; if (!t && "function" == typeof (n = e.toString) && !r(i = n.call(e)))
        return i; throw TypeError("Can't convert object to primitive value"); }; }, function (e, t, n) { var r = n(115), i = n(0), o = n(68)("metadata"), a = o.store || (o.store = new (n(112))), u = function (e, t, n) { var i = a.get(e); if (!i) {
        if (!n)
            return;
        a.set(e, i = new r);
    } var o = i.get(t); if (!o) {
        if (!n)
            return;
        i.set(t, o = new r);
    } return o; }; e.exports = { store: a, map: u, has: function (e, t, n) { var r = u(t, n, !1); return void 0 !== r && r.has(e); }, get: function (e, t, n) { var r = u(t, n, !1); return void 0 === r ? void 0 : r.get(e); }, set: function (e, t, n, r) { u(n, r, !0).set(e, t); }, keys: function (e, t) { var n = u(e, t, !1), r = []; return n && n.forEach(function (e, t) { r.push(t); }), r; }, key: function (e) { return void 0 === e || "symbol" == typeof e ? e : String(e); }, exp: function (e) { i(i.S, "Reflect", e); } }; }, function (e, t, n) {
        "use strict";
        if (n(10)) {
            var r = n(32), i = n(2), o = n(3), a = n(0), u = n(57), s = n(74), c = n(22), l = n(36), f = n(43), p = n(15), d = n(34), h = n(26), v = n(8), m = n(110), y = n(40), g = n(28), b = n(19), w = n(48), _ = n(4), x = n(11), k = n(83), S = n(39), E = n(16), O = n(38).f, T = n(81), C = n(42), P = n(6), M = n(24), N = n(67), j = n(60), A = n(78), L = n(45), I = n(63), R = n(37), z = n(79), F = n(120), D = n(9), U = n(17), W = D.f, H = U.f, B = i.RangeError, V = i.TypeError, q = i.Uint8Array, G = Array.prototype, $ = s.ArrayBuffer, Y = s.DataView, X = M(0), K = M(2), Q = M(3), J = M(4), Z = M(5), ee = M(6), te = N(!0), ne = N(!1), re = A.values, ie = A.keys, oe = A.entries, ae = G.lastIndexOf, ue = G.reduce, se = G.reduceRight, ce = G.join, le = G.sort, fe = G.slice, pe = G.toString, de = G.toLocaleString, he = P("iterator"), ve = P("toStringTag"), me = C("typed_constructor"), ye = C("def_constructor"), ge = u.CONSTR, be = u.TYPED, we = u.VIEW, _e = M(1, function (e, t) { return Oe(j(e, e[ye]), t); }), xe = o(function () { return 1 === new q(new Uint16Array([1]).buffer)[0]; }), ke = !!q && !!q.prototype.set && o(function () { new q(1).set({}); }), Se = function (e, t) { var n = h(e); if (n < 0 || n % t)
                throw B("Wrong offset!"); return n; }, Ee = function (e) { if (_(e) && be in e)
                return e; throw V(e + " is not a typed array!"); }, Oe = function (e, t) { if (!(_(e) && me in e))
                throw V("It is not a typed array constructor!"); return new e(t); }, Te = function (e, t) { return Ce(j(e, e[ye]), t); }, Ce = function (e, t) { for (var n = 0, r = t.length, i = Oe(e, r); r > n;)
                i[n] = t[n++]; return i; }, Pe = function (e, t, n) { W(e, t, { get: function () { return this._d[n]; } }); }, Me = function (e) { var t, n, r, i, o, a, u = x(e), s = arguments.length, l = s > 1 ? arguments[1] : void 0, f = void 0 !== l, p = T(u); if (void 0 != p && !k(p)) {
                for (a = p.call(u), r = [], t = 0; !(o = a.next()).done; t++)
                    r.push(o.value);
                u = r;
            } for (f && s > 2 && (l = c(l, arguments[2], 2)), t = 0, n = v(u.length), i = Oe(this, n); n > t; t++)
                i[t] = f ? l(u[t], t) : u[t]; return i; }, Ne = function () { for (var e = 0, t = arguments.length, n = Oe(this, t); t > e;)
                n[e] = arguments[e++]; return n; }, je = !!q && o(function () { de.call(new q(1)); }), Ae = function () { return de.apply(je ? fe.call(Ee(this)) : Ee(this), arguments); }, Le = { copyWithin: function (e, t) { return F.call(Ee(this), e, t, arguments.length > 2 ? arguments[2] : void 0); }, every: function (e) { return J(Ee(this), e, arguments.length > 1 ? arguments[1] : void 0); }, fill: function (e) { return z.apply(Ee(this), arguments); }, filter: function (e) { return Te(this, K(Ee(this), e, arguments.length > 1 ? arguments[1] : void 0)); }, find: function (e) { return Z(Ee(this), e, arguments.length > 1 ? arguments[1] : void 0); }, findIndex: function (e) { return ee(Ee(this), e, arguments.length > 1 ? arguments[1] : void 0); }, forEach: function (e) { X(Ee(this), e, arguments.length > 1 ? arguments[1] : void 0); }, indexOf: function (e) { return ne(Ee(this), e, arguments.length > 1 ? arguments[1] : void 0); }, includes: function (e) { return te(Ee(this), e, arguments.length > 1 ? arguments[1] : void 0); }, join: function (e) { return ce.apply(Ee(this), arguments); }, lastIndexOf: function (e) { return ae.apply(Ee(this), arguments); }, map: function (e) { return _e(Ee(this), e, arguments.length > 1 ? arguments[1] : void 0); }, reduce: function (e) { return ue.apply(Ee(this), arguments); }, reduceRight: function (e) { return se.apply(Ee(this), arguments); }, reverse: function () { for (var e, t = Ee(this).length, n = Math.floor(t / 2), r = 0; r < n;)
                    e = this[r], this[r++] = this[--t], this[t] = e; return this; }, some: function (e) { return Q(Ee(this), e, arguments.length > 1 ? arguments[1] : void 0); }, sort: function (e) { return le.call(Ee(this), e); }, subarray: function (e, t) { var n = Ee(this), r = n.length, i = y(e, r); return new (j(n, n[ye]))(n.buffer, n.byteOffset + i * n.BYTES_PER_ELEMENT, v((void 0 === t ? r : y(t, r)) - i)); } }, Ie = function (e, t) { return Te(this, fe.call(Ee(this), e, t)); }, Re = function (e) { Ee(this); var t = Se(arguments[1], 1), n = this.length, r = x(e), i = v(r.length), o = 0; if (i + t > n)
                throw B("Wrong length!"); for (; o < i;)
                this[t + o] = r[o++]; }, ze = { entries: function () { return oe.call(Ee(this)); }, keys: function () { return ie.call(Ee(this)); }, values: function () { return re.call(Ee(this)); } }, Fe = function (e, t) { return _(e) && e[be] && "symbol" != typeof t && t in e && String(+t) == String(t); }, De = function (e, t) { return Fe(e, t = g(t, !0)) ? f(2, e[t]) : H(e, t); }, Ue = function (e, t, n) { return !(Fe(e, t = g(t, !0)) && _(n) && b(n, "value")) || b(n, "get") || b(n, "set") || n.configurable || b(n, "writable") && !n.writable || b(n, "enumerable") && !n.enumerable ? W(e, t, n) : (e[t] = n.value, e); };
            ge || (U.f = De, D.f = Ue), a(a.S + a.F * !ge, "Object", { getOwnPropertyDescriptor: De, defineProperty: Ue }), o(function () { pe.call({}); }) && (pe = de = function () { return ce.call(this); });
            var We = d({}, Le);
            d(We, ze), p(We, he, ze.values), d(We, { slice: Ie, set: Re, constructor: function () { }, toString: pe, toLocaleString: Ae }), Pe(We, "buffer", "b"), Pe(We, "byteOffset", "o"), Pe(We, "byteLength", "l"), Pe(We, "length", "e"), W(We, ve, { get: function () { return this[be]; } }), e.exports = function (e, t, n, s) { var c = e + ((s = !!s) ? "Clamped" : "") + "Array", f = "get" + e, d = "set" + e, h = i[c], y = h || {}, g = h && E(h), b = !h || !u.ABV, x = {}, k = h && h.prototype, T = function (e, n) { W(e, n, { get: function () { return function (e, n) { var r = e._d; return r.v[f](n * t + r.o, xe); }(this, n); }, set: function (e) { return function (e, n, r) { var i = e._d; s && (r = (r = Math.round(r)) < 0 ? 0 : r > 255 ? 255 : 255 & r), i.v[d](n * t + i.o, r, xe); }(this, n, e); }, enumerable: !0 }); }; b ? (h = n(function (e, n, r, i) { l(e, h, c, "_d"); var o, a, u, s, f = 0, d = 0; if (_(n)) {
                if (!(n instanceof $ || "ArrayBuffer" == (s = w(n)) || "SharedArrayBuffer" == s))
                    return be in n ? Ce(h, n) : Me.call(h, n);
                o = n, d = Se(r, t);
                var y = n.byteLength;
                if (void 0 === i) {
                    if (y % t)
                        throw B("Wrong length!");
                    if ((a = y - d) < 0)
                        throw B("Wrong length!");
                }
                else if ((a = v(i) * t) + d > y)
                    throw B("Wrong length!");
                u = a / t;
            }
            else
                u = m(n), o = new $(a = u * t); for (p(e, "_d", { b: o, o: d, l: a, e: u, v: new Y(o) }); f < u;)
                T(e, f++); }), k = h.prototype = S(We), p(k, "constructor", h)) : o(function () { h(1); }) && o(function () { new h(-1); }) && I(function (e) { new h, new h(null), new h(1.5), new h(e); }, !0) || (h = n(function (e, n, r, i) { var o; return l(e, h, c), _(n) ? n instanceof $ || "ArrayBuffer" == (o = w(n)) || "SharedArrayBuffer" == o ? void 0 !== i ? new y(n, Se(r, t), i) : void 0 !== r ? new y(n, Se(r, t)) : new y(n) : be in n ? Ce(h, n) : Me.call(h, n) : new y(m(n)); }), X(g !== Function.prototype ? O(y).concat(O(g)) : O(y), function (e) { e in h || p(h, e, y[e]); }), h.prototype = k, r || (k.constructor = h)); var C = k[he], P = !!C && ("values" == C.name || void 0 == C.name), M = ze.values; p(h, me, !0), p(k, be, c), p(k, we, !0), p(k, ye, h), (s ? new h(1)[ve] == c : ve in k) || W(k, ve, { get: function () { return c; } }), x[c] = h, a(a.G + a.W + a.F * (h != y), x), a(a.S, c, { BYTES_PER_ELEMENT: t }), a(a.S + a.F * o(function () { y.of.call(h, 1); }), c, { from: Me, of: Ne }), "BYTES_PER_ELEMENT" in k || p(k, "BYTES_PER_ELEMENT", t), a(a.P, c, Le), R(c), a(a.P + a.F * ke, c, { set: Re }), a(a.P + a.F * !P, c, ze), r || k.toString == pe || (k.toString = pe), a(a.P + a.F * o(function () { new h(1).slice(); }), c, { slice: Ie }), a(a.P + a.F * (o(function () { return [1, 2].toLocaleString() != new h([1, 2]).toLocaleString(); }) || !o(function () { k.toLocaleString.call([1, 2]); })), c, { toLocaleString: Ae }), L[c] = P ? C : M, r || P || p(k, he, M); };
        }
        else
            e.exports = function () { };
    }, function (e, t, n) { var r = n(6)("unscopables"), i = Array.prototype; void 0 == i[r] && n(15)(i, r, {}), e.exports = function (e) { i[r][e] = !0; }; }, function (e, t) { e.exports = !1; }, function (e, t, n) { var r = n(42)("meta"), i = n(4), o = n(19), a = n(9).f, u = 0, s = Object.isExtensible || function () { return !0; }, c = !n(3)(function () { return s(Object.preventExtensions({})); }), l = function (e) { a(e, r, { value: { i: "O" + ++u, w: {} } }); }, f = e.exports = { KEY: r, NEED: !1, fastKey: function (e, t) { if (!i(e))
            return "symbol" == typeof e ? e : ("string" == typeof e ? "S" : "P") + e; if (!o(e, r)) {
            if (!s(e))
                return "F";
            if (!t)
                return "E";
            l(e);
        } return e[r].i; }, getWeak: function (e, t) { if (!o(e, r)) {
            if (!s(e))
                return !0;
            if (!t)
                return !1;
            l(e);
        } return e[r].w; }, onFreeze: function (e) { return c && f.NEED && s(e) && !o(e, r) && l(e), e; } }; }, function (e, t, n) { var r = n(14); e.exports = function (e, t, n) { for (var i in t)
        r(e, i, t[i], n); return e; }; }, function (e, t, n) { var r = n(22), i = n(122), o = n(83), a = n(1), u = n(8), s = n(81), c = {}, l = {}; (t = e.exports = function (e, t, n, f, p) { var d, h, v, m, y = p ? function () { return e; } : s(e), g = r(n, f, t ? 2 : 1), b = 0; if ("function" != typeof y)
        throw TypeError(e + " is not iterable!"); if (o(y)) {
        for (d = u(e.length); d > b; b++)
            if ((m = t ? g(a(h = e[b])[0], h[1]) : g(e[b])) === c || m === l)
                return m;
    }
    else
        for (v = y.call(e); !(h = v.next()).done;)
            if ((m = i(v, g, h.value, t)) === c || m === l)
                return m; }).BREAK = c, t.RETURN = l; }, function (e, t) { e.exports = function (e, t, n, r) { if (!(e instanceof t) || void 0 !== r && r in e)
        throw TypeError(n + ": incorrect invocation!"); return e; }; }, function (e, t, n) {
        "use strict";
        var r = n(2), i = n(9), o = n(10), a = n(6)("species");
        e.exports = function (e) { var t = r[e]; o && t && !t[a] && i.f(t, a, { configurable: !0, get: function () { return this; } }); };
    }, function (e, t, n) { var r = n(134), i = n(96).concat("length", "prototype"); t.f = Object.getOwnPropertyNames || function (e) { return r(e, i); }; }, function (e, t, n) { var r = n(1), i = n(133), o = n(96), a = n(97)("IE_PROTO"), u = function () { }, s = function () { var e, t = n(99)("iframe"), r = o.length; for (t.style.display = "none", n(95).appendChild(t), t.src = "javascript:", (e = t.contentWindow.document).open(), e.write("<script>document.F=Object<\/script>"), e.close(), s = e.F; r--;)
        delete s.prototype[o[r]]; return s(); }; e.exports = Object.create || function (e, t) { var n; return null !== e ? (u.prototype = r(e), n = new u, u.prototype = null, n[a] = e) : n = s(), void 0 === t ? n : i(n, t); }; }, function (e, t, n) { var r = n(26), i = Math.max, o = Math.min; e.exports = function (e, t) { return (e = r(e)) < 0 ? i(e + t, 0) : o(e, t); }; }, function (e, t, n) { var r = n(134), i = n(96); e.exports = Object.keys || function (e) { return r(e, i); }; }, function (e, t) { var n = 0, r = Math.random(); e.exports = function (e) { return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++n + r).toString(36)); }; }, function (e, t) { e.exports = function (e, t) { return { enumerable: !(1 & e), configurable: !(2 & e), writable: !(4 & e), value: t }; }; }, function (e, t, n) { var r = n(4); e.exports = function (e, t) { if (!r(e) || e._t !== t)
        throw TypeError("Incompatible receiver, " + t + " required!"); return e; }; }, function (e, t) { e.exports = {}; }, function (e, t, n) { var r = n(0), i = n(27), o = n(3), a = n(93), u = "[" + a + "]", s = RegExp("^" + u + u + "*"), c = RegExp(u + u + "*$"), l = function (e, t, n) { var i = {}, u = o(function () { return !!a[e]() || "​" != "​"[e](); }), s = i[e] = u ? t(f) : a[e]; n && (i[n] = s), r(r.P + r.F * u, "String", i); }, f = l.trim = function (e, t) { return e = String(i(e)), 1 & t && (e = e.replace(s, "")), 2 & t && (e = e.replace(c, "")), e; }; e.exports = l; }, function (e, t, n) { var r = n(9).f, i = n(19), o = n(6)("toStringTag"); e.exports = function (e, t, n) { e && !i(e = n ? e : e.prototype, o) && r(e, o, { configurable: !0, value: t }); }; }, function (e, t, n) { var r = n(21), i = n(6)("toStringTag"), o = "Arguments" == r(function () { return arguments; }()); e.exports = function (e) { var t, n, a; return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (n = function (e, t) { try {
        return e[t];
    }
    catch (e) { } }(t = Object(e), i)) ? n : o ? r(t) : "Object" == (a = r(t)) && "function" == typeof t.callee ? "Arguments" : a; }; }, function (e, t) { t.f = {}.propertyIsEnumerable; }, function (e, t, n) { var r = n(21); e.exports = Object("z").propertyIsEnumerable(0) ? Object : function (e) { return "String" == r(e) ? e.split("") : Object(e); }; }, function (e, t) { var n; n = function () { return this; }(); try {
        n = n || Function("return this")() || (0, eval)("this");
    }
    catch (e) {
        "object" == typeof window && (n = window);
    } e.exports = n; }, function (e, t, n) {
        "use strict";
        t.__esModule = !0, t.canUseDOM = t.slidesOnLeft = t.slidesOnRight = t.siblingDirection = t.getTotalSlides = t.getPostClones = t.getPreClones = t.getTrackLeft = t.getTrackAnimateCSS = t.getTrackCSS = t.checkSpecKeys = t.getSlideCount = t.checkNavigable = t.getNavigableIndexes = t.swipeEnd = t.swipeMove = t.swipeStart = t.keyHandler = t.changeSlide = t.slideHandler = t.initializedState = t.extractObject = t.canGoNext = t.getSwipeDirection = t.getHeight = t.getWidth = t.lazySlidesOnRight = t.lazySlidesOnLeft = t.lazyEndIndex = t.lazyStartIndex = t.getRequiredLazySlides = t.getOnDemandLazySlides = void 0;
        var r = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var r in n)
                Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        } return e; }, i = a(n(7)), o = a(n(70));
        function a(e) { return e && e.__esModule ? e : { default: e }; }
        var u = t.getOnDemandLazySlides = function (e) { for (var t = [], n = s(e), r = c(e), i = n; i < r; i++)
            e.lazyLoadedList.indexOf(i) < 0 && t.push(i); return t; }, s = (t.getRequiredLazySlides = function (e) { for (var t = [], n = s(e), r = c(e), i = n; i < r; i++)
            t.push(i); return t; }, t.lazyStartIndex = function (e) { return e.currentSlide - l(e); }), c = t.lazyEndIndex = function (e) { return e.currentSlide + f(e); }, l = t.lazySlidesOnLeft = function (e) { return e.centerMode ? Math.floor(e.slidesToShow / 2) + (parseInt(e.centerPadding) > 0 ? 1 : 0) : 0; }, f = t.lazySlidesOnRight = function (e) { return e.centerMode ? Math.floor((e.slidesToShow - 1) / 2) + 1 + (parseInt(e.centerPadding) > 0 ? 1 : 0) : e.slidesToShow; }, p = t.getWidth = function (e) { return e && e.offsetWidth || 0; }, d = t.getHeight = function (e) { return e && e.offsetHeight || 0; }, h = t.getSwipeDirection = function (e) { var t, n, r, i, o = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; return t = e.startX - e.curX, n = e.startY - e.curY, r = Math.atan2(n, t), (i = Math.round(180 * r / Math.PI)) < 0 && (i = 360 - Math.abs(i)), i <= 45 && i >= 0 || i <= 360 && i >= 315 ? "left" : i >= 135 && i <= 225 ? "right" : !0 === o ? i >= 35 && i <= 135 ? "up" : "down" : "vertical"; }, v = t.canGoNext = function (e) { var t = !0; return e.infinite || (e.centerMode && e.currentSlide >= e.slideCount - 1 ? t = !1 : (e.slideCount <= e.slidesToShow || e.currentSlide >= e.slideCount - e.slidesToShow) && (t = !1)), t; }, m = (t.extractObject = function (e, t) { var n = {}; return t.forEach(function (t) { return n[t] = e[t]; }), n; }, t.initializedState = function (e) { var t = i.default.Children.count(e.children), n = Math.ceil(p(o.default.findDOMNode(e.listRef))), r = Math.ceil(p(o.default.findDOMNode(e.trackRef))), a = void 0; if (e.vertical)
            a = n;
        else {
            var s = e.centerMode && 2 * parseInt(e.centerPadding);
            "string" == typeof e.centerPadding && "%" === e.centerPadding.slice(-1) && (s *= n / 100), a = Math.ceil((n - s) / e.slidesToShow);
        } var c = o.default.findDOMNode(e.listRef) && d(o.default.findDOMNode(e.listRef).querySelector('[data-index="0"]')), l = c * e.slidesToShow, f = void 0 === e.currentSlide ? e.initialSlide : e.currentSlide; e.rtl && void 0 === e.currentSlide && (f = t - 1 - e.initialSlide); var h = e.lazyLoadedList || [], v = u({ currentSlide: f, lazyLoadedList: h }, e); h.concat(v); var m = { slideCount: t, slideWidth: a, listWidth: n, trackWidth: r, currentSlide: f, slideHeight: c, listHeight: l, lazyLoadedList: h }; return null === e.autoplaying && e.autoplay && (m.autoplaying = "playing"), m; }, t.slideHandler = function (e) { var t = e.waitForAnimate, n = e.animating, i = e.fade, o = e.infinite, a = e.index, s = e.slideCount, c = e.lazyLoadedList, l = e.lazyLoad, f = e.currentSlide, p = e.centerMode, d = e.slidesToScroll, h = e.slidesToShow, m = e.useCSS; if (t && n)
            return {}; var y = a, g = void 0, b = void 0, k = void 0, S = {}, E = {}; if (i) {
            if (!o && (a < 0 || a >= s))
                return {};
            a < 0 ? y = a + s : a >= s && (y = a - s), l && c.indexOf(y) < 0 && c.push(y), S = { animating: !0, currentSlide: y, lazyLoadedList: c }, E = { animating: !1 };
        }
        else
            g = y, y < 0 ? (g = y + s, o ? s % d != 0 && (g = s - s % d) : g = 0) : !v(e) && y > f ? y = g = f : p && y >= s ? (y = o ? s : s - 1, g = o ? 0 : s - 1) : y >= s && (g = y - s, o ? s % d != 0 && (g = 0) : g = s - h), b = x(r({}, e, { slideIndex: y })), k = x(r({}, e, { slideIndex: g })), o || (b === k && (y = g), b = k), l && c.concat(u(r({}, e, { currentSlide: y }))), m ? (S = { animating: !0, currentSlide: g, trackStyle: _(r({}, e, { left: b })), lazyLoadedList: c }, E = { animating: !1, currentSlide: g, trackStyle: w(r({}, e, { left: k })), swipeLeft: null }) : S = { currentSlide: g, trackStyle: w(r({}, e, { left: k })), lazyLoadedList: c }; return { state: S, nextState: E }; }, t.changeSlide = function (e, t) { var n, i, o, a, u = e.slidesToScroll, s = e.slidesToShow, c = e.slideCount, l = e.currentSlide, f = e.lazyLoad, p = e.infinite; if (n = c % u != 0 ? 0 : (c - l) % u, "previous" === t.message)
            a = l - (o = 0 === n ? u : s - n), f && !p && (a = -1 === (i = l - o) ? c - 1 : i);
        else if ("next" === t.message)
            a = l + (o = 0 === n ? u : n), f && !p && (a = (l + u) % c + n);
        else if ("dots" === t.message) {
            if ((a = t.index * t.slidesToScroll) === t.currentSlide)
                return null;
        }
        else if ("children" === t.message) {
            if ((a = t.index) === t.currentSlide)
                return null;
            if (p) {
                var d = O(r({}, e, { targetSlide: a }));
                a > t.currentSlide && "left" === d ? a -= c : a < t.currentSlide && "right" === d && (a += c);
            }
        }
        else if ("index" === t.message && (a = Number(t.index)) === t.currentSlide)
            return null; return a; }, t.keyHandler = function (e, t, n) { return e.target.tagName.match("TEXTAREA|INPUT|SELECT") || !t ? "" : 37 === e.keyCode ? n ? "next" : "previous" : 39 === e.keyCode ? n ? "previous" : "next" : ""; }, t.swipeStart = function (e, t, n) { return "IMG" === e.target.tagName && e.preventDefault(), !t || !n && -1 !== e.type.indexOf("mouse") ? "" : { dragging: !0, touchObject: { startX: e.touches ? e.touches[0].pageX : e.clientX, startY: e.touches ? e.touches[0].pageY : e.clientY, curX: e.touches ? e.touches[0].pageX : e.clientX, curY: e.touches ? e.touches[0].pageY : e.clientY } }; }, t.swipeMove = function (e, t) { var n = t.scrolling, i = t.animating, o = t.vertical, a = t.swipeToSlide, u = t.verticalSwiping, s = t.rtl, c = t.currentSlide, l = t.edgeFriction, f = t.edgeDragged, p = t.onEdge, d = t.swiped, m = t.swiping, y = t.slideCount, g = t.slidesToScroll, b = t.infinite, _ = t.touchObject, k = t.swipeEvent, S = t.listHeight, E = t.listWidth; if (!n) {
            if (i)
                return e.preventDefault();
            o && a && u && e.preventDefault();
            var O = void 0, T = {}, C = x(t);
            _.curX = e.touches ? e.touches[0].pageX : e.clientX, _.curY = e.touches ? e.touches[0].pageY : e.clientY, _.swipeLength = Math.round(Math.sqrt(Math.pow(_.curX - _.startX, 2)));
            var P = Math.round(Math.sqrt(Math.pow(_.curY - _.startY, 2)));
            if (!u && !m && P > 10)
                return { scrolling: !0 };
            u && (_.swipeLength = P);
            var M = (s ? -1 : 1) * (_.curX > _.startX ? 1 : -1);
            u && (M = _.curY > _.startY ? 1 : -1);
            var N = Math.ceil(y / g), j = h(t.touchObject, u), A = _.swipeLength;
            return b || (0 === c && "right" === j || c + 1 >= N && "left" === j || !v(t) && "left" === j) && (A = _.swipeLength * l, !1 === f && p && (p(j), T.edgeDragged = !0)), !d && k && (k(j), T.swiped = !0), O = o ? C + A * (S / E) * M : s ? C - A * M : C + A * M, u && (O = C + A * M), T = r({}, T, { touchObject: _, swipeLeft: O, trackStyle: w(r({}, t, { left: O })) }), Math.abs(_.curX - _.startX) < .8 * Math.abs(_.curY - _.startY) ? T : (_.swipeLength > 10 && (T.swiping = !0, e.preventDefault()), T);
        } }, t.swipeEnd = function (e, t) { var n = t.dragging, i = t.swipe, o = t.touchObject, a = t.listWidth, u = t.touchThreshold, s = t.verticalSwiping, c = t.listHeight, l = t.currentSlide, f = t.swipeToSlide, p = t.scrolling, d = t.onSwipe; if (!n)
            return i && e.preventDefault(), {}; var v = s ? c / u : a / u, m = h(o, s), b = { dragging: !1, edgeDragged: !1, scrolling: !1, swiping: !1, swiped: !1, swipeLeft: null, touchObject: {} }; if (p)
            return b; if (!o.swipeLength)
            return b; if (o.swipeLength > v) {
            e.preventDefault(), d && d(m);
            var w = void 0, k = void 0;
            switch (m) {
                case "left":
                case "up":
                    k = l + g(t), w = f ? y(t, k) : k, b.currentDirection = 0;
                    break;
                case "right":
                case "down":
                    k = l - g(t), w = f ? y(t, k) : k, b.currentDirection = 1;
                    break;
                default: w = l;
            }
            b.triggerSlideHandler = w;
        }
        else {
            var S = x(t);
            b.trackStyle = _(r({}, t, { left: S }));
        } return b; }, t.getNavigableIndexes = function (e) { for (var t = e.infinite ? 2 * e.slideCount : e.slideCount, n = e.infinite ? -1 * e.slidesToShow : 0, r = e.infinite ? -1 * e.slidesToShow : 0, i = []; n < t;)
            i.push(n), n = r + e.slidesToScroll, r += Math.min(e.slidesToScroll, e.slidesToShow); return i; }), y = t.checkNavigable = function (e, t) { var n = m(e), r = 0; if (t > n[n.length - 1])
            t = n[n.length - 1];
        else
            for (var i in n) {
                if (t < n[i]) {
                    t = r;
                    break;
                }
                r = n[i];
            } return t; }, g = t.getSlideCount = function (e) { var t = e.centerMode ? e.slideWidth * Math.floor(e.slidesToShow / 2) : 0; if (e.swipeToSlide) {
            var n = void 0, r = o.default.findDOMNode(e.listRef).querySelectorAll(".slick-slide");
            if (Array.from(r).every(function (r) { if (e.vertical) {
                if (r.offsetTop + d(r) / 2 > -1 * e.swipeLeft)
                    return n = r, !1;
            }
            else if (r.offsetLeft - t + p(r) / 2 > -1 * e.swipeLeft)
                return n = r, !1; return !0; }), !n)
                return 0;
            var i = !0 === e.rtl ? e.slideCount - e.currentSlide : e.currentSlide;
            return Math.abs(n.dataset.index - i) || 1;
        } return e.slidesToScroll; }, b = t.checkSpecKeys = function (e, t) { return t.reduce(function (t, n) { return t && e.hasOwnProperty(n); }, !0) ? null : console.error("Keys Missing:", e); }, w = t.getTrackCSS = function (e) { b(e, ["left", "variableWidth", "slideCount", "slidesToShow", "slideWidth"]); var t = void 0, n = void 0, i = e.slideCount + 2 * e.slidesToShow; e.vertical ? n = i * e.slideHeight : t = E(e) * e.slideWidth; var o = { opacity: 1, transition: "", WebkitTransition: "" }; if (e.useTransform) {
            var a = e.vertical ? "translate3d(0px, " + e.left + "px, 0px)" : "translate3d(" + e.left + "px, 0px, 0px)", u = e.vertical ? "translate3d(0px, " + e.left + "px, 0px)" : "translate3d(" + e.left + "px, 0px, 0px)", s = e.vertical ? "translateY(" + e.left + "px)" : "translateX(" + e.left + "px)";
            o = r({}, o, { WebkitTransform: a, transform: u, msTransform: s });
        }
        else
            e.vertical ? o.top = e.left : o.left = e.left; return e.fade && (o = { opacity: 1 }), t && (o.width = t), n && (o.height = n), window && !window.addEventListener && window.attachEvent && (e.vertical ? o.marginTop = e.left + "px" : o.marginLeft = e.left + "px"), o; }, _ = t.getTrackAnimateCSS = function (e) { b(e, ["left", "variableWidth", "slideCount", "slidesToShow", "slideWidth", "speed", "cssEase"]); var t = w(e); return e.useTransform ? (t.WebkitTransition = "-webkit-transform " + e.speed + "ms " + e.cssEase, t.transition = "transform " + e.speed + "ms " + e.cssEase) : e.vertical ? t.transition = "top " + e.speed + "ms " + e.cssEase : t.transition = "left " + e.speed + "ms " + e.cssEase, t; }, x = t.getTrackLeft = function (e) { if (e.unslick)
            return 0; b(e, ["slideIndex", "trackRef", "infinite", "centerMode", "slideCount", "slidesToShow", "slidesToScroll", "slideWidth", "listWidth", "variableWidth", "slideHeight"]); var t, n, r = e.slideIndex, i = e.trackRef, a = e.infinite, u = e.centerMode, s = e.slideCount, c = e.slidesToShow, l = e.slidesToScroll, f = e.slideWidth, p = e.listWidth, d = e.variableWidth, h = e.slideHeight, v = e.fade, m = e.vertical; if (v || 1 === e.slideCount)
            return 0; var y = 0; if (a ? (y = -k(e), s % l != 0 && r + l > s && (y = -(r > s ? c - (r - s) : s % l)), u && (y += parseInt(c / 2))) : (s % l != 0 && r + l > s && (y = c - s % l), u && (y = parseInt(c / 2))), t = m ? r * h * -1 + y * h : r * f * -1 + y * f, !0 === d) {
            var g, w = o.default.findDOMNode(i);
            if (g = r + k(e), t = (n = w && w.childNodes[g]) ? -1 * n.offsetLeft : 0, !0 === u) {
                g = a ? r + k(e) : r, n = w && w.children[g], t = 0;
                for (var _ = 0; _ < g; _++)
                    t -= w && w.children[_] && w.children[_].offsetWidth;
                t -= parseInt(e.centerPadding), t += n && (p - n.offsetWidth) / 2;
            }
        } return t; }, k = t.getPreClones = function (e) { return e.unslick || !e.infinite ? 0 : e.variableWidth ? e.slideCount : e.slidesToShow + (e.centerMode ? 1 : 0); }, S = t.getPostClones = function (e) { return e.unslick || !e.infinite ? 0 : e.slideCount; }, E = t.getTotalSlides = function (e) { return 1 === e.slideCount ? 1 : k(e) + e.slideCount + S(e); }, O = t.siblingDirection = function (e) { return e.targetSlide > e.currentSlide ? e.targetSlide > e.currentSlide + T(e) ? "left" : "right" : e.targetSlide < e.currentSlide - C(e) ? "right" : "left"; }, T = t.slidesOnRight = function (e) { var t = e.slidesToShow, n = e.centerMode, r = e.rtl, i = e.centerPadding; if (n) {
            var o = (t - 1) / 2 + 1;
            return parseInt(i) > 0 && (o += 1), r && t % 2 == 0 && (o += 1), o;
        } return r ? 0 : t - 1; }, C = t.slidesOnLeft = function (e) { var t = e.slidesToShow, n = e.centerMode, r = e.rtl, i = e.centerPadding; if (n) {
            var o = (t - 1) / 2 + 1;
            return parseInt(i) > 0 && (o += 1), r || t % 2 != 0 || (o += 1), o;
        } return r ? t - 1 : 0; };
        t.canUseDOM = function () { return !("undefined" == typeof window || !window.document || !window.document.createElement); };
    }, function (e, t, n) {
        var r;
        /*!
          Copyright (c) 2017 Jed Watson.
          Licensed under the MIT License (MIT), see
          http://jedwatson.github.io/classnames
        */
        /*!
          Copyright (c) 2017 Jed Watson.
          Licensed under the MIT License (MIT), see
          http://jedwatson.github.io/classnames
        */
        !function () {
            "use strict";
            var n = {}.hasOwnProperty;
            function i() { for (var e = [], t = 0; t < arguments.length; t++) {
                var r = arguments[t];
                if (r) {
                    var o = typeof r;
                    if ("string" === o || "number" === o)
                        e.push(r);
                    else if (Array.isArray(r) && r.length) {
                        var a = i.apply(null, r);
                        a && e.push(a);
                    }
                    else if ("object" === o)
                        for (var u in r)
                            n.call(r, u) && r[u] && e.push(u);
                }
            } return e.join(" "); }
            void 0 !== e && e.exports ? (i.default = i, e.exports = i) : void 0 === (r = function () { return i; }.apply(t, [])) || (e.exports = r);
        }();
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(12), o = n(22), a = n(35);
        e.exports = function (e) { r(r.S, e, { from: function (e) { var t, n, r, u, s = arguments[1]; return i(this), (t = void 0 !== s) && i(s), void 0 == e ? new this : (n = [], t ? (r = 0, u = o(s, arguments[2], 2), a(e, !1, function (e) { n.push(u(e, r++)); })) : a(e, !1, n.push, n), new this(n)); } }); };
    }, function (e, t, n) {
        "use strict";
        var r = n(0);
        e.exports = function (e) { r(r.S, e, { of: function () { for (var e = arguments.length, t = new Array(e); e--;)
                t[e] = arguments[e]; return new this(t); } }); };
    }, function (e, t, n) {
        "use strict";
        e.exports = n(32) || !n(3)(function () { var e = Math.random(); __defineSetter__.call(null, e, function () { }), delete n(2)[e]; });
    }, function (e, t, n) { for (var r, i = n(2), o = n(15), a = n(42), u = a("typed_array"), s = a("view"), c = !(!i.ArrayBuffer || !i.DataView), l = c, f = 0, p = "Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(","); f < 9;)
        (r = i[p[f++]]) ? (o(r.prototype, u, !0), o(r.prototype, s, !0)) : l = !1; e.exports = { ABV: c, CONSTR: l, TYPED: u, VIEW: s }; }, function (e, t, n) {
        "use strict";
        var r = n(2), i = n(0), o = n(14), a = n(34), u = n(33), s = n(35), c = n(36), l = n(4), f = n(3), p = n(63), d = n(47), h = n(92);
        e.exports = function (e, t, n, v, m, y) { var g = r[e], b = g, w = m ? "set" : "add", _ = b && b.prototype, x = {}, k = function (e) { var t = _[e]; o(_, e, "delete" == e ? function (e) { return !(y && !l(e)) && t.call(this, 0 === e ? 0 : e); } : "has" == e ? function (e) { return !(y && !l(e)) && t.call(this, 0 === e ? 0 : e); } : "get" == e ? function (e) { return y && !l(e) ? void 0 : t.call(this, 0 === e ? 0 : e); } : "add" == e ? function (e) { return t.call(this, 0 === e ? 0 : e), this; } : function (e, n) { return t.call(this, 0 === e ? 0 : e, n), this; }); }; if ("function" == typeof b && (y || _.forEach && !f(function () { (new b).entries().next(); }))) {
            var S = new b, E = S[w](y ? {} : -0, 1) != S, O = f(function () { S.has(1); }), T = p(function (e) { new b(e); }), C = !y && f(function () { for (var e = new b, t = 5; t--;)
                e[w](t, t); return !e.has(-0); });
            T || ((b = t(function (t, n) { c(t, b, e); var r = h(new g, t, b); return void 0 != n && s(n, m, r[w], r), r; })).prototype = _, _.constructor = b), (O || C) && (k("delete"), k("has"), m && k("get")), (C || E) && k(w), y && _.clear && delete _.clear;
        }
        else
            b = v.getConstructor(t, e, m, w), a(b.prototype, n), u.NEED = !0; return d(b, e), x[e] = b, i(i.G + i.W + i.F * (b != g), x), y || v.setStrong(b, e, m), b; };
    }, function (e, t, n) { var r = n(2).navigator; e.exports = r && r.userAgent || ""; }, function (e, t, n) { var r = n(1), i = n(12), o = n(6)("species"); e.exports = function (e, t) { var n, a = r(e).constructor; return void 0 === a || void 0 == (n = r(a)[o]) ? t : i(n); }; }, function (e, t, n) {
        "use strict";
        var r = n(15), i = n(14), o = n(3), a = n(27), u = n(6);
        e.exports = function (e, t, n) { var s = u(e), c = n(a, s, ""[e]), l = c[0], f = c[1]; o(function () { var t = {}; return t[s] = function () { return 7; }, 7 != ""[e](t); }) && (i(String.prototype, e, l), r(RegExp.prototype, s, 2 == t ? function (e, t) { return f.call(e, this, t); } : function (e) { return f.call(e, this); })); };
    }, function (e, t, n) {
        "use strict";
        var r = n(1);
        e.exports = function () { var e = r(this), t = ""; return e.global && (t += "g"), e.ignoreCase && (t += "i"), e.multiline && (t += "m"), e.unicode && (t += "u"), e.sticky && (t += "y"), t; };
    }, function (e, t, n) { var r = n(6)("iterator"), i = !1; try {
        var o = [7][r]();
        o.return = function () { i = !0; }, Array.from(o, function () { throw 2; });
    }
    catch (e) { } e.exports = function (e, t) { if (!t && !i)
        return !1; var n = !1; try {
        var o = [7], a = o[r]();
        a.next = function () { return { done: n = !0 }; }, o[r] = function () { return a; }, e(o);
    }
    catch (e) { } return n; }; }, function (e, t, n) { var r = n(4), i = n(21), o = n(6)("match"); e.exports = function (e) { var t; return r(e) && (void 0 !== (t = e[o]) ? !!t : "RegExp" == i(e)); }; }, function (e, t, n) { var r = n(21); e.exports = Array.isArray || function (e) { return "Array" == r(e); }; }, function (e, t) { t.f = Object.getOwnPropertySymbols; }, function (e, t, n) { var r = n(18), i = n(8), o = n(40); e.exports = function (e) { return function (t, n, a) { var u, s = r(t), c = i(s.length), l = o(a, c); if (e && n != n) {
        for (; c > l;)
            if ((u = s[l++]) != u)
                return !0;
    }
    else
        for (; c > l; l++)
            if ((e || l in s) && s[l] === n)
                return e || l || 0; return !e && -1; }; }; }, function (e, t, n) { var r = n(23), i = n(2), o = i["__core-js_shared__"] || (i["__core-js_shared__"] = {}); (e.exports = function (e, t) { return o[e] || (o[e] = void 0 !== t ? t : {}); })("versions", []).push({ version: r.version, mode: n(32) ? "pure" : "global", copyright: "© 2018 Denis Pushkarev (zloirock.ru)" }); }, function (e, t, n) {
        "use strict";
        /*!
         * Font Awesome Free 5.0.13 by @fontawesome - https://fontawesome.com
         * License - https://fontawesome.com/license (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
         */ var r = function () { }, i = {}, o = {}, a = null, u = { mark: r, measure: r };
        try {
            "undefined" != typeof window && (i = window), "undefined" != typeof document && (o = document), "undefined" != typeof MutationObserver && (a = MutationObserver), "undefined" != typeof performance && (u = performance);
        }
        catch (e) { }
        var s = (i.navigator || {}).userAgent, c = void 0 === s ? "" : s, l = i, f = o, p = a, d = u, h = !!l.document, v = !!f.documentElement && !!f.head && "function" == typeof f.addEventListener && "function" == typeof f.createElement, m = ~c.indexOf("MSIE") || ~c.indexOf("Trident/"), y = 16, g = "data-fa-i2svg", b = "data-fa-pseudo-element", w = "fontawesome-i2svg", _ = function () { try {
            return !0;
        }
        catch (e) {
            return !1;
        } }(), x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = x.concat([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), S = ["class", "data-prefix", "data-icon", "data-fa-transform", "data-fa-mask"], E = ["xs", "sm", "lg", "fw", "ul", "li", "border", "pull-left", "pull-right", "spin", "pulse", "rotate-90", "rotate-180", "rotate-270", "flip-horizontal", "flip-vertical", "stack", "stack-1x", "stack-2x", "inverse", "layers", "layers-text", "layers-counter"].concat(x.map(function (e) { return e + "x"; })).concat(k.map(function (e) { return "w-" + e; })), O = function (e, t) { if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function"); }, T = function () { function e(e, t) { for (var n = 0; n < t.length; n++) {
            var r = t[n];
            r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        } } return function (t, n, r) { return n && e(t.prototype, n), r && e(t, r), t; }; }(), C = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var r in n)
                Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        } return e; }, P = function (e) { if (Array.isArray(e)) {
            for (var t = 0, n = Array(e.length); t < e.length; t++)
                n[t] = e[t];
            return n;
        } return Array.from(e); }, M = l.FontAwesomeConfig || {}, N = Object.keys(M), j = C({ familyPrefix: "fa", replacementClass: "svg-inline--fa", autoReplaceSvg: !0, autoAddCss: !0, autoA11y: !0, searchPseudoElements: !1, observeMutations: !0, keepOriginalSource: !0, measurePerformance: !1, showMissingIcons: !0 }, M);
        j.autoReplaceSvg || (j.observeMutations = !1);
        var A = C({}, j);
        function L(e) { var t = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).asNewDefault, n = void 0 !== t && t, r = Object.keys(A), i = n ? function (e) { return ~r.indexOf(e) && !~N.indexOf(e); } : function (e) { return ~r.indexOf(e); }; Object.keys(e).forEach(function (t) { i(t) && (A[t] = e[t]); }); }
        l.FontAwesomeConfig = A;
        var I = l || {};
        I.___FONT_AWESOME___ || (I.___FONT_AWESOME___ = {}), I.___FONT_AWESOME___.styles || (I.___FONT_AWESOME___.styles = {}), I.___FONT_AWESOME___.hooks || (I.___FONT_AWESOME___.hooks = {}), I.___FONT_AWESOME___.shims || (I.___FONT_AWESOME___.shims = []);
        var R = I.___FONT_AWESOME___, z = [], F = !1;
        v && ((F = (f.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(f.readyState)) || f.addEventListener("DOMContentLoaded", function e() { f.removeEventListener("DOMContentLoaded", e), F = 1, z.map(function (e) { return e(); }); }));
        var D = function (e) { v && (F ? setTimeout(e, 0) : z.push(e)); }, U = y, W = { size: 16, x: 0, y: 0, rotate: 0, flipX: !1, flipY: !1 };
        function H(e) { if (e && v) {
            var t = f.createElement("style");
            t.setAttribute("type", "text/css"), t.innerHTML = e;
            for (var n = f.head.childNodes, r = null, i = n.length - 1; i > -1; i--) {
                var o = n[i], a = (o.tagName || "").toUpperCase();
                ["STYLE", "LINK"].indexOf(a) > -1 && (r = o);
            }
            return f.head.insertBefore(t, r), e;
        } }
        var B = 0;
        function V() { return ++B; }
        function q(e) { for (var t = [], n = (e || []).length >>> 0; n--;)
            t[n] = e[n]; return t; }
        function G(e) { return e.classList ? q(e.classList) : (e.getAttribute("class") || "").split(" ").filter(function (e) { return e; }); }
        function $(e, t) { var n, r = t.split("-"), i = r[0], o = r.slice(1).join("-"); return i !== e || "" === o || (n = o, ~E.indexOf(n)) ? null : o; }
        function Y(e) { return ("" + e).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;"); }
        function X(e) { return Object.keys(e || {}).reduce(function (t, n) { return t + (n + ": ") + e[n] + ";"; }, ""); }
        function K(e) { return e.size !== W.size || e.x !== W.x || e.y !== W.y || e.rotate !== W.rotate || e.flipX || e.flipY; }
        function Q(e) { var t = e.transform, n = e.containerWidth, r = e.iconWidth; return { outer: { transform: "translate(" + n / 2 + " 256)" }, inner: { transform: "translate(" + 32 * t.x + ", " + 32 * t.y + ") " + " " + ("scale(" + t.size / 16 * (t.flipX ? -1 : 1) + ", " + t.size / 16 * (t.flipY ? -1 : 1) + ") ") + " " + ("rotate(" + t.rotate + " 0 0)") }, path: { transform: "translate(" + r / 2 * -1 + " -256)" } }; }
        var J = { x: 0, y: 0, width: "100%", height: "100%" }, Z = function (e) { var t = e.children, n = e.attributes, r = e.main, i = e.mask, o = e.transform, a = r.width, u = r.icon, s = i.width, c = i.icon, l = Q({ transform: o, containerWidth: s, iconWidth: a }), f = { tag: "rect", attributes: C({}, J, { fill: "white" }) }, p = { tag: "g", attributes: C({}, l.inner), children: [{ tag: "path", attributes: C({}, u.attributes, l.path, { fill: "black" }) }] }, d = { tag: "g", attributes: C({}, l.outer), children: [p] }, h = "mask-" + V(), v = "clip-" + V(), m = { tag: "defs", children: [{ tag: "clipPath", attributes: { id: v }, children: [c] }, { tag: "mask", attributes: C({}, J, { id: h, maskUnits: "userSpaceOnUse", maskContentUnits: "userSpaceOnUse" }), children: [f, d] }] }; return t.push(m, { tag: "rect", attributes: C({ fill: "currentColor", "clip-path": "url(#" + v + ")", mask: "url(#" + h + ")" }, J) }), { children: t, attributes: n }; }, ee = function (e) { var t = e.children, n = e.attributes, r = e.main, i = e.transform, o = X(e.styles); if (o.length > 0 && (n.style = o), K(i)) {
            var a = Q({ transform: i, containerWidth: r.width, iconWidth: r.width });
            t.push({ tag: "g", attributes: C({}, a.outer), children: [{ tag: "g", attributes: C({}, a.inner), children: [{ tag: r.icon.tag, children: r.icon.children, attributes: C({}, r.icon.attributes, a.path) }] }] });
        }
        else
            t.push(r.icon); return { children: t, attributes: n }; }, te = function (e) { var t = e.children, n = e.main, r = e.mask, i = e.attributes, o = e.styles, a = e.transform; if (K(a) && n.found && !r.found) {
            var u = { x: n.width / n.height / 2, y: .5 };
            i.style = X(C({}, o, { "transform-origin": u.x + a.x / 16 + "em " + (u.y + a.y / 16) + "em" }));
        } return [{ tag: "svg", attributes: i, children: t }]; }, ne = function (e) { var t = e.prefix, n = e.iconName, r = e.children, i = e.attributes, o = e.symbol, a = !0 === o ? t + "-" + A.familyPrefix + "-" + n : o; return [{ tag: "svg", attributes: { style: "display: none;" }, children: [{ tag: "symbol", attributes: C({}, i, { id: a }), children: r }] }]; };
        function re(e) { var t = e.icons, n = t.main, r = t.mask, i = e.prefix, o = e.iconName, a = e.transform, u = e.symbol, s = e.title, c = e.extra, l = e.watchable, f = void 0 !== l && l, p = r.found ? r : n, d = p.width, h = p.height, v = "fa-w-" + Math.ceil(d / h * 16), m = [A.replacementClass, o ? A.familyPrefix + "-" + o : "", v].concat(c.classes).join(" "), y = { children: [], attributes: C({}, c.attributes, { "data-prefix": i, "data-icon": o, class: m, role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 " + d + " " + h }) }; f && (y.attributes[g] = ""), s && y.children.push({ tag: "title", attributes: { id: y.attributes["aria-labelledby"] || "title-" + V() }, children: [s] }); var b = C({}, y, { prefix: i, iconName: o, main: n, mask: r, transform: a, symbol: u, styles: c.styles }), w = r.found && n.found ? Z(b) : ee(b), _ = w.children, x = w.attributes; return b.children = _, b.attributes = x, u ? ne(b) : te(b); }
        function ie(e) { var t = e.content, n = e.width, r = e.height, i = e.transform, o = e.title, a = e.extra, u = e.watchable, s = void 0 !== u && u, c = C({}, a.attributes, o ? { title: o } : {}, { class: a.classes.join(" ") }); s && (c[g] = ""); var l = C({}, a.styles); K(i) && (l.transform = function (e) { var t = e.transform, n = e.width, r = void 0 === n ? y : n, i = e.height, o = void 0 === i ? y : i, a = e.startCentered, u = void 0 !== a && a, s = ""; return s += u && m ? "translate(" + (t.x / U - r / 2) + "em, " + (t.y / U - o / 2) + "em) " : u ? "translate(calc(-50% + " + t.x / U + "em), calc(-50% + " + t.y / U + "em)) " : "translate(" + t.x / U + "em, " + t.y / U + "em) ", s += "scale(" + t.size / U * (t.flipX ? -1 : 1) + ", " + t.size / U * (t.flipY ? -1 : 1) + ") ", s += "rotate(" + t.rotate + "deg) "; }({ transform: i, startCentered: !0, width: n, height: r }), l["-webkit-transform"] = l.transform); var f = X(l); f.length > 0 && (c.style = f); var p = []; return p.push({ tag: "span", attributes: c, children: [t] }), o && p.push({ tag: "span", attributes: { class: "sr-only" }, children: [o] }), p; }
        var oe = function () { }, ae = A.measurePerformance && d && d.mark && d.measure ? d : { mark: oe, measure: oe }, ue = 'FA "5.0.13"', se = function (e) { ae.mark(ue + " " + e + " ends"), ae.measure(ue + " " + e, ue + " " + e + " begins", ue + " " + e + " ends"); }, ce = { begin: function (e) { return ae.mark(ue + " " + e + " begins"), function () { return se(e); }; }, end: se }, le = function (e, t, n, r) { var i, o, a, u = Object.keys(e), s = u.length, c = void 0 !== r ? function (e, t) { return function (n, r, i, o) { return e.call(t, n, r, i, o); }; }(t, r) : t; for (void 0 === n ? (i = 1, a = e[u[0]]) : (i = 0, a = n); i < s; i++)
            a = c(a, e[o = u[i]], o, e); return a; }, fe = R.styles, pe = R.shims, de = {}, he = {}, ve = {}, me = function () { var e = function (e) { return le(fe, function (t, n, r) { return t[r] = le(n, e, {}), t; }, {}); }; de = e(function (e, t, n) { return e[t[3]] = n, e; }), he = e(function (e, t, n) { var r = t[2]; return e[n] = n, r.forEach(function (t) { e[t] = n; }), e; }); var t = "far" in fe; ve = le(pe, function (e, n) { var r = n[0], i = n[1], o = n[2]; return "far" !== i || t || (i = "fas"), e[r] = { prefix: i, iconName: o }, e; }, {}); };
        me();
        var ye = R.styles, ge = function () { return { prefix: null, iconName: null, rest: [] }; };
        function be(e) { return e.reduce(function (e, t) { var n = $(A.familyPrefix, t); if (ye[t])
            e.prefix = t;
        else if (n) {
            var r = "fa" === e.prefix ? ve[n] || { prefix: null, iconName: null } : {};
            e.iconName = r.iconName || n, e.prefix = r.prefix || e.prefix;
        }
        else
            t !== A.replacementClass && 0 !== t.indexOf("fa-w-") && e.rest.push(t); return e; }, ge()); }
        function we(e, t, n) { if (e && e[t] && e[t][n])
            return { prefix: t, iconName: n, icon: e[t][n] }; }
        function _e(e) { var t = e.tag, n = e.attributes, r = void 0 === n ? {} : n, i = e.children, o = void 0 === i ? [] : i; return "string" == typeof e ? Y(e) : "<" + t + " " + function (e) { return Object.keys(e || {}).reduce(function (t, n) { return t + (n + '="') + Y(e[n]) + '" '; }, "").trim(); }(r) + ">" + o.map(_e).join("") + "</" + t + ">"; }
        var xe = function () { };
        function ke(e) { return "string" == typeof (e.getAttribute ? e.getAttribute(g) : null); }
        var Se = { replace: function (e) { var t = e[0], n = e[1].map(function (e) { return _e(e); }).join("\n"); if (t.parentNode && t.outerHTML)
                t.outerHTML = n + (A.keepOriginalSource && "svg" !== t.tagName.toLowerCase() ? "\x3c!-- " + t.outerHTML + " --\x3e" : "");
            else if (t.parentNode) {
                var r = document.createElement("span");
                t.parentNode.replaceChild(r, t), r.outerHTML = n;
            } }, nest: function (e) { var t = e[0], n = e[1]; if (~G(t).indexOf(A.replacementClass))
                return Se.replace(e); var r = new RegExp(A.familyPrefix + "-.*"); delete n[0].attributes.style; var i = n[0].attributes.class.split(" ").reduce(function (e, t) { return t === A.replacementClass || t.match(r) ? e.toSvg.push(t) : e.toNode.push(t), e; }, { toNode: [], toSvg: [] }); n[0].attributes.class = i.toSvg.join(" "); var o = n.map(function (e) { return _e(e); }).join("\n"); t.setAttribute("class", i.toNode.join(" ")), t.setAttribute(g, ""), t.innerHTML = o; } };
        function Ee(e, t) { var n = "function" == typeof t ? t : xe; 0 === e.length ? n() : (l.requestAnimationFrame || function (e) { return e(); })(function () { var t = !0 === A.autoReplaceSvg ? Se.replace : Se[A.autoReplaceSvg] || Se.replace, r = ce.begin("mutate"); e.map(t), r(), n(); }); }
        var Oe = !1;
        var Te = null;
        var Ce = function (e) { var t = e.getAttribute("style"), n = []; return t && (n = t.split(";").reduce(function (e, t) { var n = t.split(":"), r = n[0], i = n.slice(1); return r && i.length > 0 && (e[r] = i.join(":").trim()), e; }, {})), n; };
        var Pe = function (e) { var t, n, r = e.getAttribute("data-prefix"), i = e.getAttribute("data-icon"), o = void 0 !== e.innerText ? e.innerText.trim() : "", a = be(G(e)); return r && i && (a.prefix = r, a.iconName = i), a.prefix && o.length > 1 ? a.iconName = (t = a.prefix, n = e.innerText, he[t][n]) : a.prefix && 1 === o.length && (a.iconName = function (e, t) { return de[e][t]; }(a.prefix, function (e) { for (var t = "", n = 0; n < e.length; n++)
            t += ("000" + e.charCodeAt(n).toString(16)).slice(-4); return t; }(e.innerText))), a; }, Me = function (e) { var t = { size: 16, x: 0, y: 0, flipX: !1, flipY: !1, rotate: 0 }; return e ? e.toLowerCase().split(" ").reduce(function (e, t) { var n = t.toLowerCase().split("-"), r = n[0], i = n.slice(1).join("-"); if (r && "h" === i)
            return e.flipX = !0, e; if (r && "v" === i)
            return e.flipY = !0, e; if (i = parseFloat(i), isNaN(i))
            return e; switch (r) {
            case "grow":
                e.size = e.size + i;
                break;
            case "shrink":
                e.size = e.size - i;
                break;
            case "left":
                e.x = e.x - i;
                break;
            case "right":
                e.x = e.x + i;
                break;
            case "up":
                e.y = e.y - i;
                break;
            case "down":
                e.y = e.y + i;
                break;
            case "rotate": e.rotate = e.rotate + i;
        } return e; }, t) : t; }, Ne = function (e) { return Me(e.getAttribute("data-fa-transform")); }, je = function (e) { var t = e.getAttribute("data-fa-symbol"); return null !== t && ("" === t || t); }, Ae = function (e) { var t = q(e.attributes).reduce(function (e, t) { return "class" !== e.name && "style" !== e.name && (e[t.name] = t.value), e; }, {}), n = e.getAttribute("title"); return A.autoA11y && (n ? t["aria-labelledby"] = A.replacementClass + "-title-" + V() : t["aria-hidden"] = "true"), t; }, Le = function (e) { var t = e.getAttribute("data-fa-mask"); return t ? be(t.split(" ").map(function (e) { return e.trim(); })) : ge(); };
        function Ie(e) { this.name = "MissingIcon", this.message = e || "Icon unavailable", this.stack = (new Error).stack; }
        Ie.prototype = Object.create(Error.prototype), Ie.prototype.constructor = Ie;
        var Re = { fill: "currentColor" }, ze = { attributeType: "XML", repeatCount: "indefinite", dur: "2s" }, Fe = { tag: "path", attributes: C({}, Re, { d: "M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z" }) }, De = C({}, ze, { attributeName: "opacity" }), Ue = { tag: "g", children: [Fe, { tag: "circle", attributes: C({}, Re, { cx: "256", cy: "364", r: "28" }), children: [{ tag: "animate", attributes: C({}, ze, { attributeName: "r", values: "28;14;28;28;14;28;" }) }, { tag: "animate", attributes: C({}, De, { values: "1;0;1;1;0;1;" }) }] }, { tag: "path", attributes: C({}, Re, { opacity: "1", d: "M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z" }), children: [{ tag: "animate", attributes: C({}, De, { values: "1;0;0;0;0;1;" }) }] }, { tag: "path", attributes: C({}, Re, { opacity: "0", d: "M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z" }), children: [{ tag: "animate", attributes: C({}, De, { values: "0;0;1;1;0;0;" }) }] }] }, We = R.styles, He = "fa-layers-text", Be = /Font Awesome 5 (Solid|Regular|Light|Brands)/, Ve = { Solid: "fas", Regular: "far", Light: "fal", Brands: "fab" };
        function qe(e, t) { var n = { found: !1, width: 512, height: 512, icon: Ue }; if (e && t && We[t] && We[t][e]) {
            var r = We[t][e];
            n = { found: !0, width: r[0], height: r[1], icon: { tag: "path", attributes: { fill: "currentColor", d: r.slice(4)[0] } } };
        }
        else if (e && t && !A.showMissingIcons)
            throw new Ie("Icon is missing for prefix " + t + " with icon name " + e); return n; }
        function Ge(e) { var t = function (e) { var t = Pe(e), n = t.iconName, r = t.prefix, i = t.rest, o = Ce(e), a = Ne(e), u = je(e), s = Ae(e), c = Le(e); return { iconName: n, title: e.getAttribute("title"), prefix: r, transform: a, symbol: u, mask: c, extra: { classes: i, styles: o, attributes: s } }; }(e); return ~t.extra.classes.indexOf(He) ? function (e, t) { var n = t.title, r = t.transform, i = t.extra, o = null, a = null; if (m) {
            var u = parseInt(getComputedStyle(e).fontSize, 10), s = e.getBoundingClientRect();
            o = s.width / u, a = s.height / u;
        } return A.autoA11y && !n && (i.attributes["aria-hidden"] = "true"), [e, ie({ content: e.innerHTML, width: o, height: a, transform: r, title: n, extra: i, watchable: !0 })]; }(e, t) : function (e, t) { var n = t.iconName, r = t.title, i = t.prefix, o = t.transform, a = t.symbol, u = t.mask, s = t.extra; return [e, re({ icons: { main: qe(n, i), mask: qe(u.iconName, u.prefix) }, prefix: i, iconName: n, transform: o, symbol: a, mask: u, title: r, extra: s, watchable: !0 })]; }(e, t); }
        function $e(e) { "function" == typeof e.remove ? e.remove() : e && e.parentNode && e.parentNode.removeChild(e); }
        function Ye(e) { if (v) {
            var t = ce.begin("searchPseudoElements");
            Oe = !0, function () { q(e.querySelectorAll("*")).forEach(function (e) { [":before", ":after"].forEach(function (t) { var n = l.getComputedStyle(e, t), r = n.getPropertyValue("font-family").match(Be), i = q(e.children).filter(function (e) { return e.getAttribute(b) === t; })[0]; if (i && (i.nextSibling && i.nextSibling.textContent.indexOf(b) > -1 && $e(i.nextSibling), $e(i), i = null), r && !i) {
                var o = n.getPropertyValue("content"), a = f.createElement("i");
                a.setAttribute("class", "" + Ve[r[1]]), a.setAttribute(b, t), a.innerText = 3 === o.length ? o.substr(1, 1) : o, ":before" === t ? e.insertBefore(a, e.firstChild) : e.appendChild(a);
            } }); }); }(), Oe = !1, t();
        } }
        function Xe(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null; if (v) {
            var n = f.documentElement.classList, r = function (e) { return n.add(w + "-" + e); }, i = function (e) { return n.remove(w + "-" + e); }, o = Object.keys(We), a = ["." + He + ":not([" + g + "])"].concat(o.map(function (e) { return "." + e + ":not([" + g + "])"; })).join(", ");
            if (0 !== a.length) {
                var u = q(e.querySelectorAll(a));
                if (u.length > 0) {
                    r("pending"), i("complete");
                    var s = ce.begin("onTree"), c = u.reduce(function (e, t) { try {
                        var n = Ge(t);
                        n && e.push(n);
                    }
                    catch (e) {
                        _ || e instanceof Ie && console.error(e);
                    } return e; }, []);
                    s(), Ee(c, function () { r("active"), r("complete"), i("pending"), "function" == typeof t && t(); });
                }
            }
        } }
        function Ke(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = Ge(e); n && Ee([n], t); }
        var Qe = function () { var e = "svg-inline--fa", t = A.familyPrefix, n = A.replacementClass, r = 'svg:not(:root).svg-inline--fa {\n  overflow: visible; }\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -.125em; }\n  .svg-inline--fa.fa-lg {\n    vertical-align: -.225em; }\n  .svg-inline--fa.fa-w-1 {\n    width: 0.0625em; }\n  .svg-inline--fa.fa-w-2 {\n    width: 0.125em; }\n  .svg-inline--fa.fa-w-3 {\n    width: 0.1875em; }\n  .svg-inline--fa.fa-w-4 {\n    width: 0.25em; }\n  .svg-inline--fa.fa-w-5 {\n    width: 0.3125em; }\n  .svg-inline--fa.fa-w-6 {\n    width: 0.375em; }\n  .svg-inline--fa.fa-w-7 {\n    width: 0.4375em; }\n  .svg-inline--fa.fa-w-8 {\n    width: 0.5em; }\n  .svg-inline--fa.fa-w-9 {\n    width: 0.5625em; }\n  .svg-inline--fa.fa-w-10 {\n    width: 0.625em; }\n  .svg-inline--fa.fa-w-11 {\n    width: 0.6875em; }\n  .svg-inline--fa.fa-w-12 {\n    width: 0.75em; }\n  .svg-inline--fa.fa-w-13 {\n    width: 0.8125em; }\n  .svg-inline--fa.fa-w-14 {\n    width: 0.875em; }\n  .svg-inline--fa.fa-w-15 {\n    width: 0.9375em; }\n  .svg-inline--fa.fa-w-16 {\n    width: 1em; }\n  .svg-inline--fa.fa-w-17 {\n    width: 1.0625em; }\n  .svg-inline--fa.fa-w-18 {\n    width: 1.125em; }\n  .svg-inline--fa.fa-w-19 {\n    width: 1.1875em; }\n  .svg-inline--fa.fa-w-20 {\n    width: 1.25em; }\n  .svg-inline--fa.fa-pull-left {\n    margin-right: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-pull-right {\n    margin-left: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-border {\n    height: 1.5em; }\n  .svg-inline--fa.fa-li {\n    width: 2em; }\n  .svg-inline--fa.fa-fw {\n    width: 1.25em; }\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -.125em;\n  width: 1em; }\n  .fa-layers svg.svg-inline--fa {\n    -webkit-transform-origin: center center;\n            transform-origin: center center; }\n\n.fa-layers-text, .fa-layers-counter {\n  display: inline-block;\n  position: absolute;\n  text-align: center; }\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center; }\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: .25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right; }\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left; }\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left; }\n\n.fa-lg {\n  font-size: 1.33333em;\n  line-height: 0.75em;\n  vertical-align: -.0667em; }\n\n.fa-xs {\n  font-size: .75em; }\n\n.fa-sm {\n  font-size: .875em; }\n\n.fa-1x {\n  font-size: 1em; }\n\n.fa-2x {\n  font-size: 2em; }\n\n.fa-3x {\n  font-size: 3em; }\n\n.fa-4x {\n  font-size: 4em; }\n\n.fa-5x {\n  font-size: 5em; }\n\n.fa-6x {\n  font-size: 6em; }\n\n.fa-7x {\n  font-size: 7em; }\n\n.fa-8x {\n  font-size: 8em; }\n\n.fa-9x {\n  font-size: 9em; }\n\n.fa-10x {\n  font-size: 10em; }\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em; }\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0; }\n  .fa-ul > li {\n    position: relative; }\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit; }\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: .1em;\n  padding: .2em .25em .15em; }\n\n.fa-pull-left {\n  float: left; }\n\n.fa-pull-right {\n  float: right; }\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: .3em; }\n\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: .3em; }\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear; }\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8); }\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg); }\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg); }\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg); }\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1); }\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1); }\n\n.fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1); }\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical {\n  -webkit-filter: none;\n          filter: none; }\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2em; }\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1em; }\n\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2em; }\n\n.fa-inverse {\n  color: #fff; }\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px; }\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto; }\n'; if ("fa" !== t || n !== e) {
            var i = new RegExp("\\.fa\\-", "g"), o = new RegExp("\\." + e, "g");
            r = r.replace(i, "." + t + "-").replace(o, "." + n);
        } return r; };
        function Je(e) { return { found: !0, width: e[0], height: e[1], icon: { tag: "path", attributes: { fill: "currentColor", d: e.slice(4)[0] } } }; }
        var Ze = !1;
        function et() { A.autoAddCss && (Ze || H(Qe()), Ze = !0); }
        function tt(e, t) { return Object.defineProperty(e, "abstract", { get: t }), Object.defineProperty(e, "html", { get: function () { return e.abstract.map(function (e) { return _e(e); }); } }), Object.defineProperty(e, "node", { get: function () { if (v) {
                var t = f.createElement("div");
                return t.innerHTML = e.html, t.children;
            } } }), e; }
        function nt(e) { var t = e.prefix, n = void 0 === t ? "fa" : t, r = e.iconName; if (r)
            return we(it.definitions, n, r) || we(R.styles, n, r); }
        var rt, it = new (function () { function e() { O(this, e), this.definitions = {}; } return T(e, [{ key: "add", value: function () { for (var e = this, t = arguments.length, n = Array(t), r = 0; r < t; r++)
                    n[r] = arguments[r]; var i = n.reduce(this._pullDefinitions, {}); Object.keys(i).forEach(function (t) { e.definitions[t] = C({}, e.definitions[t] || {}, i[t]), function e(t, n) { var r = Object.keys(n).reduce(function (e, t) { var r = n[t]; return r.icon ? e[r.iconName] = r.icon : e[t] = r, e; }, {}); "function" == typeof R.hooks.addPack ? R.hooks.addPack(t, r) : R.styles[t] = C({}, R.styles[t] || {}, r), "fas" === t && e("fa", n); }(t, i[t]); }); } }, { key: "reset", value: function () { this.definitions = {}; } }, { key: "_pullDefinitions", value: function (e, t) { var n = t.prefix && t.iconName && t.icon ? { 0: t } : t; return Object.keys(n).map(function (t) { var r = n[t], i = r.prefix, o = r.iconName, a = r.icon; e[i] || (e[i] = {}), e[i][o] = a; }), e; } }]), e; }()), ot = (rt = function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = t.transform, r = void 0 === n ? W : n, i = t.symbol, o = void 0 !== i && i, a = t.mask, u = void 0 === a ? null : a, s = t.title, c = void 0 === s ? null : s, l = t.classes, f = void 0 === l ? [] : l, p = t.attributes, d = void 0 === p ? {} : p, h = t.styles, v = void 0 === h ? {} : h; if (e) {
            var m = e.prefix, y = e.iconName, g = e.icon;
            return tt(C({ type: "icon" }, e), function () { return et(), A.autoA11y && (c ? d["aria-labelledby"] = A.replacementClass + "-title-" + V() : d["aria-hidden"] = "true"), re({ icons: { main: Je(g), mask: u ? Je(u.icon) : { found: !1, width: null, height: null, icon: {} } }, prefix: m, iconName: y, transform: C({}, W, r), symbol: o, title: c, extra: { attributes: d, styles: v, classes: f } }); });
        } }, function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = (e || {}).icon ? e : nt(e || {}), r = t.mask; return r && (r = (r || {}).icon ? r : nt(r || {})), rt(n, C({}, t, { mask: r })); }), at = { noAuto: function () { var e; L({ autoReplaceSvg: e = !1, observeMutations: e }), Te && Te.disconnect(); }, dom: { i2svg: function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; if (v) {
                    et();
                    var t = e.node, n = void 0 === t ? f : t, r = e.callback, i = void 0 === r ? function () { } : r;
                    A.searchPseudoElements && Ye(n), Xe(n, i);
                } }, css: Qe, insertCss: function () { H(Qe()); } }, library: it, parse: { transform: function (e) { return Me(e); } }, findIconDefinition: nt, icon: ot, text: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = t.transform, r = void 0 === n ? W : n, i = t.title, o = void 0 === i ? null : i, a = t.classes, u = void 0 === a ? [] : a, s = t.attributes, c = void 0 === s ? {} : s, l = t.styles, f = void 0 === l ? {} : l; return tt({ type: "text", content: e }, function () { return et(), ie({ content: e, transform: C({}, W, r), title: o, extra: { attributes: c, styles: f, classes: [A.familyPrefix + "-layers-text"].concat(P(u)) } }); }); }, layer: function (e) { return tt({ type: "layer" }, function () { et(); var t = []; return e(function (e) { Array.isArray(e) ? e.map(function (e) { t = t.concat(e.abstract); }) : t = t.concat(e.abstract); }), [{ tag: "span", attributes: { class: A.familyPrefix + "-layers" }, children: t }]; }); } }, ut = function () { v && A.autoReplaceSvg && at.dom.i2svg({ node: f }); };
        Object.defineProperty(at, "config", { get: function () { return A; }, set: function (e) { L(e); } }), v && function (e) { try {
            e();
        }
        catch (e) {
            if (!_)
                throw e;
        } }(function () { h && (l.FontAwesome || (l.FontAwesome = at), D(function () { Object.keys(R.styles).length > 0 && ut(), A.observeMutations && "function" == typeof MutationObserver && function (e) { if (p) {
            var t = e.treeCallback, n = e.nodeCallback, r = e.pseudoElementsCallback;
            Te = new p(function (e) { Oe || q(e).forEach(function (e) { if ("childList" === e.type && e.addedNodes.length > 0 && !ke(e.addedNodes[0]) && (A.searchPseudoElements && r(e.target), t(e.target)), "attributes" === e.type && e.target.parentNode && A.searchPseudoElements && r(e.target.parentNode), "attributes" === e.type && ke(e.target) && ~S.indexOf(e.attributeName))
                if ("class" === e.attributeName) {
                    var i = be(G(e.target)), o = i.prefix, a = i.iconName;
                    o && e.target.setAttribute("data-prefix", o), a && e.target.setAttribute("data-icon", a);
                }
                else
                    n(e.target); }); }), v && Te.observe(f.getElementsByTagName("body")[0], { childList: !0, attributes: !0, characterData: !0, subtree: !0 });
        } }({ treeCallback: Xe, nodeCallback: Ke, pseudoElementsCallback: Ye }); })), R.hooks = C({}, R.hooks, { addPack: function (e, t) { R.styles[e] = C({}, R.styles[e] || {}, t), me(), ut(); }, addShims: function (e) { var t; (t = R.shims).push.apply(t, P(e)), me(), ut(); } }); });
        at.config;
        t.a = at;
    }, function (e, t, n) {
        "use strict";
        !function e() { if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)
            try {
                __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e);
            }
            catch (e) {
                console.error(e);
            } }(), e.exports = n(172);
    }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (var n in t)
            t.hasOwnProperty(n) && (e[n] = t[n]); }, function (e, t) { function n() { this.constructor = e; } r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n); });
        Object.defineProperty(t, "__esModule", { value: !0 });
        var o = n(7);
        n(181);
        var a = function (e) { function t(t) { var n = e.call(this, t) || this; return n.state = {}, n; } return i(t, e), t.prototype.render = function () { return o.createElement("button", { className: "custom-button", type: "button", style: { backgroundColor: this.props.Color } }, o.createElement("span", null, this.props.Text)); }, t; }(o.Component);
        t.Button = a, t.default = a;
    }, function (e, t, n) {
        "use strict";
        function r(e) { return function () { return e; }; }
        var i = function () { };
        i.thatReturns = r, i.thatReturnsFalse = r(!1), i.thatReturnsTrue = r(!0), i.thatReturnsNull = r(null), i.thatReturnsThis = function () { return this; }, i.thatReturnsArgument = function (e) { return e; }, e.exports = i;
    }, function (e, t, n) {
        "use strict";
        var r = function (e) { };
        e.exports = function (e, t, n, i, o, a, u, s) { if (r(t), !e) {
            var c;
            if (void 0 === t)
                c = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
            else {
                var l = [n, i, o, a, u, s], f = 0;
                (c = new Error(t.replace(/%s/g, function () { return l[f++]; }))).name = "Invariant Violation";
            }
            throw c.framesToPop = 1, c;
        } };
    }, function (e, t, n) {
        "use strict";
        var r = n(2), i = n(10), o = n(32), a = n(57), u = n(15), s = n(34), c = n(3), l = n(36), f = n(26), p = n(8), d = n(110), h = n(38).f, v = n(9).f, m = n(79), y = n(47), g = "prototype", b = "Wrong index!", w = r.ArrayBuffer, _ = r.DataView, x = r.Math, k = r.RangeError, S = r.Infinity, E = w, O = x.abs, T = x.pow, C = x.floor, P = x.log, M = x.LN2, N = i ? "_b" : "buffer", j = i ? "_l" : "byteLength", A = i ? "_o" : "byteOffset";
        function L(e, t, n) { var r, i, o, a = new Array(n), u = 8 * n - t - 1, s = (1 << u) - 1, c = s >> 1, l = 23 === t ? T(2, -24) - T(2, -77) : 0, f = 0, p = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0; for ((e = O(e)) != e || e === S ? (i = e != e ? 1 : 0, r = s) : (r = C(P(e) / M), e * (o = T(2, -r)) < 1 && (r--, o *= 2), (e += r + c >= 1 ? l / o : l * T(2, 1 - c)) * o >= 2 && (r++, o /= 2), r + c >= s ? (i = 0, r = s) : r + c >= 1 ? (i = (e * o - 1) * T(2, t), r += c) : (i = e * T(2, c - 1) * T(2, t), r = 0)); t >= 8; a[f++] = 255 & i, i /= 256, t -= 8)
            ; for (r = r << t | i, u += t; u > 0; a[f++] = 255 & r, r /= 256, u -= 8)
            ; return a[--f] |= 128 * p, a; }
        function I(e, t, n) { var r, i = 8 * n - t - 1, o = (1 << i) - 1, a = o >> 1, u = i - 7, s = n - 1, c = e[s--], l = 127 & c; for (c >>= 7; u > 0; l = 256 * l + e[s], s--, u -= 8)
            ; for (r = l & (1 << -u) - 1, l >>= -u, u += t; u > 0; r = 256 * r + e[s], s--, u -= 8)
            ; if (0 === l)
            l = 1 - a;
        else {
            if (l === o)
                return r ? NaN : c ? -S : S;
            r += T(2, t), l -= a;
        } return (c ? -1 : 1) * r * T(2, l - t); }
        function R(e) { return e[3] << 24 | e[2] << 16 | e[1] << 8 | e[0]; }
        function z(e) { return [255 & e]; }
        function F(e) { return [255 & e, e >> 8 & 255]; }
        function D(e) { return [255 & e, e >> 8 & 255, e >> 16 & 255, e >> 24 & 255]; }
        function U(e) { return L(e, 52, 8); }
        function W(e) { return L(e, 23, 4); }
        function H(e, t, n) { v(e[g], t, { get: function () { return this[n]; } }); }
        function B(e, t, n, r) { var i = d(+n); if (i + t > e[j])
            throw k(b); var o = e[N]._b, a = i + e[A], u = o.slice(a, a + t); return r ? u : u.reverse(); }
        function V(e, t, n, r, i, o) { var a = d(+n); if (a + t > e[j])
            throw k(b); for (var u = e[N]._b, s = a + e[A], c = r(+i), l = 0; l < t; l++)
            u[s + l] = c[o ? l : t - l - 1]; }
        if (a.ABV) {
            if (!c(function () { w(1); }) || !c(function () { new w(-1); }) || c(function () { return new w, new w(1.5), new w(NaN), "ArrayBuffer" != w.name; })) {
                for (var q, G = (w = function (e) { return l(this, w), new E(d(e)); })[g] = E[g], $ = h(E), Y = 0; $.length > Y;)
                    (q = $[Y++]) in w || u(w, q, E[q]);
                o || (G.constructor = w);
            }
            var X = new _(new w(2)), K = _[g].setInt8;
            X.setInt8(0, 2147483648), X.setInt8(1, 2147483649), !X.getInt8(0) && X.getInt8(1) || s(_[g], { setInt8: function (e, t) { K.call(this, e, t << 24 >> 24); }, setUint8: function (e, t) { K.call(this, e, t << 24 >> 24); } }, !0);
        }
        else
            w = function (e) { l(this, w, "ArrayBuffer"); var t = d(e); this._b = m.call(new Array(t), 0), this[j] = t; }, _ = function (e, t, n) { l(this, _, "DataView"), l(e, w, "DataView"); var r = e[j], i = f(t); if (i < 0 || i > r)
                throw k("Wrong offset!"); if (i + (n = void 0 === n ? r - i : p(n)) > r)
                throw k("Wrong length!"); this[N] = e, this[A] = i, this[j] = n; }, i && (H(w, "byteLength", "_l"), H(_, "buffer", "_b"), H(_, "byteLength", "_l"), H(_, "byteOffset", "_o")), s(_[g], { getInt8: function (e) { return B(this, 1, e)[0] << 24 >> 24; }, getUint8: function (e) { return B(this, 1, e)[0]; }, getInt16: function (e) { var t = B(this, 2, e, arguments[1]); return (t[1] << 8 | t[0]) << 16 >> 16; }, getUint16: function (e) { var t = B(this, 2, e, arguments[1]); return t[1] << 8 | t[0]; }, getInt32: function (e) { return R(B(this, 4, e, arguments[1])); }, getUint32: function (e) { return R(B(this, 4, e, arguments[1])) >>> 0; }, getFloat32: function (e) { return I(B(this, 4, e, arguments[1]), 23, 4); }, getFloat64: function (e) { return I(B(this, 8, e, arguments[1]), 52, 8); }, setInt8: function (e, t) { V(this, 1, e, z, t); }, setUint8: function (e, t) { V(this, 1, e, z, t); }, setInt16: function (e, t) { V(this, 2, e, F, t, arguments[2]); }, setUint16: function (e, t) { V(this, 2, e, F, t, arguments[2]); }, setInt32: function (e, t) { V(this, 4, e, D, t, arguments[2]); }, setUint32: function (e, t) { V(this, 4, e, D, t, arguments[2]); }, setFloat32: function (e, t) { V(this, 4, e, W, t, arguments[2]); }, setFloat64: function (e, t) { V(this, 8, e, U, t, arguments[2]); } });
        y(w, "ArrayBuffer"), y(_, "DataView"), u(_[g], a.VIEW, !0), t.ArrayBuffer = w, t.DataView = _;
    }, function (e, t, n) {
        "use strict";
        var r = n(12);
        e.exports.f = function (e) { return new function (e) { var t, n; this.promise = new e(function (e, r) { if (void 0 !== t || void 0 !== n)
            throw TypeError("Bad Promise constructor"); t = e, n = r; }), this.resolve = r(t), this.reject = r(n); }(e); };
    }, function (e, t, n) { var r = n(2), i = n(77).set, o = r.MutationObserver || r.WebKitMutationObserver, a = r.process, u = r.Promise, s = "process" == n(21)(a); e.exports = function () { var e, t, n, c = function () { var r, i; for (s && (r = a.domain) && r.exit(); e;) {
        i = e.fn, e = e.next;
        try {
            i();
        }
        catch (r) {
            throw e ? n() : t = void 0, r;
        }
    } t = void 0, r && r.enter(); }; if (s)
        n = function () { a.nextTick(c); };
    else if (!o || r.navigator && r.navigator.standalone)
        if (u && u.resolve) {
            var l = u.resolve(void 0);
            n = function () { l.then(c); };
        }
        else
            n = function () { i.call(r, c); };
    else {
        var f = !0, p = document.createTextNode("");
        new o(c).observe(p, { characterData: !0 }), n = function () { p.data = f = !f; };
    } return function (r) { var i = { fn: r, next: void 0 }; t && (t.next = i), e || (e = i, n()), t = i; }; }; }, function (e, t, n) { var r, i, o, a = n(22), u = n(129), s = n(95), c = n(99), l = n(2), f = l.process, p = l.setImmediate, d = l.clearImmediate, h = l.MessageChannel, v = l.Dispatch, m = 0, y = {}, g = function () { var e = +this; if (y.hasOwnProperty(e)) {
        var t = y[e];
        delete y[e], t();
    } }, b = function (e) { g.call(e.data); }; p && d || (p = function (e) { for (var t = [], n = 1; arguments.length > n;)
        t.push(arguments[n++]); return y[++m] = function () { u("function" == typeof e ? e : Function(e), t); }, r(m), m; }, d = function (e) { delete y[e]; }, "process" == n(21)(f) ? r = function (e) { f.nextTick(a(g, e, 1)); } : v && v.now ? r = function (e) { v.now(a(g, e, 1)); } : h ? (o = (i = new h).port2, i.port1.onmessage = b, r = a(o.postMessage, o, 1)) : l.addEventListener && "function" == typeof postMessage && !l.importScripts ? (r = function (e) { l.postMessage(e + "", "*"); }, l.addEventListener("message", b, !1)) : r = "onreadystatechange" in c("script") ? function (e) { s.appendChild(c("script")).onreadystatechange = function () { s.removeChild(this), g.call(e); }; } : function (e) { setTimeout(a(g, e, 1), 0); }), e.exports = { set: p, clear: d }; }, function (e, t, n) {
        "use strict";
        var r = n(31), i = n(119), o = n(45), a = n(18);
        e.exports = n(87)(Array, "Array", function (e, t) { this._t = a(e), this._i = 0, this._k = t; }, function () { var e = this._t, t = this._k, n = this._i++; return !e || n >= e.length ? (this._t = void 0, i(1)) : i(0, "keys" == t ? n : "values" == t ? e[n] : [n, e[n]]); }, "values"), o.Arguments = o.Array, r("keys"), r("values"), r("entries");
    }, function (e, t, n) {
        "use strict";
        var r = n(11), i = n(40), o = n(8);
        e.exports = function (e) { for (var t = r(this), n = o(t.length), a = arguments.length, u = i(a > 1 ? arguments[1] : void 0, n), s = a > 2 ? arguments[2] : void 0, c = void 0 === s ? n : i(s, n); c > u;)
            t[u++] = e; return t; };
    }, function (e, t, n) { var r = n(316); e.exports = function (e, t) { return new (r(e))(t); }; }, function (e, t, n) { var r = n(48), i = n(6)("iterator"), o = n(45); e.exports = n(23).getIteratorMethod = function (e) { if (void 0 != e)
        return e[i] || e["@@iterator"] || o[r(e)]; }; }, function (e, t, n) {
        "use strict";
        var r = n(9), i = n(43);
        e.exports = function (e, t, n) { t in e ? r.f(e, t, i(0, n)) : e[t] = n; };
    }, function (e, t, n) { var r = n(45), i = n(6)("iterator"), o = Array.prototype; e.exports = function (e) { return void 0 !== e && (r.Array === e || o[i] === e); }; }, function (e, t, n) { var r = n(6)("match"); e.exports = function (e) { var t = /./; try {
        "/./"[e](t);
    }
    catch (n) {
        try {
            return t[r] = !1, !"/./"[e](t);
        }
        catch (e) { }
    } return !0; }; }, function (e, t, n) { var r = n(64), i = n(27); e.exports = function (e, t, n) { if (r(t))
        throw TypeError("String#" + n + " doesn't accept regex!"); return String(i(e)); }; }, function (e, t, n) {
        "use strict";
        var r = n(39), i = n(43), o = n(47), a = {};
        n(15)(a, n(6)("iterator"), function () { return this; }), e.exports = function (e, t, n) { e.prototype = r(a, { next: i(1, n) }), o(e, t + " Iterator"); };
    }, function (e, t, n) {
        "use strict";
        var r = n(32), i = n(0), o = n(14), a = n(15), u = n(45), s = n(86), c = n(47), l = n(16), f = n(6)("iterator"), p = !([].keys && "next" in [].keys()), d = function () { return this; };
        e.exports = function (e, t, n, h, v, m, y) { s(n, t, h); var g, b, w, _ = function (e) { if (!p && e in E)
            return E[e]; switch (e) {
            case "keys":
            case "values": return function () { return new n(this, e); };
        } return function () { return new n(this, e); }; }, x = t + " Iterator", k = "values" == v, S = !1, E = e.prototype, O = E[f] || E["@@iterator"] || v && E[v], T = O || _(v), C = v ? k ? _("entries") : T : void 0, P = "Array" == t && E.entries || O; if (P && (w = l(P.call(new e))) !== Object.prototype && w.next && (c(w, x, !0), r || "function" == typeof w[f] || a(w, f, d)), k && O && "values" !== O.name && (S = !0, T = function () { return O.call(this); }), r && !y || !p && !S && E[f] || a(E, f, T), u[t] = T, u[x] = d, v)
            if (g = { values: k ? T : _("values"), keys: m ? T : _("keys"), entries: C }, y)
                for (b in g)
                    b in E || o(E, b, g[b]);
            else
                i(i.P + i.F * (p || S), t, g); return g; };
    }, function (e, t, n) { var r = n(26), i = n(27); e.exports = function (e) { return function (t, n) { var o, a, u = String(i(t)), s = r(n), c = u.length; return s < 0 || s >= c ? e ? "" : void 0 : (o = u.charCodeAt(s)) < 55296 || o > 56319 || s + 1 === c || (a = u.charCodeAt(s + 1)) < 56320 || a > 57343 ? e ? u.charAt(s) : o : e ? u.slice(s, s + 2) : a - 56320 + (o - 55296 << 10) + 65536; }; }; }, function (e, t) { var n = Math.expm1; e.exports = !n || n(10) > 22025.465794806718 || n(10) < 22025.465794806718 || -2e-17 != n(-2e-17) ? function (e) { return 0 == (e = +e) ? e : e > -1e-6 && e < 1e-6 ? e + e * e / 2 : Math.exp(e) - 1; } : n; }, function (e, t) { e.exports = Math.sign || function (e) { return 0 == (e = +e) || e != e ? e : e < 0 ? -1 : 1; }; }, function (e, t, n) {
        "use strict";
        var r = n(26), i = n(27);
        e.exports = function (e) { var t = String(i(this)), n = "", o = r(e); if (o < 0 || o == 1 / 0)
            throw RangeError("Count can't be negative"); for (; o > 0; (o >>>= 1) && (t += t))
            1 & o && (n += t); return n; };
    }, function (e, t, n) { var r = n(4), i = n(94).set; e.exports = function (e, t, n) { var o, a = t.constructor; return a !== n && "function" == typeof a && (o = a.prototype) !== n.prototype && r(o) && i && i(e, o), e; }; }, function (e, t) { e.exports = "\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"; }, function (e, t, n) { var r = n(4), i = n(1), o = function (e, t) { if (i(e), !r(t) && null !== t)
        throw TypeError(t + ": can't set as prototype!"); }; e.exports = { set: Object.setPrototypeOf || ("__proto__" in {} ? function (e, t, r) { try {
            (r = n(22)(Function.call, n(17).f(Object.prototype, "__proto__").set, 2))(e, []), t = !(e instanceof Array);
        }
        catch (e) {
            t = !0;
        } return function (e, n) { return o(e, n), t ? e.__proto__ = n : r(e, n), e; }; }({}, !1) : void 0), check: o }; }, function (e, t, n) { var r = n(2).document; e.exports = r && r.documentElement; }, function (e, t) { e.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","); }, function (e, t, n) { var r = n(68)("keys"), i = n(42); e.exports = function (e) { return r[e] || (r[e] = i(e)); }; }, function (e, t, n) { var r = n(2), i = n(23), o = n(32), a = n(135), u = n(9).f; e.exports = function (e) { var t = i.Symbol || (i.Symbol = o ? {} : r.Symbol || {}); "_" == e.charAt(0) || e in t || u(t, e, { value: a.f(e) }); }; }, function (e, t, n) { var r = n(4), i = n(2).document, o = r(i) && r(i.createElement); e.exports = function (e) { return o ? i.createElement(e) : {}; }; }, function (e, t) { e.exports = { isFunction: function (e) { return "function" == typeof e; }, isArray: function (e) { return "[object Array]" === Object.prototype.toString.apply(e); }, each: function (e, t) { for (var n = 0, r = e.length; n < r && !1 !== t(e[n], n); n++)
            ; } }; }, function (e, t, n) {
        "use strict";
        e.exports = {};
    }, function (e, t, n) {
        "use strict";
        /*
        object-assign
        (c) Sindre Sorhus
        @license MIT
        */ var r = Object.getOwnPropertySymbols, i = Object.prototype.hasOwnProperty, o = Object.prototype.propertyIsEnumerable;
        e.exports = function () { try {
            if (!Object.assign)
                return !1;
            var e = new String("abc");
            if (e[5] = "de", "5" === Object.getOwnPropertyNames(e)[0])
                return !1;
            for (var t = {}, n = 0; n < 10; n++)
                t["_" + String.fromCharCode(n)] = n;
            if ("0123456789" !== Object.getOwnPropertyNames(t).map(function (e) { return t[e]; }).join(""))
                return !1;
            var r = {};
            return "abcdefghijklmnopqrst".split("").forEach(function (e) { r[e] = e; }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, r)).join("");
        }
        catch (e) {
            return !1;
        } }() ? Object.assign : function (e, t) { for (var n, a, u = function (e) { if (null === e || void 0 === e)
            throw new TypeError("Object.assign cannot be called with null or undefined"); return Object(e); }(e), s = 1; s < arguments.length; s++) {
            for (var c in n = Object(arguments[s]))
                i.call(n, c) && (u[c] = n[c]);
            if (r) {
                a = r(n);
                for (var l = 0; l < a.length; l++)
                    o.call(n, a[l]) && (u[a[l]] = n[a[l]]);
            }
        } return u; };
    }, function (e, t) { e.exports = Math.scale || function (e, t, n, r, i) { return 0 === arguments.length || e != e || t != t || n != n || r != r || i != i ? NaN : e === 1 / 0 || e === -1 / 0 ? e : (e - t) * (i - r) / (n - t) + r; }; }, function (e, t, n) { var r = n(35); e.exports = function (e, t) { var n = []; return r(e, !1, n.push, n, t), n; }; }, function (e, t, n) { var r = n(48), i = n(104); e.exports = function (e) { return function () { if (r(this) != e)
        throw TypeError(e + "#toJSON isn't generic"); return i(this); }; }; }, function (e, t, n) { var r = n(41), i = n(18), o = n(49).f; e.exports = function (e) { return function (t) { for (var n, a = i(t), u = r(a), s = u.length, c = 0, l = []; s > c;)
        o.call(a, n = u[c++]) && l.push(e ? [n, a[n]] : a[n]); return l; }; }; }, function (e, t, n) { var r = n(8), i = n(91), o = n(27); e.exports = function (e, t, n, a) { var u = String(o(e)), s = u.length, c = void 0 === n ? " " : String(n), l = r(t); if (l <= s || "" == c)
        return u; var f = l - s, p = i.call(c, Math.ceil(f / c.length)); return p.length > f && (p = p.slice(0, f)), a ? p + u : u + p; }; }, function (e, t, n) {
        "use strict";
        var r = n(65), i = n(4), o = n(8), a = n(22), u = n(6)("isConcatSpreadable");
        e.exports = function e(t, n, s, c, l, f, p, d) { for (var h, v, m = l, y = 0, g = !!p && a(p, d, 3); y < c;) {
            if (y in s) {
                if (h = g ? g(s[y], y, n) : s[y], v = !1, i(h) && (v = void 0 !== (v = h[u]) ? !!v : r(h)), v && f > 0)
                    m = e(t, n, h, o(h.length), m, f - 1) - 1;
                else {
                    if (m >= 9007199254740991)
                        throw TypeError();
                    t[m] = h;
                }
                m++;
            }
            y++;
        } return m; };
    }, function (e, t, n) { var r = n(38), i = n(66), o = n(1), a = n(2).Reflect; e.exports = a && a.ownKeys || function (e) { var t = r.f(o(e)), n = i.f; return n ? t.concat(n(e)) : t; }; }, function (e, t, n) { var r = n(26), i = n(8); e.exports = function (e) { if (void 0 === e)
        return 0; var t = r(e), n = i(t); if (t !== n)
        throw RangeError("Wrong length!"); return n; }; }, function (e, t, n) {
        "use strict";
        var r = n(34), i = n(33).getWeak, o = n(1), a = n(4), u = n(36), s = n(35), c = n(24), l = n(19), f = n(44), p = c(5), d = c(6), h = 0, v = function (e) { return e._l || (e._l = new m); }, m = function () { this.a = []; }, y = function (e, t) { return p(e.a, function (e) { return e[0] === t; }); };
        m.prototype = { get: function (e) { var t = y(this, e); if (t)
                return t[1]; }, has: function (e) { return !!y(this, e); }, set: function (e, t) { var n = y(this, e); n ? n[1] = t : this.a.push([e, t]); }, delete: function (e) { var t = d(this.a, function (t) { return t[0] === e; }); return ~t && this.a.splice(t, 1), !!~t; } }, e.exports = { getConstructor: function (e, t, n, o) { var c = e(function (e, r) { u(e, c, t, "_i"), e._t = t, e._i = h++, e._l = void 0, void 0 != r && s(r, n, e[o], e); }); return r(c.prototype, { delete: function (e) { if (!a(e))
                    return !1; var n = i(e); return !0 === n ? v(f(this, t)).delete(e) : n && l(n, this._i) && delete n[this._i]; }, has: function (e) { if (!a(e))
                    return !1; var n = i(e); return !0 === n ? v(f(this, t)).has(e) : n && l(n, this._i); } }), c; }, def: function (e, t, n) { var r = i(o(t), !0); return !0 === r ? v(e).set(t, n) : r[e._i] = n, e; }, ufstore: v };
    }, function (e, t, n) {
        "use strict";
        var r, i = n(24)(0), o = n(14), a = n(33), u = n(131), s = n(111), c = n(4), l = n(3), f = n(44), p = a.getWeak, d = Object.isExtensible, h = s.ufstore, v = {}, m = function (e) { return function () { return e(this, arguments.length > 0 ? arguments[0] : void 0); }; }, y = { get: function (e) { if (c(e)) {
                var t = p(e);
                return !0 === t ? h(f(this, "WeakMap")).get(e) : t ? t[this._i] : void 0;
            } }, set: function (e, t) { return s.def(f(this, "WeakMap"), e, t); } }, g = e.exports = n(58)("WeakMap", m, y, s, !0, !0);
        l(function () { return 7 != (new g).set((Object.freeze || Object)(v), 7).get(v); }) && (u((r = s.getConstructor(m, "WeakMap")).prototype, y), a.NEED = !0, i(["delete", "has", "get", "set"], function (e) { var t = g.prototype, n = t[e]; o(t, e, function (t, i) { if (c(t) && !d(t)) {
            this._f || (this._f = new r);
            var o = this._f[e](t, i);
            return "set" == e ? this : o;
        } return n.call(this, t, i); }); }));
    }, function (e, t, n) {
        "use strict";
        var r = n(114), i = n(44);
        e.exports = n(58)("Set", function (e) { return function () { return e(this, arguments.length > 0 ? arguments[0] : void 0); }; }, { add: function (e) { return r.def(i(this, "Set"), e = 0 === e ? 0 : e, e); } }, r);
    }, function (e, t, n) {
        "use strict";
        var r = n(9).f, i = n(39), o = n(34), a = n(22), u = n(36), s = n(35), c = n(87), l = n(119), f = n(37), p = n(10), d = n(33).fastKey, h = n(44), v = p ? "_s" : "size", m = function (e, t) { var n, r = d(t); if ("F" !== r)
            return e._i[r]; for (n = e._f; n; n = n.n)
            if (n.k == t)
                return n; };
        e.exports = { getConstructor: function (e, t, n, c) { var l = e(function (e, r) { u(e, l, t, "_i"), e._t = t, e._i = i(null), e._f = void 0, e._l = void 0, e[v] = 0, void 0 != r && s(r, n, e[c], e); }); return o(l.prototype, { clear: function () { for (var e = h(this, t), n = e._i, r = e._f; r; r = r.n)
                    r.r = !0, r.p && (r.p = r.p.n = void 0), delete n[r.i]; e._f = e._l = void 0, e[v] = 0; }, delete: function (e) { var n = h(this, t), r = m(n, e); if (r) {
                    var i = r.n, o = r.p;
                    delete n._i[r.i], r.r = !0, o && (o.n = i), i && (i.p = o), n._f == r && (n._f = i), n._l == r && (n._l = o), n[v]--;
                } return !!r; }, forEach: function (e) { h(this, t); for (var n, r = a(e, arguments.length > 1 ? arguments[1] : void 0, 3); n = n ? n.n : this._f;)
                    for (r(n.v, n.k, this); n && n.r;)
                        n = n.p; }, has: function (e) { return !!m(h(this, t), e); } }), p && r(l.prototype, "size", { get: function () { return h(this, t)[v]; } }), l; }, def: function (e, t, n) { var r, i, o = m(e, t); return o ? o.v = n : (e._l = o = { i: i = d(t, !0), k: t, v: n, p: r = e._l, n: void 0, r: !1 }, e._f || (e._f = o), r && (r.n = o), e[v]++, "F" !== i && (e._i[i] = o)), e; }, getEntry: m, setStrong: function (e, t, n) { c(e, t, function (e, n) { this._t = h(e, t), this._k = n, this._l = void 0; }, function () { for (var e = this._k, t = this._l; t && t.r;)
                t = t.p; return this._t && (this._l = t = t ? t.n : this._t._f) ? l(0, "keys" == e ? t.k : "values" == e ? t.v : [t.k, t.v]) : (this._t = void 0, l(1)); }, n ? "entries" : "values", !n, !0), f(t); } };
    }, function (e, t, n) {
        "use strict";
        var r = n(114), i = n(44);
        e.exports = n(58)("Map", function (e) { return function () { return e(this, arguments.length > 0 ? arguments[0] : void 0); }; }, { get: function (e) { var t = r.getEntry(i(this, "Map"), e); return t && t.v; }, set: function (e, t) { return r.def(i(this, "Map"), 0 === e ? 0 : e, t); } }, r, !0);
    }, function (e, t, n) { var r = n(1), i = n(4), o = n(75); e.exports = function (e, t) { if (r(e), i(t) && t.constructor === e)
        return t; var n = o.f(e); return (0, n.resolve)(t), n.promise; }; }, function (e, t) { e.exports = function (e) { try {
        return { e: !1, v: e() };
    }
    catch (e) {
        return { e: !0, v: e };
    } }; }, function (e, t, n) { n(10) && "g" != /./g.flags && n(9).f(RegExp.prototype, "flags", { configurable: !0, get: n(62) }); }, function (e, t) { e.exports = function (e, t) { return { value: t, done: !!e }; }; }, function (e, t, n) {
        "use strict";
        var r = n(11), i = n(40), o = n(8);
        e.exports = [].copyWithin || function (e, t) { var n = r(this), a = o(n.length), u = i(e, a), s = i(t, a), c = arguments.length > 2 ? arguments[2] : void 0, l = Math.min((void 0 === c ? a : i(c, a)) - s, a - u), f = 1; for (s < u && u < s + l && (f = -1, s += l - 1, u += l - 1); l-- > 0;)
            s in n ? n[u] = n[s] : delete n[u], u += f, s += f; return n; };
    }, function (e, t, n) { var r = n(12), i = n(11), o = n(50), a = n(8); e.exports = function (e, t, n, u, s) { r(t); var c = i(e), l = o(c), f = a(c.length), p = s ? f - 1 : 0, d = s ? -1 : 1; if (n < 2)
        for (;;) {
            if (p in l) {
                u = l[p], p += d;
                break;
            }
            if (p += d, s ? p < 0 : f <= p)
                throw TypeError("Reduce of empty array with no initial value");
        } for (; s ? p >= 0 : f > p; p += d)
        p in l && (u = t(u, l[p], p, c)); return u; }; }, function (e, t, n) { var r = n(1); e.exports = function (e, t, n, i) { try {
        return i ? t(r(n)[0], n[1]) : t(n);
    }
    catch (t) {
        var o = e.return;
        throw void 0 !== o && r(o.call(e)), t;
    } }; }, function (e, t, n) { var r = n(90), i = Math.pow, o = i(2, -52), a = i(2, -23), u = i(2, 127) * (2 - a), s = i(2, -126); e.exports = Math.fround || function (e) { var t, n, i = Math.abs(e), c = r(e); return i < s ? c * (i / s / a + 1 / o - 1 / o) * s * a : (n = (t = (1 + a / o) * i) - (t - i)) > u || n != n ? c * (1 / 0) : c * n; }; }, function (e, t) { e.exports = Math.log1p || function (e) { return (e = +e) > -1e-8 && e < 1e-8 ? e - e * e / 2 : Math.log(1 + e); }; }, function (e, t, n) { var r = n(4), i = Math.floor; e.exports = function (e) { return !r(e) && isFinite(e) && i(e) === e; }; }, function (e, t, n) { var r = n(21); e.exports = function (e, t) { if ("number" != typeof e && "Number" != r(e))
        throw TypeError(t); return +e; }; }, function (e, t, n) { var r = n(2).parseFloat, i = n(46).trim; e.exports = 1 / r(n(93) + "-0") != -1 / 0 ? function (e) { var t = i(String(e), 3), n = r(t); return 0 === n && "-" == t.charAt(0) ? -0 : n; } : r; }, function (e, t, n) { var r = n(2).parseInt, i = n(46).trim, o = n(93), a = /^[-+]?0[xX]/; e.exports = 8 !== r(o + "08") || 22 !== r(o + "0x16") ? function (e, t) { var n = i(String(e), 3); return r(n, t >>> 0 || (a.test(n) ? 16 : 10)); } : r; }, function (e, t) { e.exports = function (e, t, n) { var r = void 0 === n; switch (t.length) {
        case 0: return r ? e() : e.call(n);
        case 1: return r ? e(t[0]) : e.call(n, t[0]);
        case 2: return r ? e(t[0], t[1]) : e.call(n, t[0], t[1]);
        case 3: return r ? e(t[0], t[1], t[2]) : e.call(n, t[0], t[1], t[2]);
        case 4: return r ? e(t[0], t[1], t[2], t[3]) : e.call(n, t[0], t[1], t[2], t[3]);
    } return e.apply(n, t); }; }, function (e, t, n) {
        "use strict";
        var r = n(12), i = n(4), o = n(129), a = [].slice, u = {};
        e.exports = Function.bind || function (e) { var t = r(this), n = a.call(arguments, 1), s = function () { var r = n.concat(a.call(arguments)); return this instanceof s ? function (e, t, n) { if (!(t in u)) {
            for (var r = [], i = 0; i < t; i++)
                r[i] = "a[" + i + "]";
            u[t] = Function("F,a", "return new F(" + r.join(",") + ")");
        } return u[t](e, n); }(t, r.length, r) : o(t, r, e); }; return i(t.prototype) && (s.prototype = t.prototype), s; };
    }, function (e, t, n) {
        "use strict";
        var r = n(41), i = n(66), o = n(49), a = n(11), u = n(50), s = Object.assign;
        e.exports = !s || n(3)(function () { var e = {}, t = {}, n = Symbol(), r = "abcdefghijklmnopqrst"; return e[n] = 7, r.split("").forEach(function (e) { t[e] = e; }), 7 != s({}, e)[n] || Object.keys(s({}, t)).join("") != r; }) ? function (e, t) { for (var n = a(e), s = arguments.length, c = 1, l = i.f, f = o.f; s > c;)
            for (var p, d = u(arguments[c++]), h = l ? r(d).concat(l(d)) : r(d), v = h.length, m = 0; v > m;)
                f.call(d, p = h[m++]) && (n[p] = d[p]); return n; } : s;
    }, function (e, t, n) { var r = n(18), i = n(38).f, o = {}.toString, a = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : []; e.exports.f = function (e) { return a && "[object Window]" == o.call(e) ? function (e) { try {
        return i(e);
    }
    catch (e) {
        return a.slice();
    } }(e) : i(r(e)); }; }, function (e, t, n) { var r = n(9), i = n(1), o = n(41); e.exports = n(10) ? Object.defineProperties : function (e, t) { i(e); for (var n, a = o(t), u = a.length, s = 0; u > s;)
        r.f(e, n = a[s++], t[n]); return e; }; }, function (e, t, n) { var r = n(19), i = n(18), o = n(67)(!1), a = n(97)("IE_PROTO"); e.exports = function (e, t) { var n, u = i(e), s = 0, c = []; for (n in u)
        n != a && r(u, n) && c.push(n); for (; t.length > s;)
        r(u, n = t[s++]) && (~o(c, n) || c.push(n)); return c; }; }, function (e, t, n) { t.f = n(6); }, function (e, t, n) { e.exports = !n(10) && !n(3)(function () { return 7 != Object.defineProperty(n(99)("div"), "a", { get: function () { return 7; } }).a; }); }, , function (e, t, n) { }, , function (e, t, n) { }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (var n in t)
            t.hasOwnProperty(n) && (e[n] = t[n]); }, function (e, t) { function n() { this.constructor = e; } r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n); });
        Object.defineProperty(t, "__esModule", { value: !0 });
        var o = n(7);
        n(140);
        var a = n(71), u = function (e) { function t(t) { var n = e.call(this, t) || this; return n.state = {}, n; } return i(t, e), t.prototype.render = function () { return o.createElement("div", { className: this.props.Reversed ? "reversed company-detail" : "company-detail" }, o.createElement("div", { className: "company-detail__container-description" }, o.createElement("h5", { className: "company-detail__title" }, this.props.Title), o.createElement("p", { className: "company-detail__description" }, this.props.Description), o.createElement(a.default, { Text: this.props.ButtonText, Color: this.props.ButtonColor })), o.createElement("div", { className: "company-detail__images" }, o.createElement("img", { src: this.props.ImagePath }))); }, t; }(o.Component);
        t.CompanyDetails = u, t.default = u;
    }, , function (e, t, n) { }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (var n in t)
            t.hasOwnProperty(n) && (e[n] = t[n]); }, function (e, t) { function n() { this.constructor = e; } r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n); }), o = this && this.__assign || Object.assign || function (e) { for (var t, n = 1, r = arguments.length; n < r; n++)
            for (var i in t = arguments[n])
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]); return e; };
        Object.defineProperty(t, "__esModule", { value: !0 });
        var a = n(7);
        n(143);
        var u = function (e) { function t(t) { var n = e.call(this, t) || this; return n.state = { rocketIgnited: !1 }, n.igniteRocket = n.igniteRocket.bind(n), n.handleRocketClick = n.handleRocketClick.bind(n), n; } return i(t, e), t.prototype.componentDidMount = function () { this.setState(o({}, this.state, { rocketIgnited: !1 })); }, t.prototype.render = function () { return a.createElement("div", { id: "rocket" }, this.state.rocketIgnited ? a.createElement("div", { id: "ignition" }) : null, a.createElement("div", { id: "thruster", onClick: this.handleRocketClick }), a.createElement("div", { id: "thrusterConnector", onClick: this.handleRocketClick })); }, t.prototype.igniteRocket = function () { this.setState(o({}, this.state, { rocketIgnited: !0 })); }, t.prototype.handleRocketClick = function () { this.igniteRocket(); }, t; }(a.Component);
        t.Rocket = u, t.default = u;
    }, , function (e, t, n) { }, , function (e, t, n) { }, , function (e, t, n) { }, , function (e, t, n) { }, function (e, t) { function n(e) { this.options = e, !e.deferSetup && this.setup(); } n.prototype = { constructor: n, setup: function () { this.options.setup && this.options.setup(), this.initialised = !0; }, on: function () { !this.initialised && this.setup(), this.options.match && this.options.match(); }, off: function () { this.options.unmatch && this.options.unmatch(); }, destroy: function () { this.options.destroy ? this.options.destroy() : this.off(); }, equals: function (e) { return this.options === e || this.options.match === e; } }, e.exports = n; }, function (e, t, n) { var r = n(153), i = n(100).each; function o(e, t) { this.query = e, this.isUnconditional = t, this.handlers = [], this.mql = window.matchMedia(e); var n = this; this.listener = function (e) { n.mql = e.currentTarget || e, n.assess(); }, this.mql.addListener(this.listener); } o.prototype = { constuctor: o, addHandler: function (e) { var t = new r(e); this.handlers.push(t), this.matches() && t.on(); }, removeHandler: function (e) { var t = this.handlers; i(t, function (n, r) { if (n.equals(e))
            return n.destroy(), !t.splice(r, 1); }); }, matches: function () { return this.mql.matches || this.isUnconditional; }, clear: function () { i(this.handlers, function (e) { e.destroy(); }), this.mql.removeListener(this.listener), this.handlers.length = 0; }, assess: function () { var e = this.matches() ? "on" : "off"; i(this.handlers, function (t) { t[e](); }); } }, e.exports = o; }, function (e, t, n) { var r = n(154), i = n(100), o = i.each, a = i.isFunction, u = i.isArray; function s() { if (!window.matchMedia)
        throw new Error("matchMedia not present, legacy browsers require a polyfill"); this.queries = {}, this.browserIsIncapable = !window.matchMedia("only all").matches; } s.prototype = { constructor: s, register: function (e, t, n) { var i = this.queries, s = n && this.browserIsIncapable; return i[e] || (i[e] = new r(e, s)), a(t) && (t = { match: t }), u(t) || (t = [t]), o(t, function (t) { a(t) && (t = { match: t }), i[e].addHandler(t); }), this; }, unregister: function (e, t) { var n = this.queries[e]; return n && (t ? n.removeHandler(t) : (n.clear(), delete this.queries[e])), this; } }, e.exports = s; }, function (e, t, n) { var r = n(155); e.exports = new r; }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r, i = n(7), o = (r = i) && r.__esModule ? r : { default: r };
        var a = { accessibility: !0, adaptiveHeight: !1, afterChange: null, appendDots: function (e) { return o.default.createElement("ul", { style: { display: "block" } }, e); }, arrows: !0, autoplay: !1, autoplaySpeed: 3e3, beforeChange: null, centerMode: !1, centerPadding: "50px", className: "", cssEase: "ease", customPaging: function (e) { return o.default.createElement("button", null, e + 1); }, dots: !1, dotsClass: "slick-dots", draggable: !0, easing: "linear", edgeFriction: .35, fade: !1, focusOnSelect: !1, infinite: !0, initialSlide: 0, lazyLoad: null, nextArrow: null, onEdge: null, onInit: null, onLazyLoadError: null, onReInit: null, pauseOnDotsHover: !1, pauseOnFocus: !1, pauseOnHover: !0, prevArrow: null, responsive: null, rows: 1, rtl: !1, slide: "div", slidesPerRow: 1, slidesToScroll: 1, slidesToShow: 1, speed: 500, swipe: !0, swipeEvent: null, swipeToSlide: !1, touchMove: !0, touchThreshold: 5, useCSS: !0, useTransform: !0, variableWidth: !1, vertical: !1, waitForAnimate: !0 };
        t.default = a;
    }, function (e, t) { e.exports = function (e) { return e.replace(/[A-Z]/g, function (e) { return "-" + e.toLowerCase(); }).toLowerCase(); }; }, function (e, t, n) { var r = n(158), i = function (e) { var t = "", n = Object.keys(e); return n.forEach(function (i, o) { var a = e[i]; (function (e) { return /[height|width]$/.test(e); })(i = r(i)) && "number" == typeof a && (a += "px"), t += !0 === a ? i : !1 === a ? "not " + i : "(" + i + ": " + a + ")", o < n.length - 1 && (t += " and "); }), t; }; e.exports = function (e) { var t = ""; return "string" == typeof e ? e : e instanceof Array ? (e.forEach(function (n, r) { t += i(n), r < e.length - 1 && (t += ", "); }), t) : i(e); }; }, function (e, t, n) {
        "use strict";
        n.r(t), function (e) { var n = function () { if ("undefined" != typeof Map)
            return Map; function e(e, t) { var n = -1; return e.some(function (e, r) { return e[0] === t && (n = r, !0); }), n; } return function () { function t() { this.__entries__ = []; } var n = { size: { configurable: !0 } }; return n.size.get = function () { return this.__entries__.length; }, t.prototype.get = function (t) { var n = e(this.__entries__, t), r = this.__entries__[n]; return r && r[1]; }, t.prototype.set = function (t, n) { var r = e(this.__entries__, t); ~r ? this.__entries__[r][1] = n : this.__entries__.push([t, n]); }, t.prototype.delete = function (t) { var n = this.__entries__, r = e(n, t); ~r && n.splice(r, 1); }, t.prototype.has = function (t) { return !!~e(this.__entries__, t); }, t.prototype.clear = function () { this.__entries__.splice(0); }, t.prototype.forEach = function (e, t) { void 0 === t && (t = null); for (var n = 0, r = this.__entries__; n < r.length; n += 1) {
            var i = r[n];
            e.call(t, i[1], i[0]);
        } }, Object.defineProperties(t.prototype, n), t; }(); }(), r = "undefined" != typeof window && "undefined" != typeof document && window.document === document, i = void 0 !== e && e.Math === Math ? e : "undefined" != typeof self && self.Math === Math ? self : "undefined" != typeof window && window.Math === Math ? window : Function("return this")(), o = "function" == typeof requestAnimationFrame ? requestAnimationFrame.bind(i) : function (e) { return setTimeout(function () { return e(Date.now()); }, 1e3 / 60); }, a = 2, u = ["top", "right", "bottom", "left", "width", "height", "size", "weight"], s = "undefined" != typeof MutationObserver, c = function () { this.connected_ = !1, this.mutationEventsAdded_ = !1, this.mutationsObserver_ = null, this.observers_ = [], this.onTransitionEnd_ = this.onTransitionEnd_.bind(this), this.refresh = function (e, t) { var n = !1, r = !1, i = 0; function u() { n && (n = !1, e()), r && c(); } function s() { o(u); } function c() { var e = Date.now(); if (n) {
            if (e - i < a)
                return;
            r = !0;
        }
        else
            n = !0, r = !1, setTimeout(s, t); i = e; } return c; }(this.refresh.bind(this), 20); }; c.prototype.addObserver = function (e) { ~this.observers_.indexOf(e) || this.observers_.push(e), this.connected_ || this.connect_(); }, c.prototype.removeObserver = function (e) { var t = this.observers_, n = t.indexOf(e); ~n && t.splice(n, 1), !t.length && this.connected_ && this.disconnect_(); }, c.prototype.refresh = function () { this.updateObservers_() && this.refresh(); }, c.prototype.updateObservers_ = function () { var e = this.observers_.filter(function (e) { return e.gatherActive(), e.hasActive(); }); return e.forEach(function (e) { return e.broadcastActive(); }), e.length > 0; }, c.prototype.connect_ = function () { r && !this.connected_ && (document.addEventListener("transitionend", this.onTransitionEnd_), window.addEventListener("resize", this.refresh), s ? (this.mutationsObserver_ = new MutationObserver(this.refresh), this.mutationsObserver_.observe(document, { attributes: !0, childList: !0, characterData: !0, subtree: !0 })) : (document.addEventListener("DOMSubtreeModified", this.refresh), this.mutationEventsAdded_ = !0), this.connected_ = !0); }, c.prototype.disconnect_ = function () { r && this.connected_ && (document.removeEventListener("transitionend", this.onTransitionEnd_), window.removeEventListener("resize", this.refresh), this.mutationsObserver_ && this.mutationsObserver_.disconnect(), this.mutationEventsAdded_ && document.removeEventListener("DOMSubtreeModified", this.refresh), this.mutationsObserver_ = null, this.mutationEventsAdded_ = !1, this.connected_ = !1); }, c.prototype.onTransitionEnd_ = function (e) { var t = e.propertyName; void 0 === t && (t = ""), u.some(function (e) { return !!~t.indexOf(e); }) && this.refresh(); }, c.getInstance = function () { return this.instance_ || (this.instance_ = new c), this.instance_; }, c.instance_ = null; var l = function (e, t) { for (var n = 0, r = Object.keys(t); n < r.length; n += 1) {
            var i = r[n];
            Object.defineProperty(e, i, { value: t[i], enumerable: !1, writable: !1, configurable: !0 });
        } return e; }, f = function (e) { return e && e.ownerDocument && e.ownerDocument.defaultView || i; }, p = g(0, 0, 0, 0); function d(e) { return parseFloat(e) || 0; } function h(e) { for (var t = [], n = arguments.length - 1; n-- > 0;)
            t[n] = arguments[n + 1]; return t.reduce(function (t, n) { return t + d(e["border-" + n + "-width"]); }, 0); } function v(e) { var t = e.clientWidth, n = e.clientHeight; if (!t && !n)
            return p; var r = f(e).getComputedStyle(e), i = function (e) { for (var t = {}, n = 0, r = ["top", "right", "bottom", "left"]; n < r.length; n += 1) {
            var i = r[n], o = e["padding-" + i];
            t[i] = d(o);
        } return t; }(r), o = i.left + i.right, a = i.top + i.bottom, u = d(r.width), s = d(r.height); if ("border-box" === r.boxSizing && (Math.round(u + o) !== t && (u -= h(r, "left", "right") + o), Math.round(s + a) !== n && (s -= h(r, "top", "bottom") + a)), !function (e) { return e === f(e).document.documentElement; }(e)) {
            var c = Math.round(u + o) - t, l = Math.round(s + a) - n;
            1 !== Math.abs(c) && (u -= c), 1 !== Math.abs(l) && (s -= l);
        } return g(i.left, i.top, u, s); } var m = "undefined" != typeof SVGGraphicsElement ? function (e) { return e instanceof f(e).SVGGraphicsElement; } : function (e) { return e instanceof f(e).SVGElement && "function" == typeof e.getBBox; }; function y(e) { return r ? m(e) ? function (e) { var t = e.getBBox(); return g(0, 0, t.width, t.height); }(e) : v(e) : p; } function g(e, t, n, r) { return { x: e, y: t, width: n, height: r }; } var b = function (e) { this.broadcastWidth = 0, this.broadcastHeight = 0, this.contentRect_ = g(0, 0, 0, 0), this.target = e; }; b.prototype.isActive = function () { var e = y(this.target); return this.contentRect_ = e, e.width !== this.broadcastWidth || e.height !== this.broadcastHeight; }, b.prototype.broadcastRect = function () { var e = this.contentRect_; return this.broadcastWidth = e.width, this.broadcastHeight = e.height, e; }; var w = function (e, t) { var n, r, i, o, a, u, s, c = (r = (n = t).x, i = n.y, o = n.width, a = n.height, u = "undefined" != typeof DOMRectReadOnly ? DOMRectReadOnly : Object, s = Object.create(u.prototype), l(s, { x: r, y: i, width: o, height: a, top: i, right: r + o, bottom: a + i, left: r }), s); l(this, { target: e, contentRect: c }); }, _ = function (e, t, r) { if (this.activeObservations_ = [], this.observations_ = new n, "function" != typeof e)
            throw new TypeError("The callback provided as parameter 1 is not a function."); this.callback_ = e, this.controller_ = t, this.callbackCtx_ = r; }; _.prototype.observe = function (e) { if (!arguments.length)
            throw new TypeError("1 argument required, but only 0 present."); if ("undefined" != typeof Element && Element instanceof Object) {
            if (!(e instanceof f(e).Element))
                throw new TypeError('parameter 1 is not of type "Element".');
            var t = this.observations_;
            t.has(e) || (t.set(e, new b(e)), this.controller_.addObserver(this), this.controller_.refresh());
        } }, _.prototype.unobserve = function (e) { if (!arguments.length)
            throw new TypeError("1 argument required, but only 0 present."); if ("undefined" != typeof Element && Element instanceof Object) {
            if (!(e instanceof f(e).Element))
                throw new TypeError('parameter 1 is not of type "Element".');
            var t = this.observations_;
            t.has(e) && (t.delete(e), t.size || this.controller_.removeObserver(this));
        } }, _.prototype.disconnect = function () { this.clearActive(), this.observations_.clear(), this.controller_.removeObserver(this); }, _.prototype.gatherActive = function () { var e = this; this.clearActive(), this.observations_.forEach(function (t) { t.isActive() && e.activeObservations_.push(t); }); }, _.prototype.broadcastActive = function () { if (this.hasActive()) {
            var e = this.callbackCtx_, t = this.activeObservations_.map(function (e) { return new w(e.target, e.broadcastRect()); });
            this.callback_.call(e, t, e), this.clearActive();
        } }, _.prototype.clearActive = function () { this.activeObservations_.splice(0); }, _.prototype.hasActive = function () { return this.activeObservations_.length > 0; }; var x = "undefined" != typeof WeakMap ? new WeakMap : new n, k = function (e) { if (!(this instanceof k))
            throw new TypeError("Cannot call a class as a function."); if (!arguments.length)
            throw new TypeError("1 argument required, but only 0 present."); var t = c.getInstance(), n = new _(e, t, this); x.set(this, n); }; ["observe", "unobserve", "disconnect"].forEach(function (e) { k.prototype[e] = function () { return (t = x.get(this))[e].apply(t, arguments); var t; }; }); var S = void 0 !== i.ResizeObserver ? i.ResizeObserver : k; t.default = S; }.call(this, n(51));
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0, t.NextArrow = t.PrevArrow = void 0;
        var r = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var r in n)
                Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        } return e; }, i = u(n(7)), o = u(n(53)), a = n(52);
        function u(e) { return e && e.__esModule ? e : { default: e }; }
        function s(e, t) { if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function"); }
        function c(e, t) { if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || "object" != typeof t && "function" != typeof t ? e : t; }
        function l(e, t) { if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t); }
        t.PrevArrow = function (e) { function t() { return s(this, t), c(this, e.apply(this, arguments)); } return l(t, e), t.prototype.clickHandler = function (e, t) { t && t.preventDefault(), this.props.clickHandler(e, t); }, t.prototype.render = function () { var e = { "slick-arrow": !0, "slick-prev": !0 }, t = this.clickHandler.bind(this, { message: "previous" }); !this.props.infinite && (0 === this.props.currentSlide || this.props.slideCount <= this.props.slidesToShow) && (e["slick-disabled"] = !0, t = null); var n = { key: "0", "data-role": "none", className: (0, o.default)(e), style: { display: "block" }, onClick: t }, a = { currentSlide: this.props.currentSlide, slideCount: this.props.slideCount }; return this.props.prevArrow ? i.default.cloneElement(this.props.prevArrow, r({}, n, a)) : i.default.createElement("button", r({ key: "0", type: "button" }, n), " ", "Previous"); }, t; }(i.default.PureComponent), t.NextArrow = function (e) { function t() { return s(this, t), c(this, e.apply(this, arguments)); } return l(t, e), t.prototype.clickHandler = function (e, t) { t && t.preventDefault(), this.props.clickHandler(e, t); }, t.prototype.render = function () { var e = { "slick-arrow": !0, "slick-next": !0 }, t = this.clickHandler.bind(this, { message: "next" }); (0, a.canGoNext)(this.props) || (e["slick-disabled"] = !0, t = null); var n = { key: "1", "data-role": "none", className: (0, o.default)(e), style: { display: "block" }, onClick: t }, u = { currentSlide: this.props.currentSlide, slideCount: this.props.slideCount }; return this.props.nextArrow ? i.default.cloneElement(this.props.nextArrow, r({}, n, u)) : i.default.createElement("button", r({ key: "1", type: "button" }, n), " ", "Next"); }, t; }(i.default.PureComponent);
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0, t.Dots = void 0;
        var r = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var r in n)
                Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        } return e; }, i = a(n(7)), o = a(n(53));
        function a(e) { return e && e.__esModule ? e : { default: e }; }
        t.Dots = function (e) { function t() { return function (e, t) { if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function"); }(this, t), function (e, t) { if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || "object" != typeof t && "function" != typeof t ? e : t; }(this, e.apply(this, arguments)); } return function (e, t) { if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t); }(t, e), t.prototype.clickHandler = function (e, t) { t.preventDefault(), this.props.clickHandler(e); }, t.prototype.render = function () { var e, t = this, n = (e = { slideCount: this.props.slideCount, slidesToScroll: this.props.slidesToScroll, slidesToShow: this.props.slidesToShow, infinite: this.props.infinite }).infinite ? Math.ceil(e.slideCount / e.slidesToScroll) : Math.ceil((e.slideCount - e.slidesToShow) / e.slidesToScroll) + 1, a = this.props, u = { onMouseEnter: a.onMouseEnter, onMouseOver: a.onMouseOver, onMouseLeave: a.onMouseLeave }, s = Array.apply(null, Array(n + 1).join("0").split("")).map(function (e, n) { var r = n * t.props.slidesToScroll, a = n * t.props.slidesToScroll + (t.props.slidesToScroll - 1), u = (0, o.default)({ "slick-active": t.props.currentSlide >= r && t.props.currentSlide <= a }), s = { message: "dots", index: n, slidesToScroll: t.props.slidesToScroll, currentSlide: t.props.currentSlide }, c = t.clickHandler.bind(t, s); return i.default.createElement("li", { key: n, className: u }, i.default.cloneElement(t.props.customPaging(n), { onClick: c })); }); return i.default.cloneElement(this.props.appendDots(s), r({ className: this.props.dotsClass }, u)); }, t; }(i.default.PureComponent);
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0, t.Track = void 0;
        var r = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var r in n)
                Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        } return e; }, i = u(n(7)), o = u(n(53)), a = n(52);
        function u(e) { return e && e.__esModule ? e : { default: e }; }
        var s = function (e) { var t, n, r, i, o; return r = (o = e.rtl ? e.slideCount - 1 - e.index : e.index) < 0 || o >= e.slideCount, e.centerMode ? (i = Math.floor(e.slidesToShow / 2), n = (o - e.currentSlide) % e.slideCount == 0, o > e.currentSlide - i - 1 && o <= e.currentSlide + i && (t = !0)) : t = e.currentSlide <= o && o < e.currentSlide + e.slidesToShow, { "slick-slide": !0, "slick-active": t, "slick-center": n, "slick-cloned": r, "slick-current": o === e.currentSlide }; }, c = function (e, t) { return e.key || t; }, l = function (e) { var t, n = [], u = [], l = [], f = i.default.Children.count(e.children), p = (0, a.lazyStartIndex)(e), d = (0, a.lazyEndIndex)(e); return i.default.Children.forEach(e.children, function (h, v) { var m = void 0, y = { message: "children", index: v, slidesToScroll: e.slidesToScroll, currentSlide: e.currentSlide }; m = !e.lazyLoad || e.lazyLoad && e.lazyLoadedList.indexOf(v) >= 0 ? h : i.default.createElement("div", null); var g = function (e) { var t = {}; return void 0 !== e.variableWidth && !1 !== e.variableWidth || (t.width = e.slideWidth), e.fade && (t.position = "relative", e.vertical ? t.top = -e.index * parseInt(e.slideHeight) : t.left = -e.index * parseInt(e.slideWidth), t.opacity = e.currentSlide === e.index ? 1 : 0, t.transition = "opacity " + e.speed + "ms " + e.cssEase + ", visibility " + e.speed + "ms " + e.cssEase, t.WebkitTransition = "opacity " + e.speed + "ms " + e.cssEase + ", visibility " + e.speed + "ms " + e.cssEase), t; }(r({}, e, { index: v })), b = m.props.className || "", w = s(r({}, e, { index: v })); if (n.push(i.default.cloneElement(m, { key: "original" + c(m, v), "data-index": v, className: (0, o.default)(w, b), tabIndex: "-1", "aria-hidden": !w["slick-active"], style: r({ outline: "none" }, m.props.style || {}, g), onClick: function (t) { m.props && m.props.onClick && m.props.onClick(t), e.focusOnSelect && e.focusOnSelect(y); } })), e.infinite && !1 === e.fade) {
            var _ = f - v;
            _ <= (0, a.getPreClones)(e) && f !== e.slidesToShow && ((t = -_) >= p && (m = h), w = s(r({}, e, { index: t })), u.push(i.default.cloneElement(m, { key: "precloned" + c(m, t), "data-index": t, tabIndex: "-1", className: (0, o.default)(w, b), "aria-hidden": !w["slick-active"], style: r({}, m.props.style || {}, g), onClick: function (t) { m.props && m.props.onClick && m.props.onClick(t), e.focusOnSelect && e.focusOnSelect(y); } }))), f !== e.slidesToShow && ((t = f + v) < d && (m = h), w = s(r({}, e, { index: t })), l.push(i.default.cloneElement(m, { key: "postcloned" + c(m, t), "data-index": t, tabIndex: "-1", className: (0, o.default)(w, b), "aria-hidden": !w["slick-active"], style: r({}, m.props.style || {}, g), onClick: function (t) { m.props && m.props.onClick && m.props.onClick(t), e.focusOnSelect && e.focusOnSelect(y); } })));
        } }), e.rtl ? u.concat(n, l).reverse() : u.concat(n, l); };
        t.Track = function (e) { function t() { return function (e, t) { if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function"); }(this, t), function (e, t) { if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || "object" != typeof t && "function" != typeof t ? e : t; }(this, e.apply(this, arguments)); } return function (e, t) { if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t); }(t, e), t.prototype.render = function () { var e = l(this.props), t = this.props, n = { onMouseEnter: t.onMouseEnter, onMouseOver: t.onMouseOver, onMouseLeave: t.onMouseLeave }; return i.default.createElement("div", r({ className: "slick-track", style: this.props.trackStyle }, n), e); }, t; }(i.default.PureComponent);
    }, function (e, t, n) { (function (t) { var n = "Expected a function", r = NaN, i = "[object Symbol]", o = /^\s+|\s+$/g, a = /^[-+]0x[0-9a-f]+$/i, u = /^0b[01]+$/i, s = /^0o[0-7]+$/i, c = parseInt, l = "object" == typeof t && t && t.Object === Object && t, f = "object" == typeof self && self && self.Object === Object && self, p = l || f || Function("return this")(), d = Object.prototype.toString, h = Math.max, v = Math.min, m = function () { return p.Date.now(); }; function y(e) { var t = typeof e; return !!e && ("object" == t || "function" == t); } function g(e) { if ("number" == typeof e)
        return e; if (function (e) { return "symbol" == typeof e || function (e) { return !!e && "object" == typeof e; }(e) && d.call(e) == i; }(e))
        return r; if (y(e)) {
        var t = "function" == typeof e.valueOf ? e.valueOf() : e;
        e = y(t) ? t + "" : t;
    } if ("string" != typeof e)
        return 0 === e ? e : +e; e = e.replace(o, ""); var n = u.test(e); return n || s.test(e) ? c(e.slice(2), n ? 2 : 8) : a.test(e) ? r : +e; } e.exports = function (e, t, r) { var i, o, a, u, s, c, l = 0, f = !1, p = !1, d = !0; if ("function" != typeof e)
        throw new TypeError(n); function b(t) { var n = i, r = o; return i = o = void 0, l = t, u = e.apply(r, n); } function w(e) { var n = e - c; return void 0 === c || n >= t || n < 0 || p && e - l >= a; } function _() { var e = m(); if (w(e))
        return x(e); s = setTimeout(_, function (e) { var n = t - (e - c); return p ? v(n, a - (e - l)) : n; }(e)); } function x(e) { return s = void 0, d && i ? b(e) : (i = o = void 0, u); } function k() { var e = m(), n = w(e); if (i = arguments, o = this, c = e, n) {
        if (void 0 === s)
            return function (e) { return l = e, s = setTimeout(_, t), f ? b(e) : u; }(c);
        if (p)
            return s = setTimeout(_, t), b(c);
    } return void 0 === s && (s = setTimeout(_, t)), u; } return t = g(t) || 0, y(r) && (f = !!r.leading, a = (p = "maxWait" in r) ? h(g(r.maxWait) || 0, t) : a, d = "trailing" in r ? !!r.trailing : d), k.cancel = function () { void 0 !== s && clearTimeout(s), l = 0, i = c = o = s = void 0; }, k.flush = function () { return void 0 === s ? u : x(m()); }, k; }; }).call(this, n(51)); }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        t.default = { animating: !1, autoplaying: null, currentDirection: 0, currentLeft: null, currentSlide: 0, direction: 1, dragging: !1, edgeDragged: !1, initialized: !1, lazyLoadedList: [], listHeight: null, listWidth: null, scrolling: !1, slideCount: null, slideHeight: null, slideWidth: null, swipeLeft: null, swiped: !1, swiping: !1, touchObject: { startX: 0, startY: 0, curX: 0, curY: 0 }, trackStyle: {}, trackWidth: 0 };
    }, function (e, t, n) {
        "use strict";
        e.exports = function (e) { var t = (e ? e.ownerDocument || e : document).defaultView || window; return !(!e || !("function" == typeof t.Node ? e instanceof t.Node : "object" == typeof e && "number" == typeof e.nodeType && "string" == typeof e.nodeName)); };
    }, function (e, t, n) {
        "use strict";
        var r = n(166);
        e.exports = function (e) { return r(e) && 3 == e.nodeType; };
    }, function (e, t, n) {
        "use strict";
        var r = n(167);
        e.exports = function e(t, n) { return !(!t || !n) && (t === n || !r(t) && (r(n) ? e(t, n.parentNode) : "contains" in t ? t.contains(n) : !!t.compareDocumentPosition && !!(16 & t.compareDocumentPosition(n)))); };
    }, function (e, t, n) {
        "use strict";
        var r = Object.prototype.hasOwnProperty;
        function i(e, t) { return e === t ? 0 !== e || 0 !== t || 1 / e == 1 / t : e != e && t != t; }
        e.exports = function (e, t) { if (i(e, t))
            return !0; if ("object" != typeof e || null === e || "object" != typeof t || null === t)
            return !1; var n = Object.keys(e), o = Object.keys(t); if (n.length !== o.length)
            return !1; for (var a = 0; a < n.length; a++)
            if (!r.call(t, n[a]) || !i(e[n[a]], t[n[a]]))
                return !1; return !0; };
    }, function (e, t, n) {
        "use strict";
        e.exports = function (e) { if (void 0 === (e = e || ("undefined" != typeof document ? document : void 0)))
            return null; try {
            return e.activeElement || e.body;
        }
        catch (t) {
            return e.body;
        } };
    }, function (e, t, n) {
        "use strict";
        var r = !("undefined" == typeof window || !window.document || !window.document.createElement), i = { canUseDOM: r, canUseWorkers: "undefined" != typeof Worker, canUseEventListeners: r && !(!window.addEventListener && !window.attachEvent), canUseViewport: r && !!window.screen, isInWorker: !r };
        e.exports = i;
    }, function (e, t, n) {
        "use strict";
        /** @license React v16.4.0
         * react-dom.production.min.js
         *
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ var r = n(73), i = n(7), o = n(171), a = n(102), u = n(72), s = n(170), c = n(169), l = n(168), f = n(101);
        function p(e) { for (var t = arguments.length - 1, n = "https://reactjs.org/docs/error-decoder.html?invariant=" + e, i = 0; i < t; i++)
            n += "&args[]=" + encodeURIComponent(arguments[i + 1]); r(!1, "Minified React error #" + e + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", n); }
        i || p("227");
        var d = { _caughtError: null, _hasCaughtError: !1, _rethrowError: null, _hasRethrowError: !1, invokeGuardedCallback: function (e, t, n, r, i, o, a, u, s) { (function (e, t, n, r, i, o, a, u, s) { this._hasCaughtError = !1, this._caughtError = null; var c = Array.prototype.slice.call(arguments, 3); try {
                t.apply(n, c);
            }
            catch (e) {
                this._caughtError = e, this._hasCaughtError = !0;
            } }).apply(d, arguments); }, invokeGuardedCallbackAndCatchFirstError: function (e, t, n, r, i, o, a, u, s) { if (d.invokeGuardedCallback.apply(this, arguments), d.hasCaughtError()) {
                var c = d.clearCaughtError();
                d._hasRethrowError || (d._hasRethrowError = !0, d._rethrowError = c);
            } }, rethrowCaughtError: function () { return function () { if (d._hasRethrowError) {
                var e = d._rethrowError;
                throw d._rethrowError = null, d._hasRethrowError = !1, e;
            } }.apply(d, arguments); }, hasCaughtError: function () { return d._hasCaughtError; }, clearCaughtError: function () { if (d._hasCaughtError) {
                var e = d._caughtError;
                return d._caughtError = null, d._hasCaughtError = !1, e;
            } p("198"); } };
        var h = null, v = {};
        function m() { if (h)
            for (var e in v) {
                var t = v[e], n = h.indexOf(e);
                if (-1 < n || p("96", e), !g[n])
                    for (var r in t.extractEvents || p("97", e), g[n] = t, n = t.eventTypes) {
                        var i = void 0, o = n[r], a = t, u = r;
                        b.hasOwnProperty(u) && p("99", u), b[u] = o;
                        var s = o.phasedRegistrationNames;
                        if (s) {
                            for (i in s)
                                s.hasOwnProperty(i) && y(s[i], a, u);
                            i = !0;
                        }
                        else
                            o.registrationName ? (y(o.registrationName, a, u), i = !0) : i = !1;
                        i || p("98", r, e);
                    }
            } }
        function y(e, t, n) { w[e] && p("100", e), w[e] = t, _[e] = t.eventTypes[n].dependencies; }
        var g = [], b = {}, w = {}, _ = {};
        function x(e) { h && p("101"), h = Array.prototype.slice.call(e), m(); }
        function k(e) { var t, n = !1; for (t in e)
            if (e.hasOwnProperty(t)) {
                var r = e[t];
                v.hasOwnProperty(t) && v[t] === r || (v[t] && p("102", t), v[t] = r, n = !0);
            } n && m(); }
        var S = { plugins: g, eventNameDispatchConfigs: b, registrationNameModules: w, registrationNameDependencies: _, possibleRegistrationNames: null, injectEventPluginOrder: x, injectEventPluginsByName: k }, E = null, O = null, T = null;
        function C(e, t, n, r) { t = e.type || "unknown-event", e.currentTarget = T(r), d.invokeGuardedCallbackAndCatchFirstError(t, n, void 0, e), e.currentTarget = null; }
        function P(e, t) { return null == t && p("30"), null == e ? t : Array.isArray(e) ? Array.isArray(t) ? (e.push.apply(e, t), e) : (e.push(t), e) : Array.isArray(t) ? [e].concat(t) : [e, t]; }
        function M(e, t, n) { Array.isArray(e) ? e.forEach(t, n) : e && t.call(n, e); }
        var N = null;
        function j(e, t) { if (e) {
            var n = e._dispatchListeners, r = e._dispatchInstances;
            if (Array.isArray(n))
                for (var i = 0; i < n.length && !e.isPropagationStopped(); i++)
                    C(e, t, n[i], r[i]);
            else
                n && C(e, t, n, r);
            e._dispatchListeners = null, e._dispatchInstances = null, e.isPersistent() || e.constructor.release(e);
        } }
        function A(e) { return j(e, !0); }
        function L(e) { return j(e, !1); }
        var I = { injectEventPluginOrder: x, injectEventPluginsByName: k };
        function R(e, t) { var n = e.stateNode; if (!n)
            return null; var r = E(n); if (!r)
            return null; n = r[t]; e: switch (t) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
                (r = !r.disabled) || (r = !("button" === (e = e.type) || "input" === e || "select" === e || "textarea" === e)), e = !r;
                break e;
            default: e = !1;
        } return e ? null : (n && "function" != typeof n && p("231", t, typeof n), n); }
        function z(e, t) { null !== e && (N = P(N, e)), e = N, N = null, e && (M(e, t ? A : L), N && p("95"), d.rethrowCaughtError()); }
        function F(e, t, n, r) { for (var i = null, o = 0; o < g.length; o++) {
            var a = g[o];
            a && (a = a.extractEvents(e, t, n, r)) && (i = P(i, a));
        } z(i, !1); }
        var D = { injection: I, getListener: R, runEventsInBatch: z, runExtractedEventsInBatch: F }, U = Math.random().toString(36).slice(2), W = "__reactInternalInstance$" + U, H = "__reactEventHandlers$" + U;
        function B(e) { if (e[W])
            return e[W]; for (; !e[W];) {
            if (!e.parentNode)
                return null;
            e = e.parentNode;
        } return 5 === (e = e[W]).tag || 6 === e.tag ? e : null; }
        function V(e) { if (5 === e.tag || 6 === e.tag)
            return e.stateNode; p("33"); }
        function q(e) { return e[H] || null; }
        var G = { precacheFiberNode: function (e, t) { t[W] = e; }, getClosestInstanceFromNode: B, getInstanceFromNode: function (e) { return !(e = e[W]) || 5 !== e.tag && 6 !== e.tag ? null : e; }, getNodeFromInstance: V, getFiberCurrentPropsFromNode: q, updateFiberProps: function (e, t) { e[H] = t; } };
        function $(e) { do {
            e = e.return;
        } while (e && 5 !== e.tag); return e || null; }
        function Y(e, t, n) { for (var r = []; e;)
            r.push(e), e = $(e); for (e = r.length; 0 < e--;)
            t(r[e], "captured", n); for (e = 0; e < r.length; e++)
            t(r[e], "bubbled", n); }
        function X(e, t, n) { (t = R(e, n.dispatchConfig.phasedRegistrationNames[t])) && (n._dispatchListeners = P(n._dispatchListeners, t), n._dispatchInstances = P(n._dispatchInstances, e)); }
        function K(e) { e && e.dispatchConfig.phasedRegistrationNames && Y(e._targetInst, X, e); }
        function Q(e) { if (e && e.dispatchConfig.phasedRegistrationNames) {
            var t = e._targetInst;
            Y(t = t ? $(t) : null, X, e);
        } }
        function J(e, t, n) { e && n && n.dispatchConfig.registrationName && (t = R(e, n.dispatchConfig.registrationName)) && (n._dispatchListeners = P(n._dispatchListeners, t), n._dispatchInstances = P(n._dispatchInstances, e)); }
        function Z(e) { e && e.dispatchConfig.registrationName && J(e._targetInst, null, e); }
        function ee(e) { M(e, K); }
        function te(e, t, n, r) { if (n && r)
            e: {
                for (var i = n, o = r, a = 0, u = i; u; u = $(u))
                    a++;
                u = 0;
                for (var s = o; s; s = $(s))
                    u++;
                for (; 0 < a - u;)
                    i = $(i), a--;
                for (; 0 < u - a;)
                    o = $(o), u--;
                for (; a--;) {
                    if (i === o || i === o.alternate)
                        break e;
                    i = $(i), o = $(o);
                }
                i = null;
            }
        else
            i = null; for (o = i, i = []; n && n !== o && (null === (a = n.alternate) || a !== o);)
            i.push(n), n = $(n); for (n = []; r && r !== o && (null === (a = r.alternate) || a !== o);)
            n.push(r), r = $(r); for (r = 0; r < i.length; r++)
            J(i[r], "bubbled", e); for (e = n.length; 0 < e--;)
            J(n[e], "captured", t); }
        var ne = { accumulateTwoPhaseDispatches: ee, accumulateTwoPhaseDispatchesSkipTarget: function (e) { M(e, Q); }, accumulateEnterLeaveDispatches: te, accumulateDirectDispatches: function (e) { M(e, Z); } };
        function re(e, t) { var n = {}; return n[e.toLowerCase()] = t.toLowerCase(), n["Webkit" + e] = "webkit" + t, n["Moz" + e] = "moz" + t, n["ms" + e] = "MS" + t, n["O" + e] = "o" + t.toLowerCase(), n; }
        var ie = { animationend: re("Animation", "AnimationEnd"), animationiteration: re("Animation", "AnimationIteration"), animationstart: re("Animation", "AnimationStart"), transitionend: re("Transition", "TransitionEnd") }, oe = {}, ae = {};
        function ue(e) { if (oe[e])
            return oe[e]; if (!ie[e])
            return e; var t, n = ie[e]; for (t in n)
            if (n.hasOwnProperty(t) && t in ae)
                return oe[e] = n[t]; return e; }
        o.canUseDOM && (ae = document.createElement("div").style, "AnimationEvent" in window || (delete ie.animationend.animation, delete ie.animationiteration.animation, delete ie.animationstart.animation), "TransitionEvent" in window || delete ie.transitionend.transition);
        var se = ue("animationend"), ce = ue("animationiteration"), le = ue("animationstart"), fe = ue("transitionend"), pe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), de = null;
        function he() { return !de && o.canUseDOM && (de = "textContent" in document.documentElement ? "textContent" : "innerText"), de; }
        var ve = { _root: null, _startText: null, _fallbackText: null };
        function me() { if (ve._fallbackText)
            return ve._fallbackText; var e, t, n = ve._startText, r = n.length, i = ye(), o = i.length; for (e = 0; e < r && n[e] === i[e]; e++)
            ; var a = r - e; for (t = 1; t <= a && n[r - t] === i[o - t]; t++)
            ; return ve._fallbackText = i.slice(e, 1 < t ? 1 - t : void 0), ve._fallbackText; }
        function ye() { return "value" in ve._root ? ve._root.value : ve._root[he()]; }
        var ge = "dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "), be = { type: null, target: null, currentTarget: u.thatReturnsNull, eventPhase: null, bubbles: null, cancelable: null, timeStamp: function (e) { return e.timeStamp || Date.now(); }, defaultPrevented: null, isTrusted: null };
        function we(e, t, n, r) { for (var i in this.dispatchConfig = e, this._targetInst = t, this.nativeEvent = n, e = this.constructor.Interface)
            e.hasOwnProperty(i) && ((t = e[i]) ? this[i] = t(n) : "target" === i ? this.target = r : this[i] = n[i]); return this.isDefaultPrevented = (null != n.defaultPrevented ? n.defaultPrevented : !1 === n.returnValue) ? u.thatReturnsTrue : u.thatReturnsFalse, this.isPropagationStopped = u.thatReturnsFalse, this; }
        function _e(e, t, n, r) { if (this.eventPool.length) {
            var i = this.eventPool.pop();
            return this.call(i, e, t, n, r), i;
        } return new this(e, t, n, r); }
        function xe(e) { e instanceof this || p("223"), e.destructor(), 10 > this.eventPool.length && this.eventPool.push(e); }
        function ke(e) { e.eventPool = [], e.getPooled = _e, e.release = xe; }
        a(we.prototype, { preventDefault: function () { this.defaultPrevented = !0; var e = this.nativeEvent; e && (e.preventDefault ? e.preventDefault() : "unknown" != typeof e.returnValue && (e.returnValue = !1), this.isDefaultPrevented = u.thatReturnsTrue); }, stopPropagation: function () { var e = this.nativeEvent; e && (e.stopPropagation ? e.stopPropagation() : "unknown" != typeof e.cancelBubble && (e.cancelBubble = !0), this.isPropagationStopped = u.thatReturnsTrue); }, persist: function () { this.isPersistent = u.thatReturnsTrue; }, isPersistent: u.thatReturnsFalse, destructor: function () { var e, t = this.constructor.Interface; for (e in t)
                this[e] = null; for (t = 0; t < ge.length; t++)
                this[ge[t]] = null; } }), we.Interface = be, we.extend = function (e) { function t() { } function n() { return r.apply(this, arguments); } var r = this; t.prototype = r.prototype; var i = new t; return a(i, n.prototype), n.prototype = i, n.prototype.constructor = n, n.Interface = a({}, r.Interface, e), n.extend = r.extend, ke(n), n; }, ke(we);
        var Se = we.extend({ data: null }), Ee = we.extend({ data: null }), Oe = [9, 13, 27, 32], Te = o.canUseDOM && "CompositionEvent" in window, Ce = null;
        o.canUseDOM && "documentMode" in document && (Ce = document.documentMode);
        var Pe = o.canUseDOM && "TextEvent" in window && !Ce, Me = o.canUseDOM && (!Te || Ce && 8 < Ce && 11 >= Ce), Ne = String.fromCharCode(32), je = { beforeInput: { phasedRegistrationNames: { bubbled: "onBeforeInput", captured: "onBeforeInputCapture" }, dependencies: ["compositionend", "keypress", "textInput", "paste"] }, compositionEnd: { phasedRegistrationNames: { bubbled: "onCompositionEnd", captured: "onCompositionEndCapture" }, dependencies: "blur compositionend keydown keypress keyup mousedown".split(" ") }, compositionStart: { phasedRegistrationNames: { bubbled: "onCompositionStart", captured: "onCompositionStartCapture" }, dependencies: "blur compositionstart keydown keypress keyup mousedown".split(" ") }, compositionUpdate: { phasedRegistrationNames: { bubbled: "onCompositionUpdate", captured: "onCompositionUpdateCapture" }, dependencies: "blur compositionupdate keydown keypress keyup mousedown".split(" ") } }, Ae = !1;
        function Le(e, t) { switch (e) {
            case "keyup": return -1 !== Oe.indexOf(t.keyCode);
            case "keydown": return 229 !== t.keyCode;
            case "keypress":
            case "mousedown":
            case "blur": return !0;
            default: return !1;
        } }
        function Ie(e) { return "object" == typeof (e = e.detail) && "data" in e ? e.data : null; }
        var Re = !1;
        var ze = { eventTypes: je, extractEvents: function (e, t, n, r) { var i = void 0, o = void 0; if (Te)
                e: {
                    switch (e) {
                        case "compositionstart":
                            i = je.compositionStart;
                            break e;
                        case "compositionend":
                            i = je.compositionEnd;
                            break e;
                        case "compositionupdate":
                            i = je.compositionUpdate;
                            break e;
                    }
                    i = void 0;
                }
            else
                Re ? Le(e, n) && (i = je.compositionEnd) : "keydown" === e && 229 === n.keyCode && (i = je.compositionStart); return i ? (Me && (Re || i !== je.compositionStart ? i === je.compositionEnd && Re && (o = me()) : (ve._root = r, ve._startText = ye(), Re = !0)), i = Se.getPooled(i, t, n, r), o ? i.data = o : null !== (o = Ie(n)) && (i.data = o), ee(i), o = i) : o = null, (e = Pe ? function (e, t) { switch (e) {
                case "compositionend": return Ie(t);
                case "keypress": return 32 !== t.which ? null : (Ae = !0, Ne);
                case "textInput": return (e = t.data) === Ne && Ae ? null : e;
                default: return null;
            } }(e, n) : function (e, t) { if (Re)
                return "compositionend" === e || !Te && Le(e, t) ? (e = me(), ve._root = null, ve._startText = null, ve._fallbackText = null, Re = !1, e) : null; switch (e) {
                case "paste": return null;
                case "keypress":
                    if (!(t.ctrlKey || t.altKey || t.metaKey) || t.ctrlKey && t.altKey) {
                        if (t.char && 1 < t.char.length)
                            return t.char;
                        if (t.which)
                            return String.fromCharCode(t.which);
                    }
                    return null;
                case "compositionend": return Me ? null : t.data;
                default: return null;
            } }(e, n)) ? ((t = Ee.getPooled(je.beforeInput, t, n, r)).data = e, ee(t)) : t = null, null === o ? t : null === t ? o : [o, t]; } }, Fe = null, De = { injectFiberControlledHostComponent: function (e) { Fe = e; } }, Ue = null, We = null;
        function He(e) { if (e = O(e)) {
            Fe && "function" == typeof Fe.restoreControlledState || p("194");
            var t = E(e.stateNode);
            Fe.restoreControlledState(e.stateNode, e.type, t);
        } }
        function Be(e) { Ue ? We ? We.push(e) : We = [e] : Ue = e; }
        function Ve() { return null !== Ue || null !== We; }
        function qe() { if (Ue) {
            var e = Ue, t = We;
            if (We = Ue = null, He(e), t)
                for (e = 0; e < t.length; e++)
                    He(t[e]);
        } }
        var Ge = { injection: De, enqueueStateRestore: Be, needsStateRestore: Ve, restoreStateIfNeeded: qe };
        function $e(e, t) { return e(t); }
        function Ye(e, t, n) { return e(t, n); }
        function Xe() { }
        var Ke = !1;
        function Qe(e, t) { if (Ke)
            return e(t); Ke = !0; try {
            return $e(e, t);
        }
        finally {
            Ke = !1, Ve() && (Xe(), qe());
        } }
        var Je = { color: !0, date: !0, datetime: !0, "datetime-local": !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 };
        function Ze(e) { var t = e && e.nodeName && e.nodeName.toLowerCase(); return "input" === t ? !!Je[e.type] : "textarea" === t; }
        function et(e) { return (e = e.target || window).correspondingUseElement && (e = e.correspondingUseElement), 3 === e.nodeType ? e.parentNode : e; }
        function tt(e, t) { return !(!o.canUseDOM || t && !("addEventListener" in document)) && ((t = (e = "on" + e) in document) || ((t = document.createElement("div")).setAttribute(e, "return;"), t = "function" == typeof t[e]), t); }
        function nt(e) { var t = e.type; return (e = e.nodeName) && "input" === e.toLowerCase() && ("checkbox" === t || "radio" === t); }
        function rt(e) { e._valueTracker || (e._valueTracker = function (e) { var t = nt(e) ? "checked" : "value", n = Object.getOwnPropertyDescriptor(e.constructor.prototype, t), r = "" + e[t]; if (!e.hasOwnProperty(t) && void 0 !== n && "function" == typeof n.get && "function" == typeof n.set) {
            var i = n.get, o = n.set;
            return Object.defineProperty(e, t, { configurable: !0, get: function () { return i.call(this); }, set: function (e) { r = "" + e, o.call(this, e); } }), Object.defineProperty(e, t, { enumerable: n.enumerable }), { getValue: function () { return r; }, setValue: function (e) { r = "" + e; }, stopTracking: function () { e._valueTracker = null, delete e[t]; } };
        } }(e)); }
        function it(e) { if (!e)
            return !1; var t = e._valueTracker; if (!t)
            return !0; var n = t.getValue(), r = ""; return e && (r = nt(e) ? e.checked ? "true" : "false" : e.value), (e = r) !== n && (t.setValue(e), !0); }
        var ot = i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, at = "function" == typeof Symbol && Symbol.for, ut = at ? Symbol.for("react.element") : 60103, st = at ? Symbol.for("react.portal") : 60106, ct = at ? Symbol.for("react.fragment") : 60107, lt = at ? Symbol.for("react.strict_mode") : 60108, ft = at ? Symbol.for("react.profiler") : 60114, pt = at ? Symbol.for("react.provider") : 60109, dt = at ? Symbol.for("react.context") : 60110, ht = at ? Symbol.for("react.async_mode") : 60111, vt = at ? Symbol.for("react.forward_ref") : 60112, mt = at ? Symbol.for("react.timeout") : 60113, yt = "function" == typeof Symbol && Symbol.iterator;
        function gt(e) { return null === e || void 0 === e ? null : "function" == typeof (e = yt && e[yt] || e["@@iterator"]) ? e : null; }
        function bt(e) { var t = e.type; if ("function" == typeof t)
            return t.displayName || t.name; if ("string" == typeof t)
            return t; switch (t) {
            case ht: return "AsyncMode";
            case dt: return "Context.Consumer";
            case ct: return "ReactFragment";
            case st: return "ReactPortal";
            case ft: return "Profiler(" + e.pendingProps.id + ")";
            case pt: return "Context.Provider";
            case lt: return "StrictMode";
            case mt: return "Timeout";
        } if ("object" == typeof t && null !== t)
            switch (t.$$typeof) {
                case vt: return "" !== (e = t.render.displayName || t.render.name || "") ? "ForwardRef(" + e + ")" : "ForwardRef";
            } return null; }
        function wt(e) { var t = ""; do {
            e: switch (e.tag) {
                case 0:
                case 1:
                case 2:
                case 5:
                    var n = e._debugOwner, r = e._debugSource, i = bt(e), o = null;
                    n && (o = bt(n)), n = r, i = "\n    in " + (i || "Unknown") + (n ? " (at " + n.fileName.replace(/^.*[\\\/]/, "") + ":" + n.lineNumber + ")" : o ? " (created by " + o + ")" : "");
                    break e;
                default: i = "";
            }
            t += i, e = e.return;
        } while (e); return t; }
        var _t = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, xt = {}, kt = {};
        function St(e, t, n, r, i) { this.acceptsBooleans = 2 === t || 3 === t || 4 === t, this.attributeName = r, this.attributeNamespace = i, this.mustUseProperty = n, this.propertyName = e, this.type = t; }
        var Et = {};
        "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (e) { Et[e] = new St(e, 0, !1, e, null); }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (e) { var t = e[0]; Et[t] = new St(t, 1, !1, e[1], null); }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (e) { Et[e] = new St(e, 2, !1, e.toLowerCase(), null); }), ["autoReverse", "externalResourcesRequired", "preserveAlpha"].forEach(function (e) { Et[e] = new St(e, 2, !1, e, null); }), "allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (e) { Et[e] = new St(e, 3, !1, e.toLowerCase(), null); }), ["checked", "multiple", "muted", "selected"].forEach(function (e) { Et[e] = new St(e, 3, !0, e.toLowerCase(), null); }), ["capture", "download"].forEach(function (e) { Et[e] = new St(e, 4, !1, e.toLowerCase(), null); }), ["cols", "rows", "size", "span"].forEach(function (e) { Et[e] = new St(e, 6, !1, e.toLowerCase(), null); }), ["rowSpan", "start"].forEach(function (e) { Et[e] = new St(e, 5, !1, e.toLowerCase(), null); });
        var Ot = /[\-:]([a-z])/g;
        function Tt(e) { return e[1].toUpperCase(); }
        function Ct(e, t, n, r) { var i = Et.hasOwnProperty(t) ? Et[t] : null; (null !== i ? 0 === i.type : !r && (2 < t.length && ("o" === t[0] || "O" === t[0]) && ("n" === t[1] || "N" === t[1]))) || (function (e, t, n, r) { if (null === t || void 0 === t || function (e, t, n, r) { if (null !== n && 0 === n.type)
            return !1; switch (typeof t) {
            case "function":
            case "symbol": return !0;
            case "boolean": return !r && (null !== n ? !n.acceptsBooleans : "data-" !== (e = e.toLowerCase().slice(0, 5)) && "aria-" !== e);
            default: return !1;
        } }(e, t, n, r))
            return !0; if (r)
            return !1; if (null !== n)
            switch (n.type) {
                case 3: return !t;
                case 4: return !1 === t;
                case 5: return isNaN(t);
                case 6: return isNaN(t) || 1 > t;
            } return !1; }(t, n, i, r) && (n = null), r || null === i ? function (e) { return !!kt.hasOwnProperty(e) || !xt.hasOwnProperty(e) && (_t.test(e) ? kt[e] = !0 : (xt[e] = !0, !1)); }(t) && (null === n ? e.removeAttribute(t) : e.setAttribute(t, "" + n)) : i.mustUseProperty ? e[i.propertyName] = null === n ? 3 !== i.type && "" : n : (t = i.attributeName, r = i.attributeNamespace, null === n ? e.removeAttribute(t) : (n = 3 === (i = i.type) || 4 === i && !0 === n ? "" : "" + n, r ? e.setAttributeNS(r, t, n) : e.setAttribute(t, n)))); }
        function Pt(e, t) { var n = t.checked; return a({}, t, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != n ? n : e._wrapperState.initialChecked }); }
        function Mt(e, t) { var n = null == t.defaultValue ? "" : t.defaultValue, r = null != t.checked ? t.checked : t.defaultChecked; n = It(null != t.value ? t.value : n), e._wrapperState = { initialChecked: r, initialValue: n, controlled: "checkbox" === t.type || "radio" === t.type ? null != t.checked : null != t.value }; }
        function Nt(e, t) { null != (t = t.checked) && Ct(e, "checked", t, !1); }
        function jt(e, t) { Nt(e, t); var n = It(t.value); null != n && ("number" === t.type ? (0 === n && "" === e.value || e.value != n) && (e.value = "" + n) : e.value !== "" + n && (e.value = "" + n)), t.hasOwnProperty("value") ? Lt(e, t.type, n) : t.hasOwnProperty("defaultValue") && Lt(e, t.type, It(t.defaultValue)), null == t.checked && null != t.defaultChecked && (e.defaultChecked = !!t.defaultChecked); }
        function At(e, t) { (t.hasOwnProperty("value") || t.hasOwnProperty("defaultValue")) && ("" === e.value && (e.value = "" + e._wrapperState.initialValue), e.defaultValue = "" + e._wrapperState.initialValue), "" !== (t = e.name) && (e.name = ""), e.defaultChecked = !e.defaultChecked, e.defaultChecked = !e.defaultChecked, "" !== t && (e.name = t); }
        function Lt(e, t, n) { "number" === t && e.ownerDocument.activeElement === e || (null == n ? e.defaultValue = "" + e._wrapperState.initialValue : e.defaultValue !== "" + n && (e.defaultValue = "" + n)); }
        function It(e) { switch (typeof e) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined": return e;
            default: return "";
        } }
        "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (e) { var t = e.replace(Ot, Tt); Et[t] = new St(t, 1, !1, e, null); }), "xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (e) { var t = e.replace(Ot, Tt); Et[t] = new St(t, 1, !1, e, "http://www.w3.org/1999/xlink"); }), ["xml:base", "xml:lang", "xml:space"].forEach(function (e) { var t = e.replace(Ot, Tt); Et[t] = new St(t, 1, !1, e, "http://www.w3.org/XML/1998/namespace"); }), Et.tabIndex = new St("tabIndex", 1, !1, "tabindex", null);
        var Rt = { change: { phasedRegistrationNames: { bubbled: "onChange", captured: "onChangeCapture" }, dependencies: "blur change click focus input keydown keyup selectionchange".split(" ") } };
        function zt(e, t, n) { return (e = we.getPooled(Rt.change, e, t, n)).type = "change", Be(n), ee(e), e; }
        var Ft = null, Dt = null;
        function Ut(e) { z(e, !1); }
        function Wt(e) { if (it(V(e)))
            return e; }
        function Ht(e, t) { if ("change" === e)
            return t; }
        var Bt = !1;
        function Vt() { Ft && (Ft.detachEvent("onpropertychange", qt), Dt = Ft = null); }
        function qt(e) { "value" === e.propertyName && Wt(Dt) && Qe(Ut, e = zt(Dt, e, et(e))); }
        function Gt(e, t, n) { "focus" === e ? (Vt(), Dt = n, (Ft = t).attachEvent("onpropertychange", qt)) : "blur" === e && Vt(); }
        function $t(e) { if ("selectionchange" === e || "keyup" === e || "keydown" === e)
            return Wt(Dt); }
        function Yt(e, t) { if ("click" === e)
            return Wt(t); }
        function Xt(e, t) { if ("input" === e || "change" === e)
            return Wt(t); }
        o.canUseDOM && (Bt = tt("input") && (!document.documentMode || 9 < document.documentMode));
        var Kt = { eventTypes: Rt, _isInputEventSupported: Bt, extractEvents: function (e, t, n, r) { var i = t ? V(t) : window, o = void 0, a = void 0, u = i.nodeName && i.nodeName.toLowerCase(); if ("select" === u || "input" === u && "file" === i.type ? o = Ht : Ze(i) ? Bt ? o = Xt : (o = $t, a = Gt) : (u = i.nodeName) && "input" === u.toLowerCase() && ("checkbox" === i.type || "radio" === i.type) && (o = Yt), o && (o = o(e, t)))
                return zt(o, n, r); a && a(e, i, t), "blur" === e && null != t && (e = t._wrapperState || i._wrapperState) && e.controlled && "number" === i.type && Lt(i, "number", i.value); } }, Qt = we.extend({ view: null, detail: null }), Jt = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
        function Zt(e) { var t = this.nativeEvent; return t.getModifierState ? t.getModifierState(e) : !!(e = Jt[e]) && !!t[e]; }
        function en() { return Zt; }
        var tn = Qt.extend({ screenX: null, screenY: null, clientX: null, clientY: null, pageX: null, pageY: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, getModifierState: en, button: null, buttons: null, relatedTarget: function (e) { return e.relatedTarget || (e.fromElement === e.srcElement ? e.toElement : e.fromElement); } }), nn = tn.extend({ pointerId: null, width: null, height: null, pressure: null, tiltX: null, tiltY: null, pointerType: null, isPrimary: null }), rn = { mouseEnter: { registrationName: "onMouseEnter", dependencies: ["mouseout", "mouseover"] }, mouseLeave: { registrationName: "onMouseLeave", dependencies: ["mouseout", "mouseover"] }, pointerEnter: { registrationName: "onPointerEnter", dependencies: ["pointerout", "pointerover"] }, pointerLeave: { registrationName: "onPointerLeave", dependencies: ["pointerout", "pointerover"] } }, on = { eventTypes: rn, extractEvents: function (e, t, n, r) { var i = "mouseover" === e || "pointerover" === e, o = "mouseout" === e || "pointerout" === e; if (i && (n.relatedTarget || n.fromElement) || !o && !i)
                return null; if (i = r.window === r ? r : (i = r.ownerDocument) ? i.defaultView || i.parentWindow : window, o ? (o = t, t = (t = n.relatedTarget || n.toElement) ? B(t) : null) : o = null, o === t)
                return null; var a = void 0, u = void 0, s = void 0, c = void 0; return "mouseout" === e || "mouseover" === e ? (a = tn, u = rn.mouseLeave, s = rn.mouseEnter, c = "mouse") : "pointerout" !== e && "pointerover" !== e || (a = nn, u = rn.pointerLeave, s = rn.pointerEnter, c = "pointer"), e = null == o ? i : V(o), i = null == t ? i : V(t), (u = a.getPooled(u, o, n, r)).type = c + "leave", u.target = e, u.relatedTarget = i, (n = a.getPooled(s, t, n, r)).type = c + "enter", n.target = i, n.relatedTarget = e, te(u, n, o, t), [u, n]; } };
        function an(e) { var t = e; if (e.alternate)
            for (; t.return;)
                t = t.return;
        else {
            if (0 != (2 & t.effectTag))
                return 1;
            for (; t.return;)
                if (0 != (2 & (t = t.return).effectTag))
                    return 1;
        } return 3 === t.tag ? 2 : 3; }
        function un(e) { 2 !== an(e) && p("188"); }
        function sn(e) { var t = e.alternate; if (!t)
            return 3 === (t = an(e)) && p("188"), 1 === t ? null : e; for (var n = e, r = t;;) {
            var i = n.return, o = i ? i.alternate : null;
            if (!i || !o)
                break;
            if (i.child === o.child) {
                for (var a = i.child; a;) {
                    if (a === n)
                        return un(i), e;
                    if (a === r)
                        return un(i), t;
                    a = a.sibling;
                }
                p("188");
            }
            if (n.return !== r.return)
                n = i, r = o;
            else {
                a = !1;
                for (var u = i.child; u;) {
                    if (u === n) {
                        a = !0, n = i, r = o;
                        break;
                    }
                    if (u === r) {
                        a = !0, r = i, n = o;
                        break;
                    }
                    u = u.sibling;
                }
                if (!a) {
                    for (u = o.child; u;) {
                        if (u === n) {
                            a = !0, n = o, r = i;
                            break;
                        }
                        if (u === r) {
                            a = !0, r = o, n = i;
                            break;
                        }
                        u = u.sibling;
                    }
                    a || p("189");
                }
            }
            n.alternate !== r && p("190");
        } return 3 !== n.tag && p("188"), n.stateNode.current === n ? e : t; }
        function cn(e) { if (!(e = sn(e)))
            return null; for (var t = e;;) {
            if (5 === t.tag || 6 === t.tag)
                return t;
            if (t.child)
                t.child.return = t, t = t.child;
            else {
                if (t === e)
                    break;
                for (; !t.sibling;) {
                    if (!t.return || t.return === e)
                        return null;
                    t = t.return;
                }
                t.sibling.return = t.return, t = t.sibling;
            }
        } return null; }
        var ln = we.extend({ animationName: null, elapsedTime: null, pseudoElement: null }), fn = we.extend({ clipboardData: function (e) { return "clipboardData" in e ? e.clipboardData : window.clipboardData; } }), pn = Qt.extend({ relatedTarget: null });
        function dn(e) { var t = e.keyCode; return "charCode" in e ? 0 === (e = e.charCode) && 13 === t && (e = 13) : e = t, 10 === e && (e = 13), 32 <= e || 13 === e ? e : 0; }
        var hn = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" }, vn = { 8: "Backspace", 9: "Tab", 12: "Clear", 13: "Enter", 16: "Shift", 17: "Control", 18: "Alt", 19: "Pause", 20: "CapsLock", 27: "Escape", 32: " ", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete", 112: "F1", 113: "F2", 114: "F3", 115: "F4", 116: "F5", 117: "F6", 118: "F7", 119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "NumLock", 145: "ScrollLock", 224: "Meta" }, mn = Qt.extend({ key: function (e) { if (e.key) {
                var t = hn[e.key] || e.key;
                if ("Unidentified" !== t)
                    return t;
            } return "keypress" === e.type ? 13 === (e = dn(e)) ? "Enter" : String.fromCharCode(e) : "keydown" === e.type || "keyup" === e.type ? vn[e.keyCode] || "Unidentified" : ""; }, location: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, repeat: null, locale: null, getModifierState: en, charCode: function (e) { return "keypress" === e.type ? dn(e) : 0; }, keyCode: function (e) { return "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0; }, which: function (e) { return "keypress" === e.type ? dn(e) : "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0; } }), yn = tn.extend({ dataTransfer: null }), gn = Qt.extend({ touches: null, targetTouches: null, changedTouches: null, altKey: null, metaKey: null, ctrlKey: null, shiftKey: null, getModifierState: en }), bn = we.extend({ propertyName: null, elapsedTime: null, pseudoElement: null }), wn = tn.extend({ deltaX: function (e) { return "deltaX" in e ? e.deltaX : "wheelDeltaX" in e ? -e.wheelDeltaX : 0; }, deltaY: function (e) { return "deltaY" in e ? e.deltaY : "wheelDeltaY" in e ? -e.wheelDeltaY : "wheelDelta" in e ? -e.wheelDelta : 0; }, deltaZ: null, deltaMode: null }), _n = [["abort", "abort"], [se, "animationEnd"], [ce, "animationIteration"], [le, "animationStart"], ["canplay", "canPlay"], ["canplaythrough", "canPlayThrough"], ["drag", "drag"], ["dragenter", "dragEnter"], ["dragexit", "dragExit"], ["dragleave", "dragLeave"], ["dragover", "dragOver"], ["durationchange", "durationChange"], ["emptied", "emptied"], ["encrypted", "encrypted"], ["ended", "ended"], ["error", "error"], ["gotpointercapture", "gotPointerCapture"], ["load", "load"], ["loadeddata", "loadedData"], ["loadedmetadata", "loadedMetadata"], ["loadstart", "loadStart"], ["lostpointercapture", "lostPointerCapture"], ["mousemove", "mouseMove"], ["mouseout", "mouseOut"], ["mouseover", "mouseOver"], ["playing", "playing"], ["pointermove", "pointerMove"], ["pointerout", "pointerOut"], ["pointerover", "pointerOver"], ["progress", "progress"], ["scroll", "scroll"], ["seeking", "seeking"], ["stalled", "stalled"], ["suspend", "suspend"], ["timeupdate", "timeUpdate"], ["toggle", "toggle"], ["touchmove", "touchMove"], [fe, "transitionEnd"], ["waiting", "waiting"], ["wheel", "wheel"]], xn = {}, kn = {};
        function Sn(e, t) { var n = e[0], r = "on" + ((e = e[1])[0].toUpperCase() + e.slice(1)); t = { phasedRegistrationNames: { bubbled: r, captured: r + "Capture" }, dependencies: [n], isInteractive: t }, xn[e] = t, kn[n] = t; }
        [["blur", "blur"], ["cancel", "cancel"], ["click", "click"], ["close", "close"], ["contextmenu", "contextMenu"], ["copy", "copy"], ["cut", "cut"], ["dblclick", "doubleClick"], ["dragend", "dragEnd"], ["dragstart", "dragStart"], ["drop", "drop"], ["focus", "focus"], ["input", "input"], ["invalid", "invalid"], ["keydown", "keyDown"], ["keypress", "keyPress"], ["keyup", "keyUp"], ["mousedown", "mouseDown"], ["mouseup", "mouseUp"], ["paste", "paste"], ["pause", "pause"], ["play", "play"], ["pointercancel", "pointerCancel"], ["pointerdown", "pointerDown"], ["pointerup", "pointerUp"], ["ratechange", "rateChange"], ["reset", "reset"], ["seeked", "seeked"], ["submit", "submit"], ["touchcancel", "touchCancel"], ["touchend", "touchEnd"], ["touchstart", "touchStart"], ["volumechange", "volumeChange"]].forEach(function (e) { Sn(e, !0); }), _n.forEach(function (e) { Sn(e, !1); });
        var En = { eventTypes: xn, isInteractiveTopLevelEventType: function (e) { return void 0 !== (e = kn[e]) && !0 === e.isInteractive; }, extractEvents: function (e, t, n, r) { var i = kn[e]; if (!i)
                return null; switch (e) {
                case "keypress": if (0 === dn(n))
                    return null;
                case "keydown":
                case "keyup":
                    e = mn;
                    break;
                case "blur":
                case "focus":
                    e = pn;
                    break;
                case "click": if (2 === n.button)
                    return null;
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                    e = tn;
                    break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                    e = yn;
                    break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                    e = gn;
                    break;
                case se:
                case ce:
                case le:
                    e = ln;
                    break;
                case fe:
                    e = bn;
                    break;
                case "scroll":
                    e = Qt;
                    break;
                case "wheel":
                    e = wn;
                    break;
                case "copy":
                case "cut":
                case "paste":
                    e = fn;
                    break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                    e = nn;
                    break;
                default: e = we;
            } return ee(t = e.getPooled(i, t, n, r)), t; } }, On = En.isInteractiveTopLevelEventType, Tn = [];
        function Cn(e) { var t = e.targetInst; do {
            if (!t) {
                e.ancestors.push(t);
                break;
            }
            var n;
            for (n = t; n.return;)
                n = n.return;
            if (!(n = 3 !== n.tag ? null : n.stateNode.containerInfo))
                break;
            e.ancestors.push(t), t = B(n);
        } while (t); for (n = 0; n < e.ancestors.length; n++)
            t = e.ancestors[n], F(e.topLevelType, t, e.nativeEvent, et(e.nativeEvent)); }
        var Pn = !0;
        function Mn(e) { Pn = !!e; }
        function Nn(e, t) { if (!t)
            return null; var n = (On(e) ? An : Ln).bind(null, e); t.addEventListener(e, n, !1); }
        function jn(e, t) { if (!t)
            return null; var n = (On(e) ? An : Ln).bind(null, e); t.addEventListener(e, n, !0); }
        function An(e, t) { Ye(Ln, e, t); }
        function Ln(e, t) { if (Pn) {
            var n = et(t);
            if (null === (n = B(n)) || "number" != typeof n.tag || 2 === an(n) || (n = null), Tn.length) {
                var r = Tn.pop();
                r.topLevelType = e, r.nativeEvent = t, r.targetInst = n, e = r;
            }
            else
                e = { topLevelType: e, nativeEvent: t, targetInst: n, ancestors: [] };
            try {
                Qe(Cn, e);
            }
            finally {
                e.topLevelType = null, e.nativeEvent = null, e.targetInst = null, e.ancestors.length = 0, 10 > Tn.length && Tn.push(e);
            }
        } }
        var In = { get _enabled() { return Pn; }, setEnabled: Mn, isEnabled: function () { return Pn; }, trapBubbledEvent: Nn, trapCapturedEvent: jn, dispatchEvent: Ln }, Rn = {}, zn = 0, Fn = "_reactListenersID" + ("" + Math.random()).slice(2);
        function Dn(e) { return Object.prototype.hasOwnProperty.call(e, Fn) || (e[Fn] = zn++, Rn[e[Fn]] = {}), Rn[e[Fn]]; }
        function Un(e) { for (; e && e.firstChild;)
            e = e.firstChild; return e; }
        function Wn(e, t) { var n, r = Un(e); for (e = 0; r;) {
            if (3 === r.nodeType) {
                if (n = e + r.textContent.length, e <= t && n >= t)
                    return { node: r, offset: t - e };
                e = n;
            }
            e: {
                for (; r;) {
                    if (r.nextSibling) {
                        r = r.nextSibling;
                        break e;
                    }
                    r = r.parentNode;
                }
                r = void 0;
            }
            r = Un(r);
        } }
        function Hn(e) { var t = e && e.nodeName && e.nodeName.toLowerCase(); return t && ("input" === t && "text" === e.type || "textarea" === t || "true" === e.contentEditable); }
        var Bn = o.canUseDOM && "documentMode" in document && 11 >= document.documentMode, Vn = { select: { phasedRegistrationNames: { bubbled: "onSelect", captured: "onSelectCapture" }, dependencies: "blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ") } }, qn = null, Gn = null, $n = null, Yn = !1;
        function Xn(e, t) { if (Yn || null == qn || qn !== s())
            return null; var n = qn; return "selectionStart" in n && Hn(n) ? n = { start: n.selectionStart, end: n.selectionEnd } : window.getSelection ? n = { anchorNode: (n = window.getSelection()).anchorNode, anchorOffset: n.anchorOffset, focusNode: n.focusNode, focusOffset: n.focusOffset } : n = void 0, $n && c($n, n) ? null : ($n = n, (e = we.getPooled(Vn.select, Gn, e, t)).type = "select", e.target = qn, ee(e), e); }
        var Kn = { eventTypes: Vn, extractEvents: function (e, t, n, r) { var i, o = r.window === r ? r.document : 9 === r.nodeType ? r : r.ownerDocument; if (!(i = !o)) {
                e: {
                    o = Dn(o), i = _.onSelect;
                    for (var a = 0; a < i.length; a++) {
                        var u = i[a];
                        if (!o.hasOwnProperty(u) || !o[u]) {
                            o = !1;
                            break e;
                        }
                    }
                    o = !0;
                }
                i = !o;
            } if (i)
                return null; switch (o = t ? V(t) : window, e) {
                case "focus":
                    (Ze(o) || "true" === o.contentEditable) && (qn = o, Gn = t, $n = null);
                    break;
                case "blur":
                    $n = Gn = qn = null;
                    break;
                case "mousedown":
                    Yn = !0;
                    break;
                case "contextmenu":
                case "mouseup": return Yn = !1, Xn(n, r);
                case "selectionchange": if (Bn)
                    break;
                case "keydown":
                case "keyup": return Xn(n, r);
            } return null; } };
        I.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")), E = G.getFiberCurrentPropsFromNode, O = G.getInstanceFromNode, T = G.getNodeFromInstance, I.injectEventPluginsByName({ SimpleEventPlugin: En, EnterLeaveEventPlugin: on, ChangeEventPlugin: Kt, SelectEventPlugin: Kn, BeforeInputEventPlugin: ze });
        var Qn = void 0;
        Qn = "object" == typeof performance && "function" == typeof performance.now ? function () { return performance.now(); } : function () { return Date.now(); };
        var Jn = void 0, Zn = void 0;
        if (o.canUseDOM) {
            var er = [], tr = 0, nr = {}, rr = -1, ir = !1, or = !1, ar = 0, ur = 33, sr = 33, cr = { didTimeout: !1, timeRemaining: function () { var e = ar - Qn(); return 0 < e ? e : 0; } }, lr = function (e, t) { if (nr[t])
                try {
                    e(cr);
                }
                finally {
                    delete nr[t];
                } }, fr = "__reactIdleCallback$" + Math.random().toString(36).slice(2);
            window.addEventListener("message", function (e) { if (e.source === window && e.data === fr && (ir = !1, 0 !== er.length)) {
                if (0 !== er.length && (e = Qn(), !(-1 === rr || rr > e))) {
                    rr = -1, cr.didTimeout = !0;
                    for (var t = 0, n = er.length; t < n; t++) {
                        var r = er[t], i = r.timeoutTime;
                        -1 !== i && i <= e ? lr(r.scheduledCallback, r.callbackId) : -1 !== i && (-1 === rr || i < rr) && (rr = i);
                    }
                }
                for (e = Qn(); 0 < ar - e && 0 < er.length;)
                    e = er.shift(), cr.didTimeout = !1, lr(e.scheduledCallback, e.callbackId), e = Qn();
                0 < er.length && !or && (or = !0, requestAnimationFrame(pr));
            } }, !1);
            var pr = function (e) { or = !1; var t = e - ar + sr; t < sr && ur < sr ? (8 > t && (t = 8), sr = t < ur ? ur : t) : ur = t, ar = e + sr, ir || (ir = !0, window.postMessage(fr, "*")); };
            Jn = function (e, t) { var n = -1; return null != t && "number" == typeof t.timeout && (n = Qn() + t.timeout), (-1 === rr || -1 !== n && n < rr) && (rr = n), t = ++tr, er.push({ scheduledCallback: e, callbackId: t, timeoutTime: n }), nr[t] = !0, or || (or = !0, requestAnimationFrame(pr)), t; }, Zn = function (e) { delete nr[e]; };
        }
        else {
            var dr = 0, hr = {};
            Jn = function (e) { var t = dr++, n = setTimeout(function () { e({ timeRemaining: function () { return 1 / 0; }, didTimeout: !1 }); }); return hr[t] = n, t; }, Zn = function (e) { var t = hr[e]; delete hr[e], clearTimeout(t); };
        }
        function vr(e, t) { return e = a({ children: void 0 }, t), (t = function (e) { var t = ""; return i.Children.forEach(e, function (e) { null == e || "string" != typeof e && "number" != typeof e || (t += e); }), t; }(t.children)) && (e.children = t), e; }
        function mr(e, t, n, r) { if (e = e.options, t) {
            t = {};
            for (var i = 0; i < n.length; i++)
                t["$" + n[i]] = !0;
            for (n = 0; n < e.length; n++)
                i = t.hasOwnProperty("$" + e[n].value), e[n].selected !== i && (e[n].selected = i), i && r && (e[n].defaultSelected = !0);
        }
        else {
            for (n = "" + n, t = null, i = 0; i < e.length; i++) {
                if (e[i].value === n)
                    return e[i].selected = !0, void (r && (e[i].defaultSelected = !0));
                null !== t || e[i].disabled || (t = e[i]);
            }
            null !== t && (t.selected = !0);
        } }
        function yr(e, t) { var n = t.value; e._wrapperState = { initialValue: null != n ? n : t.defaultValue, wasMultiple: !!t.multiple }; }
        function gr(e, t) { return null != t.dangerouslySetInnerHTML && p("91"), a({}, t, { value: void 0, defaultValue: void 0, children: "" + e._wrapperState.initialValue }); }
        function br(e, t) { var n = t.value; null == n && (n = t.defaultValue, null != (t = t.children) && (null != n && p("92"), Array.isArray(t) && (1 >= t.length || p("93"), t = t[0]), n = "" + t), null == n && (n = "")), e._wrapperState = { initialValue: "" + n }; }
        function wr(e, t) { var n = t.value; null != n && ((n = "" + n) !== e.value && (e.value = n), null == t.defaultValue && (e.defaultValue = n)), null != t.defaultValue && (e.defaultValue = t.defaultValue); }
        function _r(e) { var t = e.textContent; t === e._wrapperState.initialValue && (e.value = t); }
        var xr = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
        function kr(e) { switch (e) {
            case "svg": return "http://www.w3.org/2000/svg";
            case "math": return "http://www.w3.org/1998/Math/MathML";
            default: return "http://www.w3.org/1999/xhtml";
        } }
        function Sr(e, t) { return null == e || "http://www.w3.org/1999/xhtml" === e ? kr(t) : "http://www.w3.org/2000/svg" === e && "foreignObject" === t ? "http://www.w3.org/1999/xhtml" : e; }
        var Er, Or = void 0, Tr = (Er = function (e, t) { if (e.namespaceURI !== xr.svg || "innerHTML" in e)
            e.innerHTML = t;
        else {
            for ((Or = Or || document.createElement("div")).innerHTML = "<svg>" + t + "</svg>", t = Or.firstChild; e.firstChild;)
                e.removeChild(e.firstChild);
            for (; t.firstChild;)
                e.appendChild(t.firstChild);
        } }, "undefined" != typeof MSApp && MSApp.execUnsafeLocalFunction ? function (e, t, n, r) { MSApp.execUnsafeLocalFunction(function () { return Er(e, t); }); } : Er);
        function Cr(e, t) { if (t) {
            var n = e.firstChild;
            if (n && n === e.lastChild && 3 === n.nodeType)
                return void (n.nodeValue = t);
        } e.textContent = t; }
        var Pr = { animationIterationCount: !0, borderImageOutset: !0, borderImageSlice: !0, borderImageWidth: !0, boxFlex: !0, boxFlexGroup: !0, boxOrdinalGroup: !0, columnCount: !0, columns: !0, flex: !0, flexGrow: !0, flexPositive: !0, flexShrink: !0, flexNegative: !0, flexOrder: !0, gridRow: !0, gridRowEnd: !0, gridRowSpan: !0, gridRowStart: !0, gridColumn: !0, gridColumnEnd: !0, gridColumnSpan: !0, gridColumnStart: !0, fontWeight: !0, lineClamp: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, tabSize: !0, widows: !0, zIndex: !0, zoom: !0, fillOpacity: !0, floodOpacity: !0, stopOpacity: !0, strokeDasharray: !0, strokeDashoffset: !0, strokeMiterlimit: !0, strokeOpacity: !0, strokeWidth: !0 }, Mr = ["Webkit", "ms", "Moz", "O"];
        function Nr(e, t) { for (var n in e = e.style, t)
            if (t.hasOwnProperty(n)) {
                var r = 0 === n.indexOf("--"), i = n, o = t[n];
                i = null == o || "boolean" == typeof o || "" === o ? "" : r || "number" != typeof o || 0 === o || Pr.hasOwnProperty(i) && Pr[i] ? ("" + o).trim() : o + "px", "float" === n && (n = "cssFloat"), r ? e.setProperty(n, i) : e[n] = i;
            } }
        Object.keys(Pr).forEach(function (e) { Mr.forEach(function (t) { t = t + e.charAt(0).toUpperCase() + e.substring(1), Pr[t] = Pr[e]; }); });
        var jr = a({ menuitem: !0 }, { area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 });
        function Ar(e, t, n) { t && (jr[e] && (null != t.children || null != t.dangerouslySetInnerHTML) && p("137", e, n()), null != t.dangerouslySetInnerHTML && (null != t.children && p("60"), "object" == typeof t.dangerouslySetInnerHTML && "__html" in t.dangerouslySetInnerHTML || p("61")), null != t.style && "object" != typeof t.style && p("62", n())); }
        function Lr(e, t) { if (-1 === e.indexOf("-"))
            return "string" == typeof t.is; switch (e) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": return !1;
            default: return !0;
        } }
        var Ir = u.thatReturns("");
        function Rr(e, t) { var n = Dn(e = 9 === e.nodeType || 11 === e.nodeType ? e : e.ownerDocument); t = _[t]; for (var r = 0; r < t.length; r++) {
            var i = t[r];
            if (!n.hasOwnProperty(i) || !n[i]) {
                switch (i) {
                    case "scroll":
                        jn("scroll", e);
                        break;
                    case "focus":
                    case "blur":
                        jn("focus", e), jn("blur", e), n.blur = !0, n.focus = !0;
                        break;
                    case "cancel":
                    case "close":
                        tt(i, !0) && jn(i, e);
                        break;
                    case "invalid":
                    case "submit":
                    case "reset": break;
                    default: -1 === pe.indexOf(i) && Nn(i, e);
                }
                n[i] = !0;
            }
        } }
        function zr(e, t, n, r) { return n = 9 === n.nodeType ? n : n.ownerDocument, r === xr.html && (r = kr(e)), r === xr.html ? "script" === e ? ((e = n.createElement("div")).innerHTML = "<script><\/script>", e = e.removeChild(e.firstChild)) : e = "string" == typeof t.is ? n.createElement(e, { is: t.is }) : n.createElement(e) : e = n.createElementNS(r, e), e; }
        function Fr(e, t) { return (9 === t.nodeType ? t : t.ownerDocument).createTextNode(e); }
        function Dr(e, t, n, r) { var i = Lr(t, n); switch (t) {
            case "iframe":
            case "object":
                Nn("load", e);
                var o = n;
                break;
            case "video":
            case "audio":
                for (o = 0; o < pe.length; o++)
                    Nn(pe[o], e);
                o = n;
                break;
            case "source":
                Nn("error", e), o = n;
                break;
            case "img":
            case "image":
            case "link":
                Nn("error", e), Nn("load", e), o = n;
                break;
            case "form":
                Nn("reset", e), Nn("submit", e), o = n;
                break;
            case "details":
                Nn("toggle", e), o = n;
                break;
            case "input":
                Mt(e, n), o = Pt(e, n), Nn("invalid", e), Rr(r, "onChange");
                break;
            case "option":
                o = vr(e, n);
                break;
            case "select":
                yr(e, n), o = a({}, n, { value: void 0 }), Nn("invalid", e), Rr(r, "onChange");
                break;
            case "textarea":
                br(e, n), o = gr(e, n), Nn("invalid", e), Rr(r, "onChange");
                break;
            default: o = n;
        } Ar(t, o, Ir); var s, c = o; for (s in c)
            if (c.hasOwnProperty(s)) {
                var l = c[s];
                "style" === s ? Nr(e, l) : "dangerouslySetInnerHTML" === s ? null != (l = l ? l.__html : void 0) && Tr(e, l) : "children" === s ? "string" == typeof l ? ("textarea" !== t || "" !== l) && Cr(e, l) : "number" == typeof l && Cr(e, "" + l) : "suppressContentEditableWarning" !== s && "suppressHydrationWarning" !== s && "autoFocus" !== s && (w.hasOwnProperty(s) ? null != l && Rr(r, s) : null != l && Ct(e, s, l, i));
            } switch (t) {
            case "input":
                rt(e), At(e, n);
                break;
            case "textarea":
                rt(e), _r(e);
                break;
            case "option":
                null != n.value && e.setAttribute("value", n.value);
                break;
            case "select":
                e.multiple = !!n.multiple, null != (t = n.value) ? mr(e, !!n.multiple, t, !1) : null != n.defaultValue && mr(e, !!n.multiple, n.defaultValue, !0);
                break;
            default: "function" == typeof o.onClick && (e.onclick = u);
        } }
        function Ur(e, t, n, r, i) { var o = null; switch (t) {
            case "input":
                n = Pt(e, n), r = Pt(e, r), o = [];
                break;
            case "option":
                n = vr(e, n), r = vr(e, r), o = [];
                break;
            case "select":
                n = a({}, n, { value: void 0 }), r = a({}, r, { value: void 0 }), o = [];
                break;
            case "textarea":
                n = gr(e, n), r = gr(e, r), o = [];
                break;
            default: "function" != typeof n.onClick && "function" == typeof r.onClick && (e.onclick = u);
        } Ar(t, r, Ir), t = e = void 0; var s = null; for (e in n)
            if (!r.hasOwnProperty(e) && n.hasOwnProperty(e) && null != n[e])
                if ("style" === e) {
                    var c = n[e];
                    for (t in c)
                        c.hasOwnProperty(t) && (s || (s = {}), s[t] = "");
                }
                else
                    "dangerouslySetInnerHTML" !== e && "children" !== e && "suppressContentEditableWarning" !== e && "suppressHydrationWarning" !== e && "autoFocus" !== e && (w.hasOwnProperty(e) ? o || (o = []) : (o = o || []).push(e, null)); for (e in r) {
            var l = r[e];
            if (c = null != n ? n[e] : void 0, r.hasOwnProperty(e) && l !== c && (null != l || null != c))
                if ("style" === e)
                    if (c) {
                        for (t in c)
                            !c.hasOwnProperty(t) || l && l.hasOwnProperty(t) || (s || (s = {}), s[t] = "");
                        for (t in l)
                            l.hasOwnProperty(t) && c[t] !== l[t] && (s || (s = {}), s[t] = l[t]);
                    }
                    else
                        s || (o || (o = []), o.push(e, s)), s = l;
                else
                    "dangerouslySetInnerHTML" === e ? (l = l ? l.__html : void 0, c = c ? c.__html : void 0, null != l && c !== l && (o = o || []).push(e, "" + l)) : "children" === e ? c === l || "string" != typeof l && "number" != typeof l || (o = o || []).push(e, "" + l) : "suppressContentEditableWarning" !== e && "suppressHydrationWarning" !== e && (w.hasOwnProperty(e) ? (null != l && Rr(i, e), o || c === l || (o = [])) : (o = o || []).push(e, l));
        } return s && (o = o || []).push("style", s), o; }
        function Wr(e, t, n, r, i) { "input" === n && "radio" === i.type && null != i.name && Nt(e, i), Lr(n, r), r = Lr(n, i); for (var o = 0; o < t.length; o += 2) {
            var a = t[o], u = t[o + 1];
            "style" === a ? Nr(e, u) : "dangerouslySetInnerHTML" === a ? Tr(e, u) : "children" === a ? Cr(e, u) : Ct(e, a, u, r);
        } switch (n) {
            case "input":
                jt(e, i);
                break;
            case "textarea":
                wr(e, i);
                break;
            case "select": e._wrapperState.initialValue = void 0, t = e._wrapperState.wasMultiple, e._wrapperState.wasMultiple = !!i.multiple, null != (n = i.value) ? mr(e, !!i.multiple, n, !1) : t !== !!i.multiple && (null != i.defaultValue ? mr(e, !!i.multiple, i.defaultValue, !0) : mr(e, !!i.multiple, i.multiple ? [] : "", !1));
        } }
        function Hr(e, t, n, r, i) { switch (t) {
            case "iframe":
            case "object":
                Nn("load", e);
                break;
            case "video":
            case "audio":
                for (r = 0; r < pe.length; r++)
                    Nn(pe[r], e);
                break;
            case "source":
                Nn("error", e);
                break;
            case "img":
            case "image":
            case "link":
                Nn("error", e), Nn("load", e);
                break;
            case "form":
                Nn("reset", e), Nn("submit", e);
                break;
            case "details":
                Nn("toggle", e);
                break;
            case "input":
                Mt(e, n), Nn("invalid", e), Rr(i, "onChange");
                break;
            case "select":
                yr(e, n), Nn("invalid", e), Rr(i, "onChange");
                break;
            case "textarea": br(e, n), Nn("invalid", e), Rr(i, "onChange");
        } for (var o in Ar(t, n, Ir), r = null, n)
            if (n.hasOwnProperty(o)) {
                var a = n[o];
                "children" === o ? "string" == typeof a ? e.textContent !== a && (r = ["children", a]) : "number" == typeof a && e.textContent !== "" + a && (r = ["children", "" + a]) : w.hasOwnProperty(o) && null != a && Rr(i, o);
            } switch (t) {
            case "input":
                rt(e), At(e, n);
                break;
            case "textarea":
                rt(e), _r(e);
                break;
            case "select":
            case "option": break;
            default: "function" == typeof n.onClick && (e.onclick = u);
        } return r; }
        function Br(e, t) { return e.nodeValue !== t; }
        var Vr = { createElement: zr, createTextNode: Fr, setInitialProperties: Dr, diffProperties: Ur, updateProperties: Wr, diffHydratedProperties: Hr, diffHydratedText: Br, warnForUnmatchedText: function () { }, warnForDeletedHydratableElement: function () { }, warnForDeletedHydratableText: function () { }, warnForInsertedHydratedElement: function () { }, warnForInsertedHydratedText: function () { }, restoreControlledState: function (e, t, n) { switch (t) {
                case "input":
                    if (jt(e, n), t = n.name, "radio" === n.type && null != t) {
                        for (n = e; n.parentNode;)
                            n = n.parentNode;
                        for (n = n.querySelectorAll("input[name=" + JSON.stringify("" + t) + '][type="radio"]'), t = 0; t < n.length; t++) {
                            var r = n[t];
                            if (r !== e && r.form === e.form) {
                                var i = q(r);
                                i || p("90"), it(r), jt(r, i);
                            }
                        }
                    }
                    break;
                case "textarea":
                    wr(e, n);
                    break;
                case "select": null != (t = n.value) && mr(e, !!n.multiple, t, !1);
            } } }, qr = null, Gr = null;
        function $r(e, t) { switch (e) {
            case "button":
            case "input":
            case "select":
            case "textarea": return !!t.autoFocus;
        } return !1; }
        function Yr(e, t) { return "textarea" === e || "string" == typeof t.children || "number" == typeof t.children || "object" == typeof t.dangerouslySetInnerHTML && null !== t.dangerouslySetInnerHTML && "string" == typeof t.dangerouslySetInnerHTML.__html; }
        var Xr = Qn, Kr = Jn, Qr = Zn;
        function Jr(e) { for (e = e.nextSibling; e && 1 !== e.nodeType && 3 !== e.nodeType;)
            e = e.nextSibling; return e; }
        function Zr(e) { for (e = e.firstChild; e && 1 !== e.nodeType && 3 !== e.nodeType;)
            e = e.nextSibling; return e; }
        new Set;
        var ei = [], ti = -1;
        function ni(e) { return { current: e }; }
        function ri(e) { 0 > ti || (e.current = ei[ti], ei[ti] = null, ti--); }
        function ii(e, t) { ei[++ti] = e.current, e.current = t; }
        var oi = ni(f), ai = ni(!1), ui = f;
        function si(e) { return li(e) ? ui : oi.current; }
        function ci(e, t) { var n = e.type.contextTypes; if (!n)
            return f; var r = e.stateNode; if (r && r.__reactInternalMemoizedUnmaskedChildContext === t)
            return r.__reactInternalMemoizedMaskedChildContext; var i, o = {}; for (i in n)
            o[i] = t[i]; return r && ((e = e.stateNode).__reactInternalMemoizedUnmaskedChildContext = t, e.__reactInternalMemoizedMaskedChildContext = o), o; }
        function li(e) { return 2 === e.tag && null != e.type.childContextTypes; }
        function fi(e) { li(e) && (ri(ai), ri(oi)); }
        function pi(e) { ri(ai), ri(oi); }
        function di(e, t, n) { oi.current !== f && p("168"), ii(oi, t), ii(ai, n); }
        function hi(e, t) { var n = e.stateNode, r = e.type.childContextTypes; if ("function" != typeof n.getChildContext)
            return t; for (var i in n = n.getChildContext())
            i in r || p("108", bt(e) || "Unknown", i); return a({}, t, n); }
        function vi(e) { if (!li(e))
            return !1; var t = e.stateNode; return t = t && t.__reactInternalMemoizedMergedChildContext || f, ui = oi.current, ii(oi, t), ii(ai, ai.current), !0; }
        function mi(e, t) { var n = e.stateNode; if (n || p("169"), t) {
            var r = hi(e, ui);
            n.__reactInternalMemoizedMergedChildContext = r, ri(ai), ri(oi), ii(oi, r);
        }
        else
            ri(ai); ii(ai, t); }
        function yi(e, t, n, r) { this.tag = e, this.key = n, this.sibling = this.child = this.return = this.stateNode = this.type = null, this.index = 0, this.ref = null, this.pendingProps = t, this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = r, this.effectTag = 0, this.lastEffect = this.firstEffect = this.nextEffect = null, this.expirationTime = 0, this.alternate = null; }
        function gi(e, t, n) { var r = e.alternate; return null === r ? ((r = new yi(e.tag, t, e.key, e.mode)).type = e.type, r.stateNode = e.stateNode, r.alternate = e, e.alternate = r) : (r.pendingProps = t, r.effectTag = 0, r.nextEffect = null, r.firstEffect = null, r.lastEffect = null), r.expirationTime = n, r.child = e.child, r.memoizedProps = e.memoizedProps, r.memoizedState = e.memoizedState, r.updateQueue = e.updateQueue, r.sibling = e.sibling, r.index = e.index, r.ref = e.ref, r; }
        function bi(e, t, n) { var r = e.type, i = e.key; if (e = e.props, "function" == typeof r)
            var o = r.prototype && r.prototype.isReactComponent ? 2 : 0;
        else if ("string" == typeof r)
            o = 5;
        else
            switch (r) {
                case ct: return wi(e.children, t, n, i);
                case ht:
                    o = 11, t |= 3;
                    break;
                case lt:
                    o = 11, t |= 2;
                    break;
                case ft: return (r = new yi(15, e, i, 4 | t)).type = ft, r.expirationTime = n, r;
                case mt:
                    o = 16, t |= 2;
                    break;
                default: e: {
                    switch ("object" == typeof r && null !== r ? r.$$typeof : null) {
                        case pt:
                            o = 13;
                            break e;
                        case dt:
                            o = 12;
                            break e;
                        case vt:
                            o = 14;
                            break e;
                        default: p("130", null == r ? r : typeof r, "");
                    }
                    o = void 0;
                }
            } return (t = new yi(o, e, i, t)).type = r, t.expirationTime = n, t; }
        function wi(e, t, n, r) { return (e = new yi(10, e, r, t)).expirationTime = n, e; }
        function _i(e, t, n) { return (e = new yi(6, e, null, t)).expirationTime = n, e; }
        function xi(e, t, n) { return (t = new yi(4, null !== e.children ? e.children : [], e.key, t)).expirationTime = n, t.stateNode = { containerInfo: e.containerInfo, pendingChildren: null, implementation: e.implementation }, t; }
        function ki(e, t, n) { return e = { current: t = new yi(3, null, null, t ? 3 : 0), containerInfo: e, pendingChildren: null, earliestPendingTime: 0, latestPendingTime: 0, earliestSuspendedTime: 0, latestSuspendedTime: 0, latestPingedTime: 0, pendingCommitExpirationTime: 0, finishedWork: null, context: null, pendingContext: null, hydrate: n, remainingExpirationTime: 0, firstBatch: null, nextScheduledRoot: null }, t.stateNode = e; }
        var Si = null, Ei = null;
        function Oi(e) { return function (t) { try {
            return e(t);
        }
        catch (e) { } }; }
        function Ti(e) { "function" == typeof Si && Si(e); }
        function Ci(e) { "function" == typeof Ei && Ei(e); }
        var Pi = !1;
        function Mi(e) { return { expirationTime: 0, baseState: e, firstUpdate: null, lastUpdate: null, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null }; }
        function Ni(e) { return { expirationTime: e.expirationTime, baseState: e.baseState, firstUpdate: e.firstUpdate, lastUpdate: e.lastUpdate, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null }; }
        function ji(e) { return { expirationTime: e, tag: 0, payload: null, callback: null, next: null, nextEffect: null }; }
        function Ai(e, t, n) { null === e.lastUpdate ? e.firstUpdate = e.lastUpdate = t : (e.lastUpdate.next = t, e.lastUpdate = t), (0 === e.expirationTime || e.expirationTime > n) && (e.expirationTime = n); }
        function Li(e, t, n) { var r = e.alternate; if (null === r) {
            var i = e.updateQueue, o = null;
            null === i && (i = e.updateQueue = Mi(e.memoizedState));
        }
        else
            i = e.updateQueue, o = r.updateQueue, null === i ? null === o ? (i = e.updateQueue = Mi(e.memoizedState), o = r.updateQueue = Mi(r.memoizedState)) : i = e.updateQueue = Ni(o) : null === o && (o = r.updateQueue = Ni(i)); null === o || i === o ? Ai(i, t, n) : null === i.lastUpdate || null === o.lastUpdate ? (Ai(i, t, n), Ai(o, t, n)) : (Ai(i, t, n), o.lastUpdate = t); }
        function Ii(e, t, n) { var r = e.updateQueue; null === (r = null === r ? e.updateQueue = Mi(e.memoizedState) : Ri(e, r)).lastCapturedUpdate ? r.firstCapturedUpdate = r.lastCapturedUpdate = t : (r.lastCapturedUpdate.next = t, r.lastCapturedUpdate = t), (0 === r.expirationTime || r.expirationTime > n) && (r.expirationTime = n); }
        function Ri(e, t) { var n = e.alternate; return null !== n && t === n.updateQueue && (t = e.updateQueue = Ni(t)), t; }
        function zi(e, t, n, r, i, o) { switch (n.tag) {
            case 1: return "function" == typeof (e = n.payload) ? e.call(o, r, i) : e;
            case 3: e.effectTag = -1025 & e.effectTag | 64;
            case 0:
                if (null === (i = "function" == typeof (e = n.payload) ? e.call(o, r, i) : e) || void 0 === i)
                    break;
                return a({}, r, i);
            case 2: Pi = !0;
        } return r; }
        function Fi(e, t, n, r, i) { if (Pi = !1, !(0 === t.expirationTime || t.expirationTime > i)) {
            for (var o = (t = Ri(e, t)).baseState, a = null, u = 0, s = t.firstUpdate, c = o; null !== s;) {
                var l = s.expirationTime;
                l > i ? (null === a && (a = s, o = c), (0 === u || u > l) && (u = l)) : (c = zi(e, 0, s, c, n, r), null !== s.callback && (e.effectTag |= 32, s.nextEffect = null, null === t.lastEffect ? t.firstEffect = t.lastEffect = s : (t.lastEffect.nextEffect = s, t.lastEffect = s))), s = s.next;
            }
            for (l = null, s = t.firstCapturedUpdate; null !== s;) {
                var f = s.expirationTime;
                f > i ? (null === l && (l = s, null === a && (o = c)), (0 === u || u > f) && (u = f)) : (c = zi(e, 0, s, c, n, r), null !== s.callback && (e.effectTag |= 32, s.nextEffect = null, null === t.lastCapturedEffect ? t.firstCapturedEffect = t.lastCapturedEffect = s : (t.lastCapturedEffect.nextEffect = s, t.lastCapturedEffect = s))), s = s.next;
            }
            null === a && (t.lastUpdate = null), null === l ? t.lastCapturedUpdate = null : e.effectTag |= 32, null === a && null === l && (o = c), t.baseState = o, t.firstUpdate = a, t.firstCapturedUpdate = l, t.expirationTime = u, e.memoizedState = c;
        } }
        function Di(e, t) { "function" != typeof e && p("191", e), e.call(t); }
        function Ui(e, t, n) { for (null !== t.firstCapturedUpdate && (null !== t.lastUpdate && (t.lastUpdate.next = t.firstCapturedUpdate, t.lastUpdate = t.lastCapturedUpdate), t.firstCapturedUpdate = t.lastCapturedUpdate = null), e = t.firstEffect, t.firstEffect = t.lastEffect = null; null !== e;) {
            var r = e.callback;
            null !== r && (e.callback = null, Di(r, n)), e = e.nextEffect;
        } for (e = t.firstCapturedEffect, t.firstCapturedEffect = t.lastCapturedEffect = null; null !== e;)
            null !== (t = e.callback) && (e.callback = null, Di(t, n)), e = e.nextEffect; }
        function Wi(e, t) { return { value: e, source: t, stack: wt(t) }; }
        var Hi = ni(null), Bi = ni(null), Vi = ni(0);
        function qi(e) { var t = e.type._context; ii(Vi, t._changedBits), ii(Bi, t._currentValue), ii(Hi, e), t._currentValue = e.pendingProps.value, t._changedBits = e.stateNode; }
        function Gi(e) { var t = Vi.current, n = Bi.current; ri(Hi), ri(Bi), ri(Vi), (e = e.type._context)._currentValue = n, e._changedBits = t; }
        var $i = {}, Yi = ni($i), Xi = ni($i), Ki = ni($i);
        function Qi(e) { return e === $i && p("174"), e; }
        function Ji(e, t) { ii(Ki, t), ii(Xi, e), ii(Yi, $i); var n = t.nodeType; switch (n) {
            case 9:
            case 11:
                t = (t = t.documentElement) ? t.namespaceURI : Sr(null, "");
                break;
            default: t = Sr(t = (n = 8 === n ? t.parentNode : t).namespaceURI || null, n = n.tagName);
        } ri(Yi), ii(Yi, t); }
        function Zi(e) { ri(Yi), ri(Xi), ri(Ki); }
        function eo(e) { Xi.current === e && (ri(Yi), ri(Xi)); }
        function to(e, t, n) { var r = e.memoizedState; r = null === (t = t(n, r)) || void 0 === t ? r : a({}, r, t), e.memoizedState = r, null !== (e = e.updateQueue) && 0 === e.expirationTime && (e.baseState = r); }
        var no = { isMounted: function (e) { return !!(e = e._reactInternalFiber) && 2 === an(e); }, enqueueSetState: function (e, t, n) { e = e._reactInternalFiber; var r = va(), i = ji(r = da(r, e)); i.payload = t, void 0 !== n && null !== n && (i.callback = n), Li(e, i, r), ha(e, r); }, enqueueReplaceState: function (e, t, n) { e = e._reactInternalFiber; var r = va(), i = ji(r = da(r, e)); i.tag = 1, i.payload = t, void 0 !== n && null !== n && (i.callback = n), Li(e, i, r), ha(e, r); }, enqueueForceUpdate: function (e, t) { e = e._reactInternalFiber; var n = va(), r = ji(n = da(n, e)); r.tag = 2, void 0 !== t && null !== t && (r.callback = t), Li(e, r, n), ha(e, n); } };
        function ro(e, t, n, r, i, o) { var a = e.stateNode; return e = e.type, "function" == typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(n, i, o) : !e.prototype || !e.prototype.isPureReactComponent || (!c(t, n) || !c(r, i)); }
        function io(e, t, n, r) { e = t.state, "function" == typeof t.componentWillReceiveProps && t.componentWillReceiveProps(n, r), "function" == typeof t.UNSAFE_componentWillReceiveProps && t.UNSAFE_componentWillReceiveProps(n, r), t.state !== e && no.enqueueReplaceState(t, t.state, null); }
        function oo(e, t) { var n = e.type, r = e.stateNode, i = e.pendingProps, o = si(e); r.props = i, r.state = e.memoizedState, r.refs = f, r.context = ci(e, o), null !== (o = e.updateQueue) && (Fi(e, o, i, r, t), r.state = e.memoizedState), "function" == typeof (o = e.type.getDerivedStateFromProps) && (to(e, o, i), r.state = e.memoizedState), "function" == typeof n.getDerivedStateFromProps || "function" == typeof r.getSnapshotBeforeUpdate || "function" != typeof r.UNSAFE_componentWillMount && "function" != typeof r.componentWillMount || (n = r.state, "function" == typeof r.componentWillMount && r.componentWillMount(), "function" == typeof r.UNSAFE_componentWillMount && r.UNSAFE_componentWillMount(), n !== r.state && no.enqueueReplaceState(r, r.state, null), null !== (o = e.updateQueue) && (Fi(e, o, i, r, t), r.state = e.memoizedState)), "function" == typeof r.componentDidMount && (e.effectTag |= 4); }
        var ao = Array.isArray;
        function uo(e, t, n) { if (null !== (e = n.ref) && "function" != typeof e && "object" != typeof e) {
            if (n._owner) {
                var r = void 0;
                (n = n._owner) && (2 !== n.tag && p("110"), r = n.stateNode), r || p("147", e);
                var i = "" + e;
                return null !== t && null !== t.ref && "function" == typeof t.ref && t.ref._stringRef === i ? t.ref : ((t = function (e) { var t = r.refs === f ? r.refs = {} : r.refs; null === e ? delete t[i] : t[i] = e; })._stringRef = i, t);
            }
            "string" != typeof e && p("148"), n._owner || p("254", e);
        } return e; }
        function so(e, t) { "textarea" !== e.type && p("31", "[object Object]" === Object.prototype.toString.call(t) ? "object with keys {" + Object.keys(t).join(", ") + "}" : t, ""); }
        function co(e) { function t(t, n) { if (e) {
            var r = t.lastEffect;
            null !== r ? (r.nextEffect = n, t.lastEffect = n) : t.firstEffect = t.lastEffect = n, n.nextEffect = null, n.effectTag = 8;
        } } function n(n, r) { if (!e)
            return null; for (; null !== r;)
            t(n, r), r = r.sibling; return null; } function r(e, t) { for (e = new Map; null !== t;)
            null !== t.key ? e.set(t.key, t) : e.set(t.index, t), t = t.sibling; return e; } function i(e, t, n) { return (e = gi(e, t, n)).index = 0, e.sibling = null, e; } function o(t, n, r) { return t.index = r, e ? null !== (r = t.alternate) ? (r = r.index) < n ? (t.effectTag = 2, n) : r : (t.effectTag = 2, n) : n; } function a(t) { return e && null === t.alternate && (t.effectTag = 2), t; } function u(e, t, n, r) { return null === t || 6 !== t.tag ? ((t = _i(n, e.mode, r)).return = e, t) : ((t = i(t, n, r)).return = e, t); } function s(e, t, n, r) { return null !== t && t.type === n.type ? ((r = i(t, n.props, r)).ref = uo(e, t, n), r.return = e, r) : ((r = bi(n, e.mode, r)).ref = uo(e, t, n), r.return = e, r); } function c(e, t, n, r) { return null === t || 4 !== t.tag || t.stateNode.containerInfo !== n.containerInfo || t.stateNode.implementation !== n.implementation ? ((t = xi(n, e.mode, r)).return = e, t) : ((t = i(t, n.children || [], r)).return = e, t); } function l(e, t, n, r, o) { return null === t || 10 !== t.tag ? ((t = wi(n, e.mode, r, o)).return = e, t) : ((t = i(t, n, r)).return = e, t); } function f(e, t, n) { if ("string" == typeof t || "number" == typeof t)
            return (t = _i("" + t, e.mode, n)).return = e, t; if ("object" == typeof t && null !== t) {
            switch (t.$$typeof) {
                case ut: return (n = bi(t, e.mode, n)).ref = uo(e, null, t), n.return = e, n;
                case st: return (t = xi(t, e.mode, n)).return = e, t;
            }
            if (ao(t) || gt(t))
                return (t = wi(t, e.mode, n, null)).return = e, t;
            so(e, t);
        } return null; } function d(e, t, n, r) { var i = null !== t ? t.key : null; if ("string" == typeof n || "number" == typeof n)
            return null !== i ? null : u(e, t, "" + n, r); if ("object" == typeof n && null !== n) {
            switch (n.$$typeof) {
                case ut: return n.key === i ? n.type === ct ? l(e, t, n.props.children, r, i) : s(e, t, n, r) : null;
                case st: return n.key === i ? c(e, t, n, r) : null;
            }
            if (ao(n) || gt(n))
                return null !== i ? null : l(e, t, n, r, null);
            so(e, n);
        } return null; } function h(e, t, n, r, i) { if ("string" == typeof r || "number" == typeof r)
            return u(t, e = e.get(n) || null, "" + r, i); if ("object" == typeof r && null !== r) {
            switch (r.$$typeof) {
                case ut: return e = e.get(null === r.key ? n : r.key) || null, r.type === ct ? l(t, e, r.props.children, i, r.key) : s(t, e, r, i);
                case st: return c(t, e = e.get(null === r.key ? n : r.key) || null, r, i);
            }
            if (ao(r) || gt(r))
                return l(t, e = e.get(n) || null, r, i, null);
            so(t, r);
        } return null; } function v(i, a, u, s) { for (var c = null, l = null, p = a, v = a = 0, m = null; null !== p && v < u.length; v++) {
            p.index > v ? (m = p, p = null) : m = p.sibling;
            var y = d(i, p, u[v], s);
            if (null === y) {
                null === p && (p = m);
                break;
            }
            e && p && null === y.alternate && t(i, p), a = o(y, a, v), null === l ? c = y : l.sibling = y, l = y, p = m;
        } if (v === u.length)
            return n(i, p), c; if (null === p) {
            for (; v < u.length; v++)
                (p = f(i, u[v], s)) && (a = o(p, a, v), null === l ? c = p : l.sibling = p, l = p);
            return c;
        } for (p = r(i, p); v < u.length; v++)
            (m = h(p, i, v, u[v], s)) && (e && null !== m.alternate && p.delete(null === m.key ? v : m.key), a = o(m, a, v), null === l ? c = m : l.sibling = m, l = m); return e && p.forEach(function (e) { return t(i, e); }), c; } function m(i, a, u, s) { var c = gt(u); "function" != typeof c && p("150"), null == (u = c.call(u)) && p("151"); for (var l = c = null, v = a, m = a = 0, y = null, g = u.next(); null !== v && !g.done; m++, g = u.next()) {
            v.index > m ? (y = v, v = null) : y = v.sibling;
            var b = d(i, v, g.value, s);
            if (null === b) {
                v || (v = y);
                break;
            }
            e && v && null === b.alternate && t(i, v), a = o(b, a, m), null === l ? c = b : l.sibling = b, l = b, v = y;
        } if (g.done)
            return n(i, v), c; if (null === v) {
            for (; !g.done; m++, g = u.next())
                null !== (g = f(i, g.value, s)) && (a = o(g, a, m), null === l ? c = g : l.sibling = g, l = g);
            return c;
        } for (v = r(i, v); !g.done; m++, g = u.next())
            null !== (g = h(v, i, m, g.value, s)) && (e && null !== g.alternate && v.delete(null === g.key ? m : g.key), a = o(g, a, m), null === l ? c = g : l.sibling = g, l = g); return e && v.forEach(function (e) { return t(i, e); }), c; } return function (e, r, o, u) { "object" == typeof o && null !== o && o.type === ct && null === o.key && (o = o.props.children); var s = "object" == typeof o && null !== o; if (s)
            switch (o.$$typeof) {
                case ut:
                    e: {
                        var c = o.key;
                        for (s = r; null !== s;) {
                            if (s.key === c) {
                                if (10 === s.tag ? o.type === ct : s.type === o.type) {
                                    n(e, s.sibling), (r = i(s, o.type === ct ? o.props.children : o.props, u)).ref = uo(e, s, o), r.return = e, e = r;
                                    break e;
                                }
                                n(e, s);
                                break;
                            }
                            t(e, s), s = s.sibling;
                        }
                        o.type === ct ? ((r = wi(o.props.children, e.mode, u, o.key)).return = e, e = r) : ((u = bi(o, e.mode, u)).ref = uo(e, r, o), u.return = e, e = u);
                    }
                    return a(e);
                case st:
                    e: {
                        for (s = o.key; null !== r;) {
                            if (r.key === s) {
                                if (4 === r.tag && r.stateNode.containerInfo === o.containerInfo && r.stateNode.implementation === o.implementation) {
                                    n(e, r.sibling), (r = i(r, o.children || [], u)).return = e, e = r;
                                    break e;
                                }
                                n(e, r);
                                break;
                            }
                            t(e, r), r = r.sibling;
                        }
                        (r = xi(o, e.mode, u)).return = e, e = r;
                    }
                    return a(e);
            } if ("string" == typeof o || "number" == typeof o)
            return o = "" + o, null !== r && 6 === r.tag ? (n(e, r.sibling), (r = i(r, o, u)).return = e, e = r) : (n(e, r), (r = _i(o, e.mode, u)).return = e, e = r), a(e); if (ao(o))
            return v(e, r, o, u); if (gt(o))
            return m(e, r, o, u); if (s && so(e, o), void 0 === o)
            switch (e.tag) {
                case 2:
                case 1: p("152", (u = e.type).displayName || u.name || "Component");
            } return n(e, r); }; }
        var lo = co(!0), fo = co(!1), po = null, ho = null, vo = !1;
        function mo(e, t) { var n = new yi(5, null, null, 0); n.type = "DELETED", n.stateNode = t, n.return = e, n.effectTag = 8, null !== e.lastEffect ? (e.lastEffect.nextEffect = n, e.lastEffect = n) : e.firstEffect = e.lastEffect = n; }
        function yo(e, t) { switch (e.tag) {
            case 5:
                var n = e.type;
                return null !== (t = 1 !== t.nodeType || n.toLowerCase() !== t.nodeName.toLowerCase() ? null : t) && (e.stateNode = t, !0);
            case 6: return null !== (t = "" === e.pendingProps || 3 !== t.nodeType ? null : t) && (e.stateNode = t, !0);
            default: return !1;
        } }
        function go(e) { if (vo) {
            var t = ho;
            if (t) {
                var n = t;
                if (!yo(e, t)) {
                    if (!(t = Jr(n)) || !yo(e, t))
                        return e.effectTag |= 2, vo = !1, void (po = e);
                    mo(po, n);
                }
                po = e, ho = Zr(t);
            }
            else
                e.effectTag |= 2, vo = !1, po = e;
        } }
        function bo(e) { for (e = e.return; null !== e && 5 !== e.tag && 3 !== e.tag;)
            e = e.return; po = e; }
        function wo(e) { if (e !== po)
            return !1; if (!vo)
            return bo(e), vo = !0, !1; var t = e.type; if (5 !== e.tag || "head" !== t && "body" !== t && !Yr(t, e.memoizedProps))
            for (t = ho; t;)
                mo(e, t), t = Jr(t); return bo(e), ho = po ? Jr(e.stateNode) : null, !0; }
        function _o() { ho = po = null, vo = !1; }
        function xo(e, t, n) { ko(e, t, n, t.expirationTime); }
        function ko(e, t, n, r) { t.child = null === e ? fo(t, null, n, r) : lo(t, e.child, n, r); }
        function So(e, t) { var n = t.ref; (null === e && null !== n || null !== e && e.ref !== n) && (t.effectTag |= 128); }
        function Eo(e, t, n, r, i) { So(e, t); var o = 0 != (64 & t.effectTag); if (!n && !o)
            return r && mi(t, !1), Co(e, t); n = t.stateNode, ot.current = t; var a = o ? null : n.render(); return t.effectTag |= 1, o && (ko(e, t, null, i), t.child = null), ko(e, t, a, i), t.memoizedState = n.state, t.memoizedProps = n.props, r && mi(t, !0), t.child; }
        function Oo(e) { var t = e.stateNode; t.pendingContext ? di(0, t.pendingContext, t.pendingContext !== t.context) : t.context && di(0, t.context, !1), Ji(e, t.containerInfo); }
        function To(e, t, n, r) { var i = e.child; for (null !== i && (i.return = e); null !== i;) {
            switch (i.tag) {
                case 12:
                    var o = 0 | i.stateNode;
                    if (i.type === t && 0 != (o & n)) {
                        for (o = i; null !== o;) {
                            var a = o.alternate;
                            if (0 === o.expirationTime || o.expirationTime > r)
                                o.expirationTime = r, null !== a && (0 === a.expirationTime || a.expirationTime > r) && (a.expirationTime = r);
                            else {
                                if (null === a || !(0 === a.expirationTime || a.expirationTime > r))
                                    break;
                                a.expirationTime = r;
                            }
                            o = o.return;
                        }
                        o = null;
                    }
                    else
                        o = i.child;
                    break;
                case 13:
                    o = i.type === e.type ? null : i.child;
                    break;
                default: o = i.child;
            }
            if (null !== o)
                o.return = i;
            else
                for (o = i; null !== o;) {
                    if (o === e) {
                        o = null;
                        break;
                    }
                    if (null !== (i = o.sibling)) {
                        i.return = o.return, o = i;
                        break;
                    }
                    o = o.return;
                }
            i = o;
        } }
        function Co(e, t) { if (null !== e && t.child !== e.child && p("153"), null !== t.child) {
            var n = gi(e = t.child, e.pendingProps, e.expirationTime);
            for (t.child = n, n.return = t; null !== e.sibling;)
                e = e.sibling, (n = n.sibling = gi(e, e.pendingProps, e.expirationTime)).return = t;
            n.sibling = null;
        } return t.child; }
        function Po(e, t, n) { if (0 === t.expirationTime || t.expirationTime > n) {
            switch (t.tag) {
                case 3:
                    Oo(t);
                    break;
                case 2:
                    vi(t);
                    break;
                case 4:
                    Ji(t, t.stateNode.containerInfo);
                    break;
                case 13: qi(t);
            }
            return null;
        } switch (t.tag) {
            case 0:
                null !== e && p("155");
                var r = t.type, i = t.pendingProps, o = si(t);
                return r = r(i, o = ci(t, o)), t.effectTag |= 1, "object" == typeof r && null !== r && "function" == typeof r.render && void 0 === r.$$typeof ? (o = t.type, t.tag = 2, t.memoizedState = null !== r.state && void 0 !== r.state ? r.state : null, "function" == typeof (o = o.getDerivedStateFromProps) && to(t, o, i), i = vi(t), r.updater = no, t.stateNode = r, r._reactInternalFiber = t, oo(t, n), e = Eo(e, t, !0, i, n)) : (t.tag = 1, xo(e, t, r), t.memoizedProps = i, e = t.child), e;
            case 1: return i = t.type, n = t.pendingProps, ai.current || t.memoizedProps !== n ? (i = i(n, r = ci(t, r = si(t))), t.effectTag |= 1, xo(e, t, i), t.memoizedProps = n, e = t.child) : e = Co(e, t), e;
            case 2:
                if (i = vi(t), null === e)
                    if (null === t.stateNode) {
                        var a = t.pendingProps, u = t.type;
                        r = si(t);
                        var s = 2 === t.tag && null != t.type.contextTypes;
                        a = new u(a, o = s ? ci(t, r) : f), t.memoizedState = null !== a.state && void 0 !== a.state ? a.state : null, a.updater = no, t.stateNode = a, a._reactInternalFiber = t, s && ((s = t.stateNode).__reactInternalMemoizedUnmaskedChildContext = r, s.__reactInternalMemoizedMaskedChildContext = o), oo(t, n), r = !0;
                    }
                    else {
                        u = t.type, r = t.stateNode, s = t.memoizedProps, o = t.pendingProps, r.props = s;
                        var c = r.context;
                        a = ci(t, a = si(t));
                        var l = u.getDerivedStateFromProps;
                        (u = "function" == typeof l || "function" == typeof r.getSnapshotBeforeUpdate) || "function" != typeof r.UNSAFE_componentWillReceiveProps && "function" != typeof r.componentWillReceiveProps || (s !== o || c !== a) && io(t, r, o, a), Pi = !1;
                        var d = t.memoizedState;
                        c = r.state = d;
                        var h = t.updateQueue;
                        null !== h && (Fi(t, h, o, r, n), c = t.memoizedState), s !== o || d !== c || ai.current || Pi ? ("function" == typeof l && (to(t, l, o), c = t.memoizedState), (s = Pi || ro(t, s, o, d, c, a)) ? (u || "function" != typeof r.UNSAFE_componentWillMount && "function" != typeof r.componentWillMount || ("function" == typeof r.componentWillMount && r.componentWillMount(), "function" == typeof r.UNSAFE_componentWillMount && r.UNSAFE_componentWillMount()), "function" == typeof r.componentDidMount && (t.effectTag |= 4)) : ("function" == typeof r.componentDidMount && (t.effectTag |= 4), t.memoizedProps = o, t.memoizedState = c), r.props = o, r.state = c, r.context = a, r = s) : ("function" == typeof r.componentDidMount && (t.effectTag |= 4), r = !1);
                    }
                else
                    u = t.type, r = t.stateNode, o = t.memoizedProps, s = t.pendingProps, r.props = o, c = r.context, a = ci(t, a = si(t)), (u = "function" == typeof (l = u.getDerivedStateFromProps) || "function" == typeof r.getSnapshotBeforeUpdate) || "function" != typeof r.UNSAFE_componentWillReceiveProps && "function" != typeof r.componentWillReceiveProps || (o !== s || c !== a) && io(t, r, s, a), Pi = !1, c = t.memoizedState, d = r.state = c, null !== (h = t.updateQueue) && (Fi(t, h, s, r, n), d = t.memoizedState), o !== s || c !== d || ai.current || Pi ? ("function" == typeof l && (to(t, l, s), d = t.memoizedState), (l = Pi || ro(t, o, s, c, d, a)) ? (u || "function" != typeof r.UNSAFE_componentWillUpdate && "function" != typeof r.componentWillUpdate || ("function" == typeof r.componentWillUpdate && r.componentWillUpdate(s, d, a), "function" == typeof r.UNSAFE_componentWillUpdate && r.UNSAFE_componentWillUpdate(s, d, a)), "function" == typeof r.componentDidUpdate && (t.effectTag |= 4), "function" == typeof r.getSnapshotBeforeUpdate && (t.effectTag |= 256)) : ("function" != typeof r.componentDidUpdate || o === e.memoizedProps && c === e.memoizedState || (t.effectTag |= 4), "function" != typeof r.getSnapshotBeforeUpdate || o === e.memoizedProps && c === e.memoizedState || (t.effectTag |= 256), t.memoizedProps = s, t.memoizedState = d), r.props = s, r.state = d, r.context = a, r = l) : ("function" != typeof r.componentDidUpdate || o === e.memoizedProps && c === e.memoizedState || (t.effectTag |= 4), "function" != typeof r.getSnapshotBeforeUpdate || o === e.memoizedProps && c === e.memoizedState || (t.effectTag |= 256), r = !1);
                return Eo(e, t, r, i, n);
            case 3: return Oo(t), null !== (i = t.updateQueue) ? (r = null !== (r = t.memoizedState) ? r.element : null, Fi(t, i, t.pendingProps, null, n), (i = t.memoizedState.element) === r ? (_o(), e = Co(e, t)) : (r = t.stateNode, (r = (null === e || null === e.child) && r.hydrate) && (ho = Zr(t.stateNode.containerInfo), po = t, r = vo = !0), r ? (t.effectTag |= 2, t.child = fo(t, null, i, n)) : (_o(), xo(e, t, i)), e = t.child)) : (_o(), e = Co(e, t)), e;
            case 5: return Qi(Ki.current), (i = Qi(Yi.current)) !== (r = Sr(i, t.type)) && (ii(Xi, t), ii(Yi, r)), null === e && go(t), i = t.type, s = t.memoizedProps, r = t.pendingProps, o = null !== e ? e.memoizedProps : null, ai.current || s !== r || ((s = 1 & t.mode && !!r.hidden) && (t.expirationTime = 1073741823), s && 1073741823 === n) ? (s = r.children, Yr(i, r) ? s = null : o && Yr(i, o) && (t.effectTag |= 16), So(e, t), 1073741823 !== n && 1 & t.mode && r.hidden ? (t.expirationTime = 1073741823, t.memoizedProps = r, e = null) : (xo(e, t, s), t.memoizedProps = r, e = t.child)) : e = Co(e, t), e;
            case 6: return null === e && go(t), t.memoizedProps = t.pendingProps, null;
            case 16: return null;
            case 4: return Ji(t, t.stateNode.containerInfo), i = t.pendingProps, ai.current || t.memoizedProps !== i ? (null === e ? t.child = lo(t, null, i, n) : xo(e, t, i), t.memoizedProps = i, e = t.child) : e = Co(e, t), e;
            case 14: return i = t.type.render, n = t.pendingProps, r = t.ref, ai.current || t.memoizedProps !== n || r !== (null !== e ? e.ref : null) ? (xo(e, t, i = i(n, r)), t.memoizedProps = n, e = t.child) : e = Co(e, t), e;
            case 10: return n = t.pendingProps, ai.current || t.memoizedProps !== n ? (xo(e, t, n), t.memoizedProps = n, e = t.child) : e = Co(e, t), e;
            case 11: return n = t.pendingProps.children, ai.current || null !== n && t.memoizedProps !== n ? (xo(e, t, n), t.memoizedProps = n, e = t.child) : e = Co(e, t), e;
            case 15: return n = t.pendingProps, t.memoizedProps === n ? e = Co(e, t) : (xo(e, t, n.children), t.memoizedProps = n, e = t.child), e;
            case 13: return function (e, t, n) { var r = t.type._context, i = t.pendingProps, o = t.memoizedProps, a = !0; if (ai.current)
                a = !1;
            else if (o === i)
                return t.stateNode = 0, qi(t), Co(e, t); var u = i.value; if (t.memoizedProps = i, null === o)
                u = 1073741823;
            else if (o.value === i.value) {
                if (o.children === i.children && a)
                    return t.stateNode = 0, qi(t), Co(e, t);
                u = 0;
            }
            else {
                var s = o.value;
                if (s === u && (0 !== s || 1 / s == 1 / u) || s != s && u != u) {
                    if (o.children === i.children && a)
                        return t.stateNode = 0, qi(t), Co(e, t);
                    u = 0;
                }
                else if (u = "function" == typeof r._calculateChangedBits ? r._calculateChangedBits(s, u) : 1073741823, 0 == (u |= 0)) {
                    if (o.children === i.children && a)
                        return t.stateNode = 0, qi(t), Co(e, t);
                }
                else
                    To(t, r, u, n);
            } return t.stateNode = u, qi(t), xo(e, t, i.children), t.child; }(e, t, n);
            case 12:
                e: if (r = t.type, o = t.pendingProps, s = t.memoizedProps, i = r._currentValue, a = r._changedBits, ai.current || 0 !== a || s !== o) {
                    if (t.memoizedProps = o, void 0 !== (u = o.unstable_observedBits) && null !== u || (u = 1073741823), t.stateNode = u, 0 != (a & u))
                        To(t, r, a, n);
                    else if (s === o) {
                        e = Co(e, t);
                        break e;
                    }
                    n = (n = o.children)(i), t.effectTag |= 1, xo(e, t, n), e = t.child;
                }
                else
                    e = Co(e, t);
                return e;
            default: p("156");
        } }
        function Mo(e) { e.effectTag |= 4; }
        var No = void 0, jo = void 0, Ao = void 0;
        function Lo(e, t) { var n = t.pendingProps; switch (t.tag) {
            case 1: return null;
            case 2: return fi(t), null;
            case 3:
                Zi(), pi();
                var r = t.stateNode;
                return r.pendingContext && (r.context = r.pendingContext, r.pendingContext = null), null !== e && null !== e.child || (wo(t), t.effectTag &= -3), No(t), null;
            case 5:
                eo(t), r = Qi(Ki.current);
                var i = t.type;
                if (null !== e && null != t.stateNode) {
                    var o = e.memoizedProps, a = t.stateNode, u = Qi(Yi.current);
                    a = Ur(a, i, o, n, r), jo(e, t, a, i, o, n, r, u), e.ref !== t.ref && (t.effectTag |= 128);
                }
                else {
                    if (!n)
                        return null === t.stateNode && p("166"), null;
                    if (e = Qi(Yi.current), wo(t))
                        n = t.stateNode, i = t.type, o = t.memoizedProps, n[W] = t, n[H] = o, r = Hr(n, i, o, e, r), t.updateQueue = r, null !== r && Mo(t);
                    else {
                        (e = zr(i, n, r, e))[W] = t, e[H] = n;
                        e: for (o = t.child; null !== o;) {
                            if (5 === o.tag || 6 === o.tag)
                                e.appendChild(o.stateNode);
                            else if (4 !== o.tag && null !== o.child) {
                                o.child.return = o, o = o.child;
                                continue;
                            }
                            if (o === t)
                                break;
                            for (; null === o.sibling;) {
                                if (null === o.return || o.return === t)
                                    break e;
                                o = o.return;
                            }
                            o.sibling.return = o.return, o = o.sibling;
                        }
                        Dr(e, i, n, r), $r(i, n) && Mo(t), t.stateNode = e;
                    }
                    null !== t.ref && (t.effectTag |= 128);
                }
                return null;
            case 6:
                if (e && null != t.stateNode)
                    Ao(e, t, e.memoizedProps, n);
                else {
                    if ("string" != typeof n)
                        return null === t.stateNode && p("166"), null;
                    r = Qi(Ki.current), Qi(Yi.current), wo(t) ? (r = t.stateNode, n = t.memoizedProps, r[W] = t, Br(r, n) && Mo(t)) : ((r = Fr(n, r))[W] = t, t.stateNode = r);
                }
                return null;
            case 14:
            case 16:
            case 10:
            case 11:
            case 15: return null;
            case 4: return Zi(), No(t), null;
            case 13: return Gi(t), null;
            case 12: return null;
            case 0: p("167");
            default: p("156");
        } }
        function Io(e, t) { var n = t.source; null === t.stack && null !== n && wt(n), null !== n && bt(n), t = t.value, null !== e && 2 === e.tag && bt(e); try {
            t && t.suppressReactErrorLogging || console.error(t);
        }
        catch (e) {
            e && e.suppressReactErrorLogging || console.error(e);
        } }
        function Ro(e) { var t = e.ref; if (null !== t)
            if ("function" == typeof t)
                try {
                    t(null);
                }
                catch (t) {
                    fa(e, t);
                }
            else
                t.current = null; }
        function zo(e) { switch (Ci(e), e.tag) {
            case 2:
                Ro(e);
                var t = e.stateNode;
                if ("function" == typeof t.componentWillUnmount)
                    try {
                        t.props = e.memoizedProps, t.state = e.memoizedState, t.componentWillUnmount();
                    }
                    catch (t) {
                        fa(e, t);
                    }
                break;
            case 5:
                Ro(e);
                break;
            case 4: Uo(e);
        } }
        function Fo(e) { return 5 === e.tag || 3 === e.tag || 4 === e.tag; }
        function Do(e) { e: {
            for (var t = e.return; null !== t;) {
                if (Fo(t)) {
                    var n = t;
                    break e;
                }
                t = t.return;
            }
            p("160"), n = void 0;
        } var r = t = void 0; switch (n.tag) {
            case 5:
                t = n.stateNode, r = !1;
                break;
            case 3:
            case 4:
                t = n.stateNode.containerInfo, r = !0;
                break;
            default: p("161");
        } 16 & n.effectTag && (Cr(t, ""), n.effectTag &= -17); e: t: for (n = e;;) {
            for (; null === n.sibling;) {
                if (null === n.return || Fo(n.return)) {
                    n = null;
                    break e;
                }
                n = n.return;
            }
            for (n.sibling.return = n.return, n = n.sibling; 5 !== n.tag && 6 !== n.tag;) {
                if (2 & n.effectTag)
                    continue t;
                if (null === n.child || 4 === n.tag)
                    continue t;
                n.child.return = n, n = n.child;
            }
            if (!(2 & n.effectTag)) {
                n = n.stateNode;
                break e;
            }
        } for (var i = e;;) {
            if (5 === i.tag || 6 === i.tag)
                if (n)
                    if (r) {
                        var o = t, a = i.stateNode, u = n;
                        8 === o.nodeType ? o.parentNode.insertBefore(a, u) : o.insertBefore(a, u);
                    }
                    else
                        t.insertBefore(i.stateNode, n);
                else
                    r ? (o = t, a = i.stateNode, 8 === o.nodeType ? o.parentNode.insertBefore(a, o) : o.appendChild(a)) : t.appendChild(i.stateNode);
            else if (4 !== i.tag && null !== i.child) {
                i.child.return = i, i = i.child;
                continue;
            }
            if (i === e)
                break;
            for (; null === i.sibling;) {
                if (null === i.return || i.return === e)
                    return;
                i = i.return;
            }
            i.sibling.return = i.return, i = i.sibling;
        } }
        function Uo(e) { for (var t = e, n = !1, r = void 0, i = void 0;;) {
            if (!n) {
                n = t.return;
                e: for (;;) {
                    switch (null === n && p("160"), n.tag) {
                        case 5:
                            r = n.stateNode, i = !1;
                            break e;
                        case 3:
                        case 4:
                            r = n.stateNode.containerInfo, i = !0;
                            break e;
                    }
                    n = n.return;
                }
                n = !0;
            }
            if (5 === t.tag || 6 === t.tag) {
                e: for (var o = t, a = o;;)
                    if (zo(a), null !== a.child && 4 !== a.tag)
                        a.child.return = a, a = a.child;
                    else {
                        if (a === o)
                            break;
                        for (; null === a.sibling;) {
                            if (null === a.return || a.return === o)
                                break e;
                            a = a.return;
                        }
                        a.sibling.return = a.return, a = a.sibling;
                    }
                i ? (o = r, a = t.stateNode, 8 === o.nodeType ? o.parentNode.removeChild(a) : o.removeChild(a)) : r.removeChild(t.stateNode);
            }
            else if (4 === t.tag ? r = t.stateNode.containerInfo : zo(t), null !== t.child) {
                t.child.return = t, t = t.child;
                continue;
            }
            if (t === e)
                break;
            for (; null === t.sibling;) {
                if (null === t.return || t.return === e)
                    return;
                4 === (t = t.return).tag && (n = !1);
            }
            t.sibling.return = t.return, t = t.sibling;
        } }
        function Wo(e, t) { switch (t.tag) {
            case 2: break;
            case 5:
                var n = t.stateNode;
                if (null != n) {
                    var r = t.memoizedProps;
                    e = null !== e ? e.memoizedProps : r;
                    var i = t.type, o = t.updateQueue;
                    t.updateQueue = null, null !== o && (n[H] = r, Wr(n, o, i, e, r));
                }
                break;
            case 6:
                null === t.stateNode && p("162"), t.stateNode.nodeValue = t.memoizedProps;
                break;
            case 3:
            case 15:
            case 16: break;
            default: p("163");
        } }
        function Ho(e, t, n) { (n = ji(n)).tag = 3, n.payload = { element: null }; var r = t.value; return n.callback = function () { Ya(r), Io(e, t); }, n; }
        function Bo(e, t, n) { (n = ji(n)).tag = 3; var r = e.stateNode; return null !== r && "function" == typeof r.componentDidCatch && (n.callback = function () { null === aa ? aa = new Set([this]) : aa.add(this); var n = t.value, r = t.stack; Io(e, t), this.componentDidCatch(n, { componentStack: null !== r ? r : "" }); }), n; }
        function Vo(e, t, n, r, i, o) { n.effectTag |= 512, n.firstEffect = n.lastEffect = null, r = Wi(r, n), e = t; do {
            switch (e.tag) {
                case 3: return e.effectTag |= 1024, void Ii(e, r = Ho(e, r, o), o);
                case 2: if (t = r, n = e.stateNode, 0 == (64 & e.effectTag) && null !== n && "function" == typeof n.componentDidCatch && (null === aa || !aa.has(n)))
                    return e.effectTag |= 1024, void Ii(e, r = Bo(e, t, o), o);
            }
            e = e.return;
        } while (null !== e); }
        function qo(e) { switch (e.tag) {
            case 2:
                fi(e);
                var t = e.effectTag;
                return 1024 & t ? (e.effectTag = -1025 & t | 64, e) : null;
            case 3: return Zi(), pi(), 1024 & (t = e.effectTag) ? (e.effectTag = -1025 & t | 64, e) : null;
            case 5: return eo(e), null;
            case 16: return 1024 & (t = e.effectTag) ? (e.effectTag = -1025 & t | 64, e) : null;
            case 4: return Zi(), null;
            case 13: return Gi(e), null;
            default: return null;
        } }
        No = function () { }, jo = function (e, t, n) { (t.updateQueue = n) && Mo(t); }, Ao = function (e, t, n, r) { n !== r && Mo(t); };
        var Go = Xr(), $o = 2, Yo = Go, Xo = 0, Ko = 0, Qo = !1, Jo = null, Zo = null, ea = 0, ta = -1, na = !1, ra = null, ia = !1, oa = !1, aa = null;
        function ua() { if (null !== Jo)
            for (var e = Jo.return; null !== e;) {
                var t = e;
                switch (t.tag) {
                    case 2:
                        fi(t);
                        break;
                    case 3:
                        Zi(), pi();
                        break;
                    case 5:
                        eo(t);
                        break;
                    case 4:
                        Zi();
                        break;
                    case 13: Gi(t);
                }
                e = e.return;
            } Zo = null, ea = 0, ta = -1, na = !1, Jo = null, oa = !1; }
        function sa(e) { for (;;) {
            var t = e.alternate, n = e.return, r = e.sibling;
            if (0 == (512 & e.effectTag)) {
                t = Lo(t, e);
                var i = e;
                if (1073741823 === ea || 1073741823 !== i.expirationTime) {
                    var o = 0;
                    switch (i.tag) {
                        case 3:
                        case 2:
                            var a = i.updateQueue;
                            null !== a && (o = a.expirationTime);
                    }
                    for (a = i.child; null !== a;)
                        0 !== a.expirationTime && (0 === o || o > a.expirationTime) && (o = a.expirationTime), a = a.sibling;
                    i.expirationTime = o;
                }
                if (null !== t)
                    return t;
                if (null !== n && 0 == (512 & n.effectTag) && (null === n.firstEffect && (n.firstEffect = e.firstEffect), null !== e.lastEffect && (null !== n.lastEffect && (n.lastEffect.nextEffect = e.firstEffect), n.lastEffect = e.lastEffect), 1 < e.effectTag && (null !== n.lastEffect ? n.lastEffect.nextEffect = e : n.firstEffect = e, n.lastEffect = e)), null !== r)
                    return r;
                if (null === n) {
                    oa = !0;
                    break;
                }
                e = n;
            }
            else {
                if (null !== (e = qo(e)))
                    return e.effectTag &= 511, e;
                if (null !== n && (n.firstEffect = n.lastEffect = null, n.effectTag |= 512), null !== r)
                    return r;
                if (null === n)
                    break;
                e = n;
            }
        } return null; }
        function ca(e) { var t = Po(e.alternate, e, ea); return null === t && (t = sa(e)), ot.current = null, t; }
        function la(e, t, n) { Qo && p("243"), Qo = !0, t === ea && e === Zo && null !== Jo || (ua(), ea = t, ta = -1, Jo = gi((Zo = e).current, null, ea), e.pendingCommitExpirationTime = 0); var r = !1; for (na = !n || ea <= $o;;) {
            try {
                if (n)
                    for (; null !== Jo && !$a();)
                        Jo = ca(Jo);
                else
                    for (; null !== Jo;)
                        Jo = ca(Jo);
            }
            catch (t) {
                if (null === Jo)
                    r = !0, Ya(t);
                else {
                    null === Jo && p("271");
                    var i = (n = Jo).return;
                    if (null === i) {
                        r = !0, Ya(t);
                        break;
                    }
                    Vo(e, i, n, t, 0, ea), Jo = sa(n);
                }
            }
            break;
        } if (Qo = !1, r)
            return null; if (null === Jo) {
            if (oa)
                return e.pendingCommitExpirationTime = t, e.current.alternate;
            na && p("262"), 0 <= ta && setTimeout(function () { var t = e.current.expirationTime; 0 !== t && (0 === e.remainingExpirationTime || e.remainingExpirationTime < t) && Fa(e, t); }, ta), function (e) { null === ka && p("246"), ka.remainingExpirationTime = e; }(e.current.expirationTime);
        } return null; }
        function fa(e, t) { var n; e: {
            for (Qo && !ia && p("263"), n = e.return; null !== n;) {
                switch (n.tag) {
                    case 2:
                        var r = n.stateNode;
                        if ("function" == typeof n.type.getDerivedStateFromCatch || "function" == typeof r.componentDidCatch && (null === aa || !aa.has(r))) {
                            Li(n, e = Bo(n, e = Wi(t, e), 1), 1), ha(n, 1), n = void 0;
                            break e;
                        }
                        break;
                    case 3:
                        Li(n, e = Ho(n, e = Wi(t, e), 1), 1), ha(n, 1), n = void 0;
                        break e;
                }
                n = n.return;
            }
            3 === e.tag && (Li(e, n = Ho(e, n = Wi(t, e), 1), 1), ha(e, 1)), n = void 0;
        } return n; }
        function pa() { var e = 2 + 25 * (1 + ((va() - 2 + 500) / 25 | 0)); return e <= Xo && (e = Xo + 1), Xo = e; }
        function da(e, t) { return e = 0 !== Ko ? Ko : Qo ? ia ? 1 : ea : 1 & t.mode ? ja ? 2 + 10 * (1 + ((e - 2 + 15) / 10 | 0)) : 2 + 25 * (1 + ((e - 2 + 500) / 25 | 0)) : 1, ja && (0 === Ea || e > Ea) && (Ea = e), e; }
        function ha(e, t) { for (; null !== e;) {
            if ((0 === e.expirationTime || e.expirationTime > t) && (e.expirationTime = t), null !== e.alternate && (0 === e.alternate.expirationTime || e.alternate.expirationTime > t) && (e.alternate.expirationTime = t), null === e.return) {
                if (3 !== e.tag)
                    break;
                var n = e.stateNode;
                !Qo && 0 !== ea && t < ea && ua();
                var r = n.current.expirationTime;
                Qo && !ia && Zo === n || Fa(n, r), Ia > La && p("185");
            }
            e = e.return;
        } }
        function va() { return Yo = Xr() - Go, $o = 2 + (Yo / 10 | 0); }
        function ma(e) { var t = Ko; Ko = 2 + 25 * (1 + ((va() - 2 + 500) / 25 | 0)); try {
            return e();
        }
        finally {
            Ko = t;
        } }
        function ya(e, t, n, r, i) { var o = Ko; Ko = 1; try {
            return e(t, n, r, i);
        }
        finally {
            Ko = o;
        } }
        var ga = null, ba = null, wa = 0, _a = -1, xa = !1, ka = null, Sa = 0, Ea = 0, Oa = !1, Ta = !1, Ca = null, Pa = null, Ma = !1, Na = !1, ja = !1, Aa = null, La = 1e3, Ia = 0, Ra = 1;
        function za(e) { if (0 !== wa) {
            if (e > wa)
                return;
            Qr(_a);
        } var t = Xr() - Go; wa = e, _a = Kr(Ua, { timeout: 10 * (e - 2) - t }); }
        function Fa(e, t) { if (null === e.nextScheduledRoot)
            e.remainingExpirationTime = t, null === ba ? (ga = ba = e, e.nextScheduledRoot = e) : (ba = ba.nextScheduledRoot = e).nextScheduledRoot = ga;
        else {
            var n = e.remainingExpirationTime;
            (0 === n || t < n) && (e.remainingExpirationTime = t);
        } xa || (Ma ? Na && (ka = e, Sa = 1, qa(e, 1, !1)) : 1 === t ? Wa() : za(t)); }
        function Da() { var e = 0, t = null; if (null !== ba)
            for (var n = ba, r = ga; null !== r;) {
                var i = r.remainingExpirationTime;
                if (0 === i) {
                    if ((null === n || null === ba) && p("244"), r === r.nextScheduledRoot) {
                        ga = ba = r.nextScheduledRoot = null;
                        break;
                    }
                    if (r === ga)
                        ga = i = r.nextScheduledRoot, ba.nextScheduledRoot = i, r.nextScheduledRoot = null;
                    else {
                        if (r === ba) {
                            (ba = n).nextScheduledRoot = ga, r.nextScheduledRoot = null;
                            break;
                        }
                        n.nextScheduledRoot = r.nextScheduledRoot, r.nextScheduledRoot = null;
                    }
                    r = n.nextScheduledRoot;
                }
                else {
                    if ((0 === e || i < e) && (e = i, t = r), r === ba)
                        break;
                    n = r, r = r.nextScheduledRoot;
                }
            } null !== (n = ka) && n === t && 1 === e ? Ia++ : Ia = 0, ka = t, Sa = e; }
        function Ua(e) { Ha(0, !0, e); }
        function Wa() { Ha(1, !1, null); }
        function Ha(e, t, n) { if (Pa = n, Da(), t)
            for (; null !== ka && 0 !== Sa && (0 === e || e >= Sa) && (!Oa || va() >= Sa);)
                va(), qa(ka, Sa, !Oa), Da();
        else
            for (; null !== ka && 0 !== Sa && (0 === e || e >= Sa);)
                qa(ka, Sa, !1), Da(); null !== Pa && (wa = 0, _a = -1), 0 !== Sa && za(Sa), Pa = null, Oa = !1, Va(); }
        function Ba(e, t) { xa && p("253"), ka = e, Sa = t, qa(e, t, !1), Wa(), Va(); }
        function Va() { if (Ia = 0, null !== Aa) {
            var e = Aa;
            Aa = null;
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                try {
                    n._onComplete();
                }
                catch (e) {
                    Ta || (Ta = !0, Ca = e);
                }
            }
        } if (Ta)
            throw e = Ca, Ca = null, Ta = !1, e; }
        function qa(e, t, n) { xa && p("245"), xa = !0, n ? null !== (n = e.finishedWork) ? Ga(e, n, t) : (e.finishedWork = null, null !== (n = la(e, t, !0)) && ($a() ? e.finishedWork = n : Ga(e, n, t))) : null !== (n = e.finishedWork) ? Ga(e, n, t) : (e.finishedWork = null, null !== (n = la(e, t, !1)) && Ga(e, n, t)), xa = !1; }
        function Ga(e, t, n) { var r = e.firstBatch; if (null !== r && r._expirationTime <= n && (null === Aa ? Aa = [r] : Aa.push(r), r._defer))
            return e.finishedWork = t, void (e.remainingExpirationTime = 0); if (e.finishedWork = null, ia = Qo = !0, (n = t.stateNode).current === t && p("177"), 0 === (r = n.pendingCommitExpirationTime) && p("261"), n.pendingCommitExpirationTime = 0, va(), ot.current = null, 1 < t.effectTag)
            if (null !== t.lastEffect) {
                t.lastEffect.nextEffect = t;
                var i = t.firstEffect;
            }
            else
                i = t;
        else
            i = t.firstEffect; qr = Pn; var o = s(); if (Hn(o)) {
            if ("selectionStart" in o)
                var a = { start: o.selectionStart, end: o.selectionEnd };
            else
                e: {
                    var u = window.getSelection && window.getSelection();
                    if (u && 0 !== u.rangeCount) {
                        a = u.anchorNode;
                        var c = u.anchorOffset, f = u.focusNode;
                        u = u.focusOffset;
                        try {
                            a.nodeType, f.nodeType;
                        }
                        catch (e) {
                            a = null;
                            break e;
                        }
                        var d = 0, h = -1, v = -1, m = 0, y = 0, g = o, b = null;
                        t: for (;;) {
                            for (var w; g !== a || 0 !== c && 3 !== g.nodeType || (h = d + c), g !== f || 0 !== u && 3 !== g.nodeType || (v = d + u), 3 === g.nodeType && (d += g.nodeValue.length), null !== (w = g.firstChild);)
                                b = g, g = w;
                            for (;;) {
                                if (g === o)
                                    break t;
                                if (b === a && ++m === c && (h = d), b === f && ++y === u && (v = d), null !== (w = g.nextSibling))
                                    break;
                                b = (g = b).parentNode;
                            }
                            g = w;
                        }
                        a = -1 === h || -1 === v ? null : { start: h, end: v };
                    }
                    else
                        a = null;
                }
            a = a || { start: 0, end: 0 };
        }
        else
            a = null; for (Gr = { focusedElem: o, selectionRange: a }, Mn(!1), ra = i; null !== ra;) {
            o = !1, a = void 0;
            try {
                for (; null !== ra;) {
                    if (256 & ra.effectTag) {
                        var _ = ra.alternate;
                        switch ((c = ra).tag) {
                            case 2:
                                if (256 & c.effectTag && null !== _) {
                                    var x = _.memoizedProps, k = _.memoizedState, S = c.stateNode;
                                    S.props = c.memoizedProps, S.state = c.memoizedState;
                                    var E = S.getSnapshotBeforeUpdate(x, k);
                                    S.__reactInternalSnapshotBeforeUpdate = E;
                                }
                                break;
                            case 3:
                            case 5:
                            case 6:
                            case 4: break;
                            default: p("163");
                        }
                    }
                    ra = ra.nextEffect;
                }
            }
            catch (e) {
                o = !0, a = e;
            }
            o && (null === ra && p("178"), fa(ra, a), null !== ra && (ra = ra.nextEffect));
        } for (ra = i; null !== ra;) {
            _ = !1, x = void 0;
            try {
                for (; null !== ra;) {
                    var O = ra.effectTag;
                    if (16 & O && Cr(ra.stateNode, ""), 128 & O) {
                        var T = ra.alternate;
                        if (null !== T) {
                            var C = T.ref;
                            null !== C && ("function" == typeof C ? C(null) : C.current = null);
                        }
                    }
                    switch (14 & O) {
                        case 2:
                            Do(ra), ra.effectTag &= -3;
                            break;
                        case 6:
                            Do(ra), ra.effectTag &= -3, Wo(ra.alternate, ra);
                            break;
                        case 4:
                            Wo(ra.alternate, ra);
                            break;
                        case 8: Uo(k = ra), k.return = null, k.child = null, k.alternate && (k.alternate.child = null, k.alternate.return = null);
                    }
                    ra = ra.nextEffect;
                }
            }
            catch (e) {
                _ = !0, x = e;
            }
            _ && (null === ra && p("178"), fa(ra, x), null !== ra && (ra = ra.nextEffect));
        } if (C = Gr, T = s(), O = C.focusedElem, _ = C.selectionRange, T !== O && l(document.documentElement, O)) {
            Hn(O) && (T = _.start, void 0 === (C = _.end) && (C = T), "selectionStart" in O ? (O.selectionStart = T, O.selectionEnd = Math.min(C, O.value.length)) : window.getSelection && (T = window.getSelection(), x = O[he()].length, C = Math.min(_.start, x), _ = void 0 === _.end ? C : Math.min(_.end, x), !T.extend && C > _ && (x = _, _ = C, C = x), x = Wn(O, C), k = Wn(O, _), x && k && (1 !== T.rangeCount || T.anchorNode !== x.node || T.anchorOffset !== x.offset || T.focusNode !== k.node || T.focusOffset !== k.offset) && ((S = document.createRange()).setStart(x.node, x.offset), T.removeAllRanges(), C > _ ? (T.addRange(S), T.extend(k.node, k.offset)) : (S.setEnd(k.node, k.offset), T.addRange(S))))), T = [];
            for (C = O; C = C.parentNode;)
                1 === C.nodeType && T.push({ element: C, left: C.scrollLeft, top: C.scrollTop });
            for (O.focus(), O = 0; O < T.length; O++)
                (C = T[O]).element.scrollLeft = C.left, C.element.scrollTop = C.top;
        } for (Gr = null, Mn(qr), qr = null, n.current = t, ra = i; null !== ra;) {
            i = !1, O = void 0;
            try {
                for (T = r; null !== ra;) {
                    var P = ra.effectTag;
                    if (36 & P) {
                        var M = ra.alternate;
                        switch (_ = T, (C = ra).tag) {
                            case 2:
                                var N = C.stateNode;
                                if (4 & C.effectTag)
                                    if (null === M)
                                        N.props = C.memoizedProps, N.state = C.memoizedState, N.componentDidMount();
                                    else {
                                        var j = M.memoizedProps, A = M.memoizedState;
                                        N.props = C.memoizedProps, N.state = C.memoizedState, N.componentDidUpdate(j, A, N.__reactInternalSnapshotBeforeUpdate);
                                    }
                                var L = C.updateQueue;
                                null !== L && (N.props = C.memoizedProps, N.state = C.memoizedState, Ui(C, L, N));
                                break;
                            case 3:
                                var I = C.updateQueue;
                                if (null !== I) {
                                    if (x = null, null !== C.child)
                                        switch (C.child.tag) {
                                            case 5:
                                                x = C.child.stateNode;
                                                break;
                                            case 2: x = C.child.stateNode;
                                        }
                                    Ui(C, I, x);
                                }
                                break;
                            case 5:
                                var R = C.stateNode;
                                null === M && 4 & C.effectTag && $r(C.type, C.memoizedProps) && R.focus();
                                break;
                            case 6:
                            case 4:
                            case 15:
                            case 16: break;
                            default: p("163");
                        }
                    }
                    if (128 & P) {
                        C = void 0;
                        var z = ra.ref;
                        if (null !== z) {
                            var F = ra.stateNode;
                            switch (ra.tag) {
                                case 5:
                                    C = F;
                                    break;
                                default: C = F;
                            }
                            "function" == typeof z ? z(C) : z.current = C;
                        }
                    }
                    var D = ra.nextEffect;
                    ra.nextEffect = null, ra = D;
                }
            }
            catch (e) {
                i = !0, O = e;
            }
            i && (null === ra && p("178"), fa(ra, O), null !== ra && (ra = ra.nextEffect));
        } Qo = ia = !1, Ti(t.stateNode), 0 === (t = n.current.expirationTime) && (aa = null), e.remainingExpirationTime = t; }
        function $a() { return !(null === Pa || Pa.timeRemaining() > Ra) && (Oa = !0); }
        function Ya(e) { null === ka && p("246"), ka.remainingExpirationTime = 0, Ta || (Ta = !0, Ca = e); }
        function Xa(e, t) { var n = Ma; Ma = !0; try {
            return e(t);
        }
        finally {
            (Ma = n) || xa || Wa();
        } }
        function Ka(e, t) { if (Ma && !Na) {
            Na = !0;
            try {
                return e(t);
            }
            finally {
                Na = !1;
            }
        } return e(t); }
        function Qa(e, t) { xa && p("187"); var n = Ma; Ma = !0; try {
            return ya(e, t);
        }
        finally {
            Ma = n, Wa();
        } }
        function Ja(e) { var t = Ma; Ma = !0; try {
            ya(e);
        }
        finally {
            (Ma = t) || xa || Ha(1, !1, null);
        } }
        function Za(e, t, n, r, i) { var o = t.current; if (n) {
            var a;
            n = n._reactInternalFiber;
            e: {
                for (2 === an(n) && 2 === n.tag || p("170"), a = n; 3 !== a.tag;) {
                    if (li(a)) {
                        a = a.stateNode.__reactInternalMemoizedMergedChildContext;
                        break e;
                    }
                    (a = a.return) || p("171");
                }
                a = a.stateNode.context;
            }
            n = li(n) ? hi(n, a) : a;
        }
        else
            n = f; return null === t.context ? t.context = n : t.pendingContext = n, t = i, (i = ji(r)).payload = { element: e }, null !== (t = void 0 === t ? null : t) && (i.callback = t), Li(o, i, r), ha(o, r), r; }
        function eu(e) { var t = e._reactInternalFiber; return void 0 === t && ("function" == typeof e.render ? p("188") : p("268", Object.keys(e))), null === (e = cn(t)) ? null : e.stateNode; }
        function tu(e, t, n, r) { var i = t.current; return Za(e, t, n, i = da(va(), i), r); }
        function nu(e) { if (!(e = e.current).child)
            return null; switch (e.child.tag) {
            case 5:
            default: return e.child.stateNode;
        } }
        function ru(e) { var t = e.findFiberByHostInstance; return function (e) { if ("undefined" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)
            return !1; var t = __REACT_DEVTOOLS_GLOBAL_HOOK__; if (t.isDisabled || !t.supportsFiber)
            return !0; try {
            var n = t.inject(e);
            Si = Oi(function (e) { return t.onCommitFiberRoot(n, e); }), Ei = Oi(function (e) { return t.onCommitFiberUnmount(n, e); });
        }
        catch (e) { } return !0; }(a({}, e, { findHostInstanceByFiber: function (e) { return null === (e = cn(e)) ? null : e.stateNode; }, findFiberByHostInstance: function (e) { return t ? t(e) : null; } })); }
        var iu = Xa, ou = function (e, t, n) { if (ja)
            return e(t, n); Ma || xa || 0 === Ea || (Ha(Ea, !1, null), Ea = 0); var r = ja, i = Ma; Ma = ja = !0; try {
            return e(t, n);
        }
        finally {
            ja = r, (Ma = i) || xa || Wa();
        } }, au = function () { xa || 0 === Ea || (Ha(Ea, !1, null), Ea = 0); };
        function uu(e) { this._expirationTime = pa(), this._root = e, this._callbacks = this._next = null, this._hasChildren = this._didComplete = !1, this._children = null, this._defer = !0; }
        function su() { this._callbacks = null, this._didCommit = !1, this._onCommit = this._onCommit.bind(this); }
        function cu(e, t, n) { this._internalRoot = ki(e, t, n); }
        function lu(e) { return !(!e || 1 !== e.nodeType && 9 !== e.nodeType && 11 !== e.nodeType && (8 !== e.nodeType || " react-mount-point-unstable " !== e.nodeValue)); }
        function fu(e, t, n, r, i) { lu(n) || p("200"); var o = n._reactRootContainer; if (o) {
            if ("function" == typeof i) {
                var a = i;
                i = function () { var e = nu(o._internalRoot); a.call(e); };
            }
            null != e ? o.legacy_renderSubtreeIntoContainer(e, t, i) : o.render(t, i);
        }
        else {
            if (o = n._reactRootContainer = function (e, t) { if (t || (t = !(!(t = e ? 9 === e.nodeType ? e.documentElement : e.firstChild : null) || 1 !== t.nodeType || !t.hasAttribute("data-reactroot"))), !t)
                for (var n; n = e.lastChild;)
                    e.removeChild(n); return new cu(e, !1, t); }(n, r), "function" == typeof i) {
                var u = i;
                i = function () { var e = nu(o._internalRoot); u.call(e); };
            }
            Ka(function () { null != e ? o.legacy_renderSubtreeIntoContainer(e, t, i) : o.render(t, i); });
        } return nu(o._internalRoot); }
        function pu(e, t) { var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null; return lu(t) || p("200"), function (e, t, n) { var r = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null; return { $$typeof: st, key: null == r ? null : "" + r, children: e, containerInfo: t, implementation: n }; }(e, t, null, n); }
        De.injectFiberControlledHostComponent(Vr), uu.prototype.render = function (e) { this._defer || p("250"), this._hasChildren = !0, this._children = e; var t = this._root._internalRoot, n = this._expirationTime, r = new su; return Za(e, t, null, n, r._onCommit), r; }, uu.prototype.then = function (e) { if (this._didComplete)
            e();
        else {
            var t = this._callbacks;
            null === t && (t = this._callbacks = []), t.push(e);
        } }, uu.prototype.commit = function () { var e = this._root._internalRoot, t = e.firstBatch; if (this._defer && null !== t || p("251"), this._hasChildren) {
            var n = this._expirationTime;
            if (t !== this) {
                this._hasChildren && (n = this._expirationTime = t._expirationTime, this.render(this._children));
                for (var r = null, i = t; i !== this;)
                    r = i, i = i._next;
                null === r && p("251"), r._next = i._next, this._next = t, e.firstBatch = this;
            }
            this._defer = !1, Ba(e, n), t = this._next, this._next = null, null !== (t = e.firstBatch = t) && t._hasChildren && t.render(t._children);
        }
        else
            this._next = null, this._defer = !1; }, uu.prototype._onComplete = function () { if (!this._didComplete) {
            this._didComplete = !0;
            var e = this._callbacks;
            if (null !== e)
                for (var t = 0; t < e.length; t++)
                    (0, e[t])();
        } }, su.prototype.then = function (e) { if (this._didCommit)
            e();
        else {
            var t = this._callbacks;
            null === t && (t = this._callbacks = []), t.push(e);
        } }, su.prototype._onCommit = function () { if (!this._didCommit) {
            this._didCommit = !0;
            var e = this._callbacks;
            if (null !== e)
                for (var t = 0; t < e.length; t++) {
                    var n = e[t];
                    "function" != typeof n && p("191", n), n();
                }
        } }, cu.prototype.render = function (e, t) { var n = this._internalRoot, r = new su; return null !== (t = void 0 === t ? null : t) && r.then(t), tu(e, n, null, r._onCommit), r; }, cu.prototype.unmount = function (e) { var t = this._internalRoot, n = new su; return null !== (e = void 0 === e ? null : e) && n.then(e), tu(null, t, null, n._onCommit), n; }, cu.prototype.legacy_renderSubtreeIntoContainer = function (e, t, n) { var r = this._internalRoot, i = new su; return null !== (n = void 0 === n ? null : n) && i.then(n), tu(t, r, e, i._onCommit), i; }, cu.prototype.createBatch = function () { var e = new uu(this), t = e._expirationTime, n = this._internalRoot, r = n.firstBatch; if (null === r)
            n.firstBatch = e, e._next = null;
        else {
            for (n = null; null !== r && r._expirationTime <= t;)
                n = r, r = r._next;
            e._next = r, null !== n && (n._next = e);
        } return e; }, $e = iu, Ye = ou, Xe = au;
        var du = { createPortal: pu, findDOMNode: function (e) { return null == e ? null : 1 === e.nodeType ? e : eu(e); }, hydrate: function (e, t, n) { return fu(null, e, t, !0, n); }, render: function (e, t, n) { return fu(null, e, t, !1, n); }, unstable_renderSubtreeIntoContainer: function (e, t, n, r) { return (null == e || void 0 === e._reactInternalFiber) && p("38"), fu(e, t, n, !1, r); }, unmountComponentAtNode: function (e) { return lu(e) || p("40"), !!e._reactRootContainer && (Ka(function () { fu(null, null, e, !1, function () { e._reactRootContainer = null; }); }), !0); }, unstable_createPortal: function () { return pu.apply(void 0, arguments); }, unstable_batchedUpdates: Xa, unstable_deferredUpdates: ma, flushSync: Qa, unstable_flushControlled: Ja, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { EventPluginHub: D, EventPluginRegistry: S, EventPropagators: ne, ReactControlledComponent: Ge, ReactDOMComponentTree: G, ReactDOMEventListener: In }, unstable_createRoot: function (e, t) { return new cu(e, !0, null != t && !0 === t.hydrate); } };
        ru({ findFiberByHostInstance: B, bundleType: 0, version: "16.4.0", rendererPackageName: "react-dom" });
        var hu = { default: du }, vu = hu && du || hu;
        e.exports = vu.default ? vu.default : vu;
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0, t.InnerSlider = void 0;
        var r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e; } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }, i = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var r in n)
                Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        } return e; }, o = v(n(7)), a = v(n(70)), u = v(n(165)), s = v(n(164)), c = v(n(53)), l = n(52), f = n(163), p = n(162), d = n(161), h = v(n(160));
        function v(e) { return e && e.__esModule ? e : { default: e }; }
        t.InnerSlider = function (e) { function t(n) { !function (e, t) { if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function"); }(this, t); var v = function (e, t) { if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || "object" != typeof t && "function" != typeof t ? e : t; }(this, e.call(this, n)); return v.listRefHandler = function (e) { return v.list = e; }, v.trackRefHandler = function (e) { return v.track = e; }, v.adaptHeight = function () { if (v.props.adaptiveHeight && v.list) {
            var e = v.list.querySelector('[data-index="' + v.state.currentSlide + '"]');
            v.list.style.height = (0, l.getHeight)(e) + "px";
        } }, v.componentWillMount = function () { if (v.ssrInit(), v.props.onInit && v.props.onInit(), v.props.lazyLoad) {
            var e = (0, l.getOnDemandLazySlides)(i({}, v.props, v.state));
            e.length > 0 && (v.setState(function (t) { return { lazyLoadedList: t.lazyLoadedList.concat(e) }; }), v.props.onLazyLoad && v.props.onLazyLoad(e));
        } }, v.componentDidMount = function () { var e = i({ listRef: v.list, trackRef: v.track }, v.props); v.updateState(e, !0, function () { v.adaptHeight(), v.props.autoplay && v.autoPlay("update"); }), "progressive" === v.props.lazyLoad && (v.lazyLoadTimer = setInterval(v.progressiveLazyLoad, 1e3)), v.ro = new h.default(function () { v.state.animating ? (v.onWindowResized(!1), v.callbackTimers.push(setTimeout(function () { return v.onWindowResized(); }, v.props.speed))) : v.onWindowResized(); }), v.ro.observe(v.list), Array.prototype.forEach.call(document.querySelectorAll(".slick-slide"), function (e) { e.onfocus = v.props.pauseOnFocus ? v.onSlideFocus : null, e.onblur = v.props.pauseOnFocus ? v.onSlideBlur : null; }), window && (window.addEventListener ? window.addEventListener("resize", v.onWindowResized) : window.attachEvent("onresize", v.onWindowResized)); }, v.componentWillUnmount = function () { v.animationEndCallback && clearTimeout(v.animationEndCallback), v.lazyLoadTimer && clearInterval(v.lazyLoadTimer), v.callbackTimers.length && (v.callbackTimers.forEach(function (e) { return clearTimeout(e); }), v.callbackTimers = []), window.addEventListener ? window.removeEventListener("resize", v.onWindowResized) : window.detachEvent("onresize", v.onWindowResized), v.autoplayTimer && clearInterval(v.autoplayTimer); }, v.componentWillReceiveProps = function (e) { var t = i({ listRef: v.list, trackRef: v.track }, e, v.state), n = !1, a = Object.keys(v.props), u = Array.isArray(a), s = 0; for (a = u ? a : a[Symbol.iterator]();;) {
            var c;
            if (u) {
                if (s >= a.length)
                    break;
                c = a[s++];
            }
            else {
                if ((s = a.next()).done)
                    break;
                c = s.value;
            }
            var l = c;
            if (!e.hasOwnProperty(l)) {
                n = !0;
                break;
            }
            if ("object" !== r(e[l]) && "function" != typeof e[l] && e[l] !== v.props[l]) {
                n = !0;
                break;
            }
        } v.updateState(t, n, function () { v.state.currentSlide >= o.default.Children.count(e.children) && v.changeSlide({ message: "index", index: o.default.Children.count(e.children) - e.slidesToShow, currentSlide: v.state.currentSlide }), e.autoplay ? v.autoPlay("update") : v.pause("paused"); }); }, v.componentDidUpdate = function () { if (v.checkImagesLoad(), v.props.onReInit && v.props.onReInit(), v.props.lazyLoad) {
            var e = (0, l.getOnDemandLazySlides)(i({}, v.props, v.state));
            e.length > 0 && (v.setState(function (t) { return { lazyLoadedList: t.lazyLoadedList.concat(e) }; }), v.props.onLazyLoad && v.props.onLazyLoad(e));
        } v.adaptHeight(); }, v.onWindowResized = function (e) { v.debouncedResize && v.debouncedResize.cancel(), v.debouncedResize = (0, s.default)(function () { return v.resizeWindow(e); }, 50), v.debouncedResize(); }, v.resizeWindow = function () { var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]; if (a.default.findDOMNode(v.track)) {
            var t = i({ listRef: v.list, trackRef: v.track }, v.props, v.state);
            v.updateState(t, e, function () { v.props.autoplay ? v.autoPlay("update") : v.pause("paused"); }), v.setState({ animating: !1 }), clearTimeout(v.animationEndCallback), delete v.animationEndCallback;
        } }, v.updateState = function (e, t, n) { var r = (0, l.initializedState)(e); e = i({}, e, r, { slideIndex: r.currentSlide }); var a = (0, l.getTrackLeft)(e); e = i({}, e, { left: a }); var u = (0, l.getTrackCSS)(e); (t || o.default.Children.count(v.props.children) !== o.default.Children.count(e.children)) && (r.trackStyle = u), v.setState(r, n); }, v.ssrInit = function () { if (v.props.variableWidth) {
            var e = 0, t = 0, n = [], r = (0, l.getPreClones)(i({}, v.props, v.state, { slideCount: v.props.children.length })), a = (0, l.getPostClones)(i({}, v.props, v.state, { slideCount: v.props.children.length }));
            v.props.children.forEach(function (t) { n.push(t.props.style.width), e += t.props.style.width; });
            for (var u = 0; u < r; u++)
                t += n[n.length - 1 - u], e += n[n.length - 1 - u];
            for (var s = 0; s < a; s++)
                e += n[s];
            for (var c = 0; c < v.state.currentSlide; c++)
                t += n[c];
            var f = { width: e + "px", left: -t + "px" };
            if (v.props.centerMode) {
                var p = n[v.state.currentSlide] + "px";
                f.left = "calc(" + f.left + " + (100% - " + p + ") / 2 ) ";
            }
            v.setState({ trackStyle: f });
        }
        else {
            var d = o.default.Children.count(v.props.children), h = i({}, v.props, v.state, { slideCount: d }), m = (0, l.getPreClones)(h) + (0, l.getPostClones)(h) + d, y = 100 / v.props.slidesToShow * m, g = 100 / m, b = -g * ((0, l.getPreClones)(h) + v.state.currentSlide) * y / 100;
            v.props.centerMode && (b += (100 - g * y / 100) / 2);
            var w = { width: y + "%", left: b + "%" };
            v.setState({ slideWidth: g + "%", trackStyle: w });
        } }, v.checkImagesLoad = function () { var e = document.querySelectorAll(".slick-slide img"), t = e.length, n = 0; Array.prototype.forEach.call(e, function (e) { var r = function () { return ++n && n >= t && v.onWindowResized(); }; if (e.onclick) {
            var i = e.onclick;
            e.onclick = function () { i(), e.parentNode.focus(); };
        }
        else
            e.onclick = function () { return e.parentNode.focus(); }; e.onload || (v.props.lazyLoad ? e.onload = function () { v.adaptHeight(), v.callbackTimers.push(setTimeout(v.onWindowResized, v.props.speed)); } : (e.onload = r, e.onerror = function () { r(), v.props.onLazyLoadError && v.props.onLazyLoadError(); })); }); }, v.progressiveLazyLoad = function () { for (var e = [], t = i({}, v.props, v.state), n = v.state.currentSlide; n < v.state.slideCount + (0, l.getPostClones)(t); n++)
            if (v.state.lazyLoadedList.indexOf(n) < 0) {
                e.push(n);
                break;
            } for (var r = v.state.currentSlide - 1; r >= -(0, l.getPreClones)(t); r--)
            if (v.state.lazyLoadedList.indexOf(r) < 0) {
                e.push(r);
                break;
            } e.length > 0 ? (v.setState(function (t) { return { lazyLoadedList: t.lazyLoadedList.concat(e) }; }), v.props.onLazyLoad && v.props.onLazyLoad(e)) : v.lazyLoadTimer && (clearInterval(v.lazyLoadTimer), delete v.lazyLoadTimer); }, v.slideHandler = function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = v.props, r = n.asNavFor, o = n.currentSlide, a = n.beforeChange, u = n.onLazyLoad, s = n.speed, c = n.afterChange, f = (0, l.slideHandler)(i({ index: e }, v.props, v.state, { trackRef: v.track, useCSS: v.props.useCSS && !t })), p = f.state, d = f.nextState; if (p) {
            a && a(o, p.currentSlide);
            var h = p.lazyLoadedList.filter(function (e) { return v.state.lazyLoadedList.indexOf(e) < 0; });
            u && h.length > 0 && u(h), v.setState(p, function () { r && r.innerSlider.state.currentSlide !== o && r.innerSlider.slideHandler(e), d && (v.animationEndCallback = setTimeout(function () { var e = d.animating, t = function (e, t) { var n = {}; for (var r in e)
                t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]); return n; }(d, ["animating"]); v.setState(t, function () { v.callbackTimers.push(setTimeout(function () { return v.setState({ animating: e }); }, 10)), c && c(p.currentSlide), delete v.animationEndCallback; }); }, s)); });
        } }, v.changeSlide = function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = i({}, v.props, v.state), r = (0, l.changeSlide)(n, e); (0 === r || r) && (!0 === t ? v.slideHandler(r, t) : v.slideHandler(r)); }, v.clickHandler = function (e) { !1 === v.clickable && (e.stopPropagation(), e.preventDefault()), v.clickable = !0; }, v.keyHandler = function (e) { var t = (0, l.keyHandler)(e, v.props.accessibility, v.props.rtl); "" !== t && v.changeSlide({ message: t }); }, v.selectHandler = function (e) { v.changeSlide(e); }, v.disableBodyScroll = function () { window.ontouchmove = function (e) { (e = e || window.event).preventDefault && e.preventDefault(), e.returnValue = !1; }; }, v.enableBodyScroll = function () { window.ontouchmove = null; }, v.swipeStart = function (e) { v.props.verticalSwiping && v.disableBodyScroll(); var t = (0, l.swipeStart)(e, v.props.swipe, v.props.draggable); "" !== t && v.setState(t); }, v.swipeMove = function (e) { var t = (0, l.swipeMove)(e, i({}, v.props, v.state, { trackRef: v.track, listRef: v.list, slideIndex: v.state.currentSlide })); t && (t.swiping && (v.clickable = !1), v.setState(t)); }, v.swipeEnd = function (e) { var t = (0, l.swipeEnd)(e, i({}, v.props, v.state, { trackRef: v.track, listRef: v.list, slideIndex: v.state.currentSlide })); if (t) {
            var n = t.triggerSlideHandler;
            delete t.triggerSlideHandler, v.setState(t), void 0 !== n && (v.slideHandler(n), v.props.verticalSwiping && v.enableBodyScroll());
        } }, v.slickPrev = function () { v.callbackTimers.push(setTimeout(function () { return v.changeSlide({ message: "previous" }); }, 0)); }, v.slickNext = function () { v.callbackTimers.push(setTimeout(function () { return v.changeSlide({ message: "next" }); }, 0)); }, v.slickGoTo = function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; if (e = Number(e), isNaN(e))
            return ""; v.callbackTimers.push(setTimeout(function () { return v.changeSlide({ message: "index", index: e, currentSlide: v.state.currentSlide }, t); }, 0)); }, v.play = function () { var e; if (v.props.rtl)
            e = v.state.currentSlide - v.props.slidesToScroll;
        else {
            if (!(0, l.canGoNext)(i({}, v.props, v.state)))
                return !1;
            e = v.state.currentSlide + v.props.slidesToScroll;
        } v.slideHandler(e); }, v.autoPlay = function (e) { v.autoplayTimer && clearInterval(v.autoplayTimer); var t = v.state.autoplaying; if ("update" === e) {
            if ("hovered" === t || "focused" === t || "paused" === t)
                return;
        }
        else if ("leave" === e) {
            if ("paused" === t || "focused" === t)
                return;
        }
        else if ("blur" === e && ("paused" === t || "hovered" === t))
            return; v.autoplayTimer = setInterval(v.play, v.props.autoplaySpeed + 50), v.setState({ autoplaying: "playing" }); }, v.pause = function (e) { v.autoplayTimer && (clearInterval(v.autoplayTimer), v.autoplayTimer = null); var t = v.state.autoplaying; "paused" === e ? v.setState({ autoplaying: "paused" }) : "focused" === e ? "hovered" !== t && "playing" !== t || v.setState({ autoplaying: "focused" }) : "playing" === t && v.setState({ autoplaying: "hovered" }); }, v.onDotsOver = function () { return v.props.autoplay && v.pause("hovered"); }, v.onDotsLeave = function () { return v.props.autoplay && "hovered" === v.state.autoplaying && v.autoPlay("leave"); }, v.onTrackOver = function () { return v.props.autoplay && v.pause("hovered"); }, v.onTrackLeave = function () { return v.props.autoplay && "hovered" === v.state.autoplaying && v.autoPlay("leave"); }, v.onSlideFocus = function () { return v.props.autoplay && v.pause("focused"); }, v.onSlideBlur = function () { return v.props.autoplay && "focused" === v.state.autoplaying && v.autoPlay("blur"); }, v.render = function () { var e, t, n, r = (0, c.default)("slick-slider", v.props.className, { "slick-vertical": v.props.vertical, "slick-initialized": !0 }), a = i({}, v.props, v.state), u = (0, l.extractObject)(a, ["fade", "cssEase", "speed", "infinite", "centerMode", "focusOnSelect", "currentSlide", "lazyLoad", "lazyLoadedList", "rtl", "slideWidth", "slideHeight", "listHeight", "vertical", "slidesToShow", "slidesToScroll", "slideCount", "trackStyle", "variableWidth", "unslick", "centerPadding"]), s = v.props.pauseOnHover; if (u = i({}, u, { onMouseEnter: s ? v.onTrackOver : null, onMouseLeave: s ? v.onTrackLeave : null, onMouseOver: s ? v.onTrackOver : null, focusOnSelect: v.props.focusOnSelect ? v.selectHandler : null }), !0 === v.props.dots && v.state.slideCount >= v.props.slidesToShow) {
            var h = (0, l.extractObject)(a, ["dotsClass", "slideCount", "slidesToShow", "currentSlide", "slidesToScroll", "clickHandler", "children", "customPaging", "infinite", "appendDots"]), m = v.props.pauseOnDotsHover;
            h = i({}, h, { clickHandler: v.changeSlide, onMouseEnter: m ? v.onDotsLeave : null, onMouseOver: m ? v.onDotsOver : null, onMouseLeave: m ? v.onDotsLeave : null }), e = o.default.createElement(p.Dots, h);
        } var y = (0, l.extractObject)(a, ["infinite", "centerMode", "currentSlide", "slideCount", "slidesToShow", "prevArrow", "nextArrow"]); y.clickHandler = v.changeSlide, v.props.arrows && (t = o.default.createElement(d.PrevArrow, y), n = o.default.createElement(d.NextArrow, y)); var g = null; v.props.vertical && (g = { height: v.state.listHeight }); var b = null; !1 === v.props.vertical ? !0 === v.props.centerMode && (b = { padding: "0px " + v.props.centerPadding }) : !0 === v.props.centerMode && (b = { padding: v.props.centerPadding + " 0px" }); var w = i({}, g, b), _ = v.props.touchMove, x = { className: "slick-list", style: w, onClick: v.clickHandler, onMouseDown: _ ? v.swipeStart : null, onMouseMove: v.state.dragging && _ ? v.swipeMove : null, onMouseUp: _ ? v.swipeEnd : null, onMouseLeave: v.state.dragging && _ ? v.swipeEnd : null, onTouchStart: _ ? v.swipeStart : null, onTouchMove: v.state.dragging && _ ? v.swipeMove : null, onTouchEnd: _ ? v.swipeEnd : null, onTouchCancel: v.state.dragging && _ ? v.swipeEnd : null, onKeyDown: v.props.accessibility ? v.keyHandler : null }, k = { className: r, dir: "ltr" }; return v.props.unslick && (x = { className: "slick-list" }, k = { className: r }), o.default.createElement("div", k, v.props.unslick ? "" : t, o.default.createElement("div", i({ ref: v.listRefHandler }, x), o.default.createElement(f.Track, i({ ref: v.trackRefHandler }, u), v.props.children)), v.props.unslick ? "" : n, v.props.unslick ? "" : e); }, v.list = null, v.track = null, v.state = i({}, u.default, { currentSlide: v.props.initialSlide, slideCount: o.default.Children.count(v.props.children) }), v.callbackTimers = [], v.clickable = !0, v.debouncedResize = null, v; } return function (e, t) { if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t); }(t, e), t; }(o.default.Component);
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var r in n)
                Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        } return e; }, i = c(n(7)), o = n(173), a = c(n(159)), u = c(n(157)), s = n(52);
        function c(e) { return e && e.__esModule ? e : { default: e }; }
        var l = (0, s.canUseDOM)() && n(156), f = function (e) { function t(n) { !function (e, t) { if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function"); }(this, t); var r = function (e, t) { if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || "object" != typeof t && "function" != typeof t ? e : t; }(this, e.call(this, n)); return r.innerSliderRefHandler = function (e) { return r.innerSlider = e; }, r.slickPrev = function () { return r.innerSlider.slickPrev(); }, r.slickNext = function () { return r.innerSlider.slickNext(); }, r.slickGoTo = function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; return r.innerSlider.slickGoTo(e, t); }, r.slickPause = function () { return r.innerSlider.pause("paused"); }, r.slickPlay = function () { return r.innerSlider.autoPlay("play"); }, r.state = { breakpoint: null }, r._responsiveMediaHandlers = [], r; } return function (e, t) { if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t); }(t, e), t.prototype.media = function (e, t) { l.register(e, t), this._responsiveMediaHandlers.push({ query: e, handler: t }); }, t.prototype.componentWillMount = function () { var e = this; if (this.props.responsive) {
            var t = this.props.responsive.map(function (e) { return e.breakpoint; });
            t.sort(function (e, t) { return e - t; }), t.forEach(function (n, r) { var i = void 0; i = 0 === r ? (0, a.default)({ minWidth: 0, maxWidth: n }) : (0, a.default)({ minWidth: t[r - 1] + 1, maxWidth: n }), (0, s.canUseDOM)() && e.media(i, function () { e.setState({ breakpoint: n }); }); });
            var n = (0, a.default)({ minWidth: t.slice(-1)[0] });
            (0, s.canUseDOM)() && this.media(n, function () { e.setState({ breakpoint: null }); });
        } }, t.prototype.componentWillUnmount = function () { this._responsiveMediaHandlers.forEach(function (e) { l.unregister(e.query, e.handler); }); }, t.prototype.render = function () { var e, t, n = this; (e = this.state.breakpoint ? "unslick" === (t = this.props.responsive.filter(function (e) { return e.breakpoint === n.state.breakpoint; }))[0].settings ? "unslick" : r({}, u.default, this.props, t[0].settings) : r({}, u.default, this.props)).centerMode && (e.slidesToScroll, e.slidesToScroll = 1), e.fade && (e.slidesToShow, e.slidesToScroll, e.slidesToShow = 1, e.slidesToScroll = 1); var a = i.default.Children.toArray(this.props.children); a = a.filter(function (e) { return "string" == typeof e ? !!e.trim() : !!e; }), e.variableWidth && (e.rows > 1 || e.slidesPerRow > 1) && (console.warn("variableWidth is not supported in case of rows > 1 or slidesPerRow > 1"), e.variableWidth = !1); for (var s = [], c = null, l = 0; l < a.length; l += e.rows * e.slidesPerRow) {
            for (var f = [], p = l; p < l + e.rows * e.slidesPerRow; p += e.slidesPerRow) {
                for (var d = [], h = p; h < p + e.slidesPerRow && (e.variableWidth && a[h].props.style && (c = a[h].props.style.width), !(h >= a.length)); h += 1)
                    d.push(i.default.cloneElement(a[h], { key: 100 * l + 10 * p + h, tabIndex: -1, style: { width: 100 / e.slidesPerRow + "%", display: "inline-block" } }));
                f.push(i.default.createElement("div", { key: 10 * l + p }, d));
            }
            e.variableWidth ? s.push(i.default.createElement("div", { key: l, style: { width: c } }, f)) : s.push(i.default.createElement("div", { key: l }, f));
        } if ("unslick" === e) {
            var v = "regular slider " + (this.props.className || "");
            return i.default.createElement("div", { className: v }, s);
        } return s.length <= e.slidesToShow && (e.unslick = !0), i.default.createElement(o.InnerSlider, r({ ref: this.innerSliderRefHandler }, e), s); }, t; }(i.default.Component);
        t.default = f;
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r, i = n(174), o = (r = i) && r.__esModule ? r : { default: r };
        t.default = o.default;
    }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (var n in t)
            t.hasOwnProperty(n) && (e[n] = t[n]); }, function (e, t) { function n() { this.constructor = e; } r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n); }), o = this && this.__assign || Object.assign || function (e) { for (var t, n = 1, r = arguments.length; n < r; n++)
            for (var i in t = arguments[n])
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]); return e; };
        Object.defineProperty(t, "__esModule", { value: !0 });
        var a = n(7), u = n(175);
        n(152), n(150), n(148);
        var s = function (e) { function t() { return null !== e && e.apply(this, arguments) || this; } return i(t, e), t.prototype.render = function () { return a.createElement(u.default, o({ className: "product-carousel" }, { autoplay: !0, autoplaySpeed: 6e3, centerPadding: "60px", className: "center", infinite: !0, swipeToSlide: !0 }), a.createElement("div", { className: "product-carousel__product-container" }, a.createElement("img", { className: "product-carousel__product-image", src: "http://www.funnycatsite.com/pictures/Fancy_Cat6872.jpg" })), a.createElement("div", { className: "product-carousel__product-container" }, a.createElement("img", { className: "product-carousel__product-image", src: "https://media.daysoftheyear.com/20171223125918/happy-cat-month-1.jpg" })), a.createElement("div", { className: "product-carousel__product-container" }, a.createElement("img", { className: "product-carousel__product-image", src: "http://i0.kym-cdn.com/photos/images/original/001/163/583/0d7.jpg" }))); }, t; }(a.Component);
        t.ProductCarousel = s, t.default = s;
    }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (var n in t)
            t.hasOwnProperty(n) && (e[n] = t[n]); }, function (e, t) { function n() { this.constructor = e; } r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n); });
        Object.defineProperty(t, "__esModule", { value: !0 });
        var o = n(7), a = n(176), u = n(71);
        n(146);
        var s = function (e) { function t() { return null !== e && e.apply(this, arguments) || this; } return i(t, e), t.prototype.render = function () { return o.createElement("div", { className: "products" }, o.createElement("div", { className: "products__container-description" }, o.createElement("h5", { className: "products__title" }, "Products"), o.createElement("p", { className: "products__description" }, "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur."), o.createElement(u.default, { Text: "Learn More", Color: "#00B99A" })), o.createElement("div", { className: "products__images" }, o.createElement(a.default, null))); }, t; }(o.Component);
        t.Products = s, t.default = s;
    }, , function (e, t, n) { }, , function (e, t, n) { }, , function (e, t, n) { }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (var n in t)
            t.hasOwnProperty(n) && (e[n] = t[n]); }, function (e, t) { function n() { this.constructor = e; } r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n); });
        Object.defineProperty(t, "__esModule", { value: !0 });
        var o = n(7);
        n(183);
        var a = n(71);
        n(179);
        var u = function (e) { function t() { return null !== e && e.apply(this, arguments) || this; } return i(t, e), t.prototype.render = function () { return o.createElement("div", { className: "about-us" }, o.createElement("div", { className: "about-us__container-description" }, o.createElement("h5", { className: "about-us__title" }, "Who are we?"), o.createElement("p", { className: "about-us__description" }, "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur."), o.createElement(a.default, { Text: "Learn More", Color: "#EA597A" })), o.createElement("div", { className: "about-us__images" }, o.createElement("img", { src: "http://i0.kym-cdn.com/entries/icons/original/000/000/888/VanillaHappyCat.jpg" }))); }, t; }(o.Component);
        t.AboutUs = u, t.default = u;
    }, , function (e, t, n) { }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (var n in t)
            t.hasOwnProperty(n) && (e[n] = t[n]); }, function (e, t) { function n() { this.constructor = e; } r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n); });
        Object.defineProperty(t, "__esModule", { value: !0 });
        var o = n(7);
        n(186);
        var a = function (e) { function t(t) { var n = e.call(this, t) || this; return n.state = {}, n.handleNavigationIconClick = n.handleNavigationIconClick.bind(n), n; } return i(t, e), t.prototype.render = function () { return o.createElement("div", { className: "navigation-icons" }, o.createElement("div", { className: "navigation-icons__container" }, o.createElement("p", { className: "navigation-icons__icon", "data-sibling-id": "aboutUsMount", onClick: this.handleNavigationIconClick }, "About Us"), o.createElement("p", { className: "navigation-icons__icon", "data-sibling-id": "productsMount", onClick: this.handleNavigationIconClick }, "Products")), o.createElement("img", { className: "navigation-icons__icon navigation-icons__company-logo", src: "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/1280px-React-icon.svg.png" }), o.createElement("div", { className: "navigation-icons__container" }, o.createElement("p", { className: "navigation-icons__icon", "data-sibling-id": "servicesMount", onClick: this.handleNavigationIconClick }, "Services"), o.createElement("p", { className: "navigation-icons__icon", "data-sibling-id": "servicesMount", onClick: this.handleNavigationIconClick }, "Contact Us"))); }, t.prototype.handleNavigationIconClick = function (e) { var t = e.target; null != t && document.getElementById(t.dataset.siblingId).scrollIntoView({ behavior: "smooth" }); }, t; }(o.Component);
        t.NavigationIcons = a, t.default = a;
    }, function (e, t) { e.exports = { prefix: "fas", iconName: "rocket", icon: [512, 512, [], "f135", "M505.1 19.1C503.8 13 499 8.2 492.9 6.9 460.7 0 435.5 0 410.4 0 307.2 0 245.3 55.2 199.1 128H94.9c-18.2 0-34.8 10.3-42.9 26.5L2.6 253.3c-8 16 3.6 34.7 21.5 34.7h95.1c-5.9 12.8-11.9 25.5-18 37.7-3.1 6.2-1.9 13.6 3 18.5l63.6 63.6c4.9 4.9 12.3 6.1 18.5 3 12.2-6.1 24.9-12 37.7-17.9V488c0 17.8 18.8 29.4 34.7 21.5l98.7-49.4c16.3-8.1 26.5-24.8 26.5-42.9V312.8c72.6-46.3 128-108.4 128-211.1.1-25.2.1-50.4-6.8-82.6zM400 160c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z"] }; }, function (e, t, n) {
        "use strict";
        e.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    }, function (e, t, n) {
        "use strict";
        var r = n(72), i = n(73), o = n(189);
        e.exports = function () { function e(e, t, n, r, a, u) { u !== o && i(!1, "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"); } function t() { return e; } e.isRequired = e; var n = { array: e, bool: e, func: e, number: e, object: e, string: e, symbol: e, any: e, arrayOf: t, element: e, instanceOf: t, node: e, objectOf: t, oneOf: t, oneOfType: t, shape: t, exact: t }; return n.checkPropTypes = r, n.PropTypes = n, n; };
    }, function (e, t, n) {
        "use strict";
        n.r(t), function (e) { var r = n(69), i = n(5), o = n.n(i), a = n(7), u = n.n(a), s = "undefined" != typeof window ? window : void 0 !== e ? e : "undefined" != typeof self ? self : {}; var c, l = (function (e) { var t, n, r, i, o, a, u, c, l, f, p, d, h, v, m; t = s, n = function (e, t, r) { if (!c(t) || f(t) || p(t) || d(t) || u(t))
            return t; var i, o = 0, a = 0; if (l(t))
            for (i = [], a = t.length; o < a; o++)
                i.push(n(e, t[o], r));
        else
            for (var s in i = {}, t)
                Object.prototype.hasOwnProperty.call(t, s) && (i[e(s, r)] = n(e, t[s], r)); return i; }, r = function (e) { return h(e) ? e : (e = e.replace(/[\-_\s]+(.)?/g, function (e, t) { return t ? t.toUpperCase() : ""; })).substr(0, 1).toLowerCase() + e.substr(1); }, i = function (e) { var t = r(e); return t.substr(0, 1).toUpperCase() + t.substr(1); }, o = function (e, t) { return function (e, t) { var n = (t = t || {}).separator || "_", r = t.split || /(?=[A-Z])/; return e.split(r).join(n); }(e, t).toLowerCase(); }, a = Object.prototype.toString, u = function (e) { return "function" == typeof e; }, c = function (e) { return e === Object(e); }, l = function (e) { return "[object Array]" == a.call(e); }, f = function (e) { return "[object Date]" == a.call(e); }, p = function (e) { return "[object RegExp]" == a.call(e); }, d = function (e) { return "[object Boolean]" == a.call(e); }, h = function (e) { return (e -= 0) == e; }, v = function (e, t) { var n = t && "process" in t ? t.process : t; return "function" != typeof n ? e : function (t, r) { return n(t, e, r); }; }, m = { camelize: r, decamelize: o, pascalize: i, depascalize: o, camelizeKeys: function (e, t) { return n(v(r, t), e); }, decamelizeKeys: function (e, t) { return n(v(o, t), e, t); }, pascalizeKeys: function (e, t) { return n(v(i, t), e); }, depascalizeKeys: function () { return this.decamelizeKeys.apply(this, arguments); } }, e.exports ? e.exports = m : t.humps = m; }(c = { exports: {} }, c.exports), c.exports), f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e; } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }, p = (function () { function e(e) { this.value = e; } function t(t) { var n, r; function i(n, r) { try {
            var a = t[n](r), u = a.value;
            u instanceof e ? Promise.resolve(u.value).then(function (e) { i("next", e); }, function (e) { i("throw", e); }) : o(a.done ? "return" : "normal", a.value);
        }
        catch (e) {
            o("throw", e);
        } } function o(e, t) { switch (e) {
            case "return":
                n.resolve({ value: t, done: !0 });
                break;
            case "throw":
                n.reject(t);
                break;
            default: n.resolve({ value: t, done: !1 });
        } (n = n.next) ? i(n.key, n.arg) : r = null; } this._invoke = function (e, t) { return new Promise(function (o, a) { var u = { key: e, arg: t, resolve: o, reject: a, next: null }; r ? r = r.next = u : (n = r = u, i(e, t)); }); }, "function" != typeof t.return && (this.return = void 0); } "function" == typeof Symbol && Symbol.asyncIterator && (t.prototype[Symbol.asyncIterator] = function () { return this; }), t.prototype.next = function (e) { return this._invoke("next", e); }, t.prototype.throw = function (e) { return this._invoke("throw", e); }, t.prototype.return = function (e) { return this._invoke("return", e); }; }(), function (e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; }), d = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var r in n)
                Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        } return e; }, h = function (e, t) { var n = {}; for (var r in e)
            t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]); return n; }, v = function (e) { if (Array.isArray(e)) {
            for (var t = 0, n = Array(e.length); t < e.length; t++)
                n[t] = e[t];
            return n;
        } return Array.from(e); }; function m(e, t) { var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, r = (t.children || []).map(m.bind(null, e)), i = Object.keys(t.attributes || {}).reduce(function (e, n) { var r = t.attributes[n]; switch (n) {
            case "class":
                e.attrs.className = r, delete t.attributes.class;
                break;
            case "style":
                e.attrs.style = r.split(";").map(function (e) { return e.trim(); }).filter(function (e) { return e; }).reduce(function (e, t) { var n, r = t.indexOf(":"), i = l.camelize(t.slice(0, r)), o = t.slice(r + 1).trim(); return i.startsWith("webkit") ? e[(n = i, n.charAt(0).toUpperCase() + n.slice(1))] = o : e[i] = o, e; }, {});
                break;
            default: 0 === n.indexOf("aria-") || 0 === n.indexOf("data-") ? e.attrs[n.toLowerCase()] = r : e.attrs[l.camelize(n)] = r;
        } return e; }, { attrs: {} }), o = n.style, a = void 0 === o ? {} : o, u = h(n, ["style"]); return i.attrs.style = d({}, i.attrs.style, a), e.apply(void 0, [t.tag, d({}, i.attrs, u)].concat(v(r))); } var y = !1; try {
            y = !0;
        }
        catch (e) { } var g = function () { var e; !y && console && "function" == typeof console.error && (e = console).error.apply(e, arguments); }; function b(e, t) { return Array.isArray(t) && t.length > 0 || !Array.isArray(t) && t ? p({}, e, t) : {}; } function w(e) { return null === e ? null : "object" === (void 0 === e ? "undefined" : f(e)) && e.prefix && e.iconName ? e : Array.isArray(e) && 2 === e.length ? { prefix: e[0], iconName: e[1] } : "string" == typeof e ? { prefix: "fas", iconName: e } : void 0; } function _(e) { var t = e.icon, n = e.mask, i = e.symbol, o = e.className, a = w(t), s = b("classes", [].concat(v(function (e) { var t, n = (t = { "fa-spin": e.spin, "fa-pulse": e.pulse, "fa-fw": e.fixedWidth, "fa-border": e.border, "fa-li": e.listItem, "fa-flip-horizontal": "horizontal" === e.flip || "both" === e.flip, "fa-flip-vertical": "vertical" === e.flip || "both" === e.flip }, p(t, "fa-" + e.size, null !== e.size), p(t, "fa-rotate-" + e.rotation, null !== e.rotation), p(t, "fa-pull-" + e.pull, null !== e.pull), t); return Object.keys(n).map(function (e) { return n[e] ? e : null; }).filter(function (e) { return e; }); }(e)), v(o.split(" ")))), c = b("transform", "string" == typeof e.transform ? r.a.parse.transform(e.transform) : e.transform), l = b("mask", w(n)), f = r.a.icon(a, d({}, s, c, l, { symbol: i })); if (!f)
            return g("Could not find icon", a), null; var h = f.abstract, y = m.bind(null, u.a.createElement), x = {}; return Object.keys(e).forEach(function (t) { _.defaultProps.hasOwnProperty(t) || (x[t] = e[t]); }), y(h[0], x); } _.displayName = "FontAwesomeIcon", _.propTypes = { border: o.a.bool, className: o.a.string, mask: o.a.oneOfType([o.a.object, o.a.array, o.a.string]), fixedWidth: o.a.bool, flip: o.a.oneOf(["horizontal", "vertical", "both"]), icon: o.a.oneOfType([o.a.object, o.a.array, o.a.string]), listItem: o.a.bool, pull: o.a.oneOf(["right", "left"]), pulse: o.a.bool, name: o.a.string, rotation: o.a.oneOf([90, 180, 270]), size: o.a.oneOf(["lg", "xs", "sm", "1x", "2x", "3x", "4x", "5x", "6x", "7x", "8x", "9x", "10x"]), spin: o.a.bool, symbol: o.a.oneOfType([o.a.bool, o.a.string]), transform: o.a.oneOfType([o.a.string, o.a.object]) }, _.defaultProps = { border: !1, className: "", mask: null, fixedWidth: !1, flip: null, icon: null, listItem: !1, pull: null, pulse: !1, name: "", rotation: null, size: null, spin: !1, symbol: !1, transform: null }, r.a.noAuto(), t.default = _; }.call(this, n(51));
    }, , function (e, t, n) { }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (var n in t)
            t.hasOwnProperty(n) && (e[n] = t[n]); }, function (e, t) { function n() { this.constructor = e; } r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n); });
        Object.defineProperty(t, "__esModule", { value: !0 });
        var o = n(7);
        n(193);
        var a = n(191), u = n(188), s = function (e) { function t() { return null !== e && e.apply(this, arguments) || this; } return i(t, e), t.prototype.render = function () { return o.createElement("div", { className: "container-company-motto" }, o.createElement("div", { className: "company-name" }, o.createElement("p", null, "Selstice")), o.createElement("div", { className: "company-motto" }, o.createElement("p", null, "Come fly with us"), o.createElement("div", { className: "container-icon" }, o.createElement(a.default, { icon: u })))); }, t; }(o.Component);
        t.CompanyMotto = s, t.default = s;
    }, , function (e, t, n) { }, , function (e, t, n) { }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (var n in t)
            t.hasOwnProperty(n) && (e[n] = t[n]); }, function (e, t) { function n() { this.constructor = e; } r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n); });
        Object.defineProperty(t, "__esModule", { value: !0 });
        var o = n(7);
        n(198);
        var a = function (e) { function t() { return null !== e && e.apply(this, arguments) || this; } return i(t, e), t.prototype.render = function () { return o.createElement("div", { className: "container-moon" }, o.createElement("div", { className: "moon" }, o.createElement("div", { className: "crater small" }), o.createElement("div", { className: "crater medium" }), o.createElement("div", { className: "crater large" }))); }, t; }(o.Component);
        t.Moon = a, t.default = a;
    }, , function (e, t, n) { }, function (e, t, n) { var r; "undefined" != typeof self && self, e.exports = (r = n(7), function (e) { function t(r) { if (n[r])
        return n[r].exports; var i = n[r] = { i: r, l: !1, exports: {} }; return e[r].call(i.exports, i, i.exports, t), i.l = !0, i.exports; } var n = {}; return t.m = e, t.c = n, t.d = function (e, n, r) { t.o(e, n) || Object.defineProperty(e, n, { configurable: !1, enumerable: !0, get: r }); }, t.n = function (e) { var n = e && e.__esModule ? function () { return e.default; } : function () { return e; }; return t.d(n, "a", n), n; }, t.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t); }, t.p = "", t(t.s = 2); }([function (e, t, n) {
            "use strict";
            function r(e) { for (var n in e)
                t.hasOwnProperty(n) || (t[n] = e[n]); }
            Object.defineProperty(t, "__esModule", { value: !0 });
            var i = n(7);
            t.Interact = i.default;
            var o = n(8);
            t.Modes = o.default;
            var a = n(9);
            t.Particle = a.default;
            var u = n(10);
            t.ParticleManager = u.default;
            var s = n(11);
            t.ParticlesLibrary = s.default;
            var c = n(12);
            t.Vendors = c.default, r(n(13)), r(n(14));
        }, function (e, t) { e.exports = r; }, function (e, t, n) {
            "use strict";
            Object.defineProperty(t, "__esModule", { value: !0 });
            var r = n(3);
            t.Particles = r.default, t.default = r.default;
        }, function (e, t, n) {
            "use strict";
            var r = function () { function e(e, t) { for (var n = 0; n < t.length; n++) {
                var r = t[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
            } } return function (t, n, r) { return n && e(t.prototype, n), r && e(t, r), t; }; }();
            Object.defineProperty(t, "__esModule", { value: !0 });
            var i = n(1), o = n(1), a = n(4), u = n(0), s = function (e) { function t(e) { !function (e, t) { if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function"); }(this, t); var n = function (e, t) { if (!e)
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || "object" != typeof t && "function" != typeof t ? e : t; }(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e)); return n.state = { canvas: void 0, library: void 0 }, n.loadCanvas = n.loadCanvas.bind(n), n; } return function (e, t) { if ("function" != typeof t && null !== t)
                throw new TypeError("Super expression must either be null or a function, not " + typeof t); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t); }(t, e), r(t, [{ key: "refresh", value: function (e) { var t = this; this.state.canvas && (this.destroy(), this.setState({ library: new u.ParticlesLibrary(e.params) }, function () { t.loadCanvas(t.state.canvas); })); } }, { key: "destroy", value: function () { this.state.library.destroy(); } }, { key: "loadCanvas", value: function (e) { var t = this; e && this.setState({ canvas: e }, function () { t.state.library.loadCanvas(t.state.canvas), t.state.library.start(); }); } }, { key: "componentWillUpdate", value: function (e) { this.props !== e && this.refresh(e); } }, { key: "forceUpdate", value: function () { this.refresh(this.props), function e(t, n, r) { null === t && (t = Function.prototype); var i = Object.getOwnPropertyDescriptor(t, n); if (void 0 === i) {
                        var o = Object.getPrototypeOf(t);
                        return null === o ? void 0 : e(o, n, r);
                    } if ("value" in i)
                        return i.value; var a = i.get; return void 0 !== a ? a.call(r) : void 0; }(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "forceUpdate", this).call(this); } }, { key: "componentWillMount", value: function () { this.setState({ library: new u.ParticlesLibrary(this.props.params) }); } }, { key: "componentWillUnmount", value: function () { this.destroy(), this.setState({ library: void 0 }); } }, { key: "render", value: function () { var e = this.props, t = e.width, n = e.height, r = e.className, o = e.canvasClassName; return i.createElement("div", { className: r }, i.createElement("canvas", { ref: this.loadCanvas, className: o, style: u.deepExtend(a(this.props.style), { width: t, height: n }) })); } }]), t; }(o.Component);
            s.defaultProps = { width: "100%", height: "100%", params: {}, style: {} }, t.default = s;
        }, function (e, t, n) { (function (e, n) { function r(e, t) { return e.set(t[0], t[1]), e; } function i(e, t) { return e.add(t), e; } function o(e, t, n, r) { var i = -1, o = e ? e.length : 0; for (r && o && (n = e[++i]); ++i < o;)
            n = t(n, e[i], i, e); return n; } function a(e) { var t = !1; if (null != e && "function" != typeof e.toString)
            try {
                t = !!(e + "");
            }
            catch (e) { } return t; } function u(e) { var t = -1, n = Array(e.size); return e.forEach(function (e, r) { n[++t] = [r, e]; }), n; } function s(e, t) { return function (n) { return e(t(n)); }; } function c(e) { var t = -1, n = Array(e.size); return e.forEach(function (e) { n[++t] = e; }), n; } function l(e) { var t = -1, n = e ? e.length : 0; for (this.clear(); ++t < n;) {
            var r = e[t];
            this.set(r[0], r[1]);
        } } function f(e) { var t = -1, n = e ? e.length : 0; for (this.clear(); ++t < n;) {
            var r = e[t];
            this.set(r[0], r[1]);
        } } function p(e) { var t = -1, n = e ? e.length : 0; for (this.clear(); ++t < n;) {
            var r = e[t];
            this.set(r[0], r[1]);
        } } function d(e) { this.__data__ = new f(e); } function h(e, t) { var n = Xe(e) || function (e) { return function (e) { return function (e) { return !!e && "object" == typeof e; }(e) && P(e); }(e) && _e.call(e, "callee") && (!Pe.call(e, "callee") || xe.call(e) == R); }(e) ? function (e, t) { for (var n = -1, r = Array(e); ++n < e;)
            r[n] = t(n); return r; }(e.length, String) : [], r = n.length, i = !!r; for (var o in e)
            !t && !_e.call(e, o) || i && ("length" == o || E(o, r)) || n.push(o); return n; } function v(e, t, n) { var r = e[t]; _e.call(e, t) && C(r, n) && (void 0 !== n || t in e) || (e[t] = n); } function m(e, t) { for (var n = e.length; n--;)
            if (C(e[n][0], t))
                return n; return -1; } function y(e, t, n, r, i, o, u) { var s; if (r && (s = o ? r(e, i, o, u) : r(e)), void 0 !== s)
            return s; if (!N(e))
            return e; var c = Xe(e); if (c) {
            if (s = function (e) { var t = e.length, n = e.constructor(t); return t && "string" == typeof e[0] && _e.call(e, "index") && (n.index = e.index, n.input = e.input), n; }(e), !t)
                return function (e, t) { var n = -1, r = e.length; for (t || (t = Array(r)); ++n < r;)
                    t[n] = e[n]; return t; }(e, s);
        }
        else {
            var l = Ye(e), f = l == D || l == U;
            if (Ke(e))
                return function (e, t) { if (t)
                    return e.slice(); var n = new e.constructor(e.length); return e.copy(n), n; }(e, t);
            if (l == B || l == R || f && !o) {
                if (a(e))
                    return o ? e : {};
                if (s = function (e) { return "function" != typeof e.constructor || O(e) ? {} : function (e) { return N(e) ? Ce(e) : {}; }(Te(e)); }(f ? {} : e), !t)
                    return function (e, t) { return x(e, $e(e), t); }(e, function (e, t) { return e && x(t, j(t), e); }(s, e));
            }
            else {
                if (!se[l])
                    return o ? e : {};
                s = function (e, t, n, r) { var i = e.constructor; switch (t) {
                    case Y: return b(e);
                    case z:
                    case F: return new i(+e);
                    case X: return function (e, t) { var n = t ? b(e.buffer) : e.buffer; return new e.constructor(n, e.byteOffset, e.byteLength); }(e, r);
                    case K:
                    case Q:
                    case J:
                    case Z:
                    case ee:
                    case te:
                    case ne:
                    case re:
                    case ie: return function (e, t) { var n = t ? b(e.buffer) : e.buffer; return new e.constructor(n, e.byteOffset, e.length); }(e, r);
                    case W: return w(e, r, n);
                    case H:
                    case G: return new i(e);
                    case V: return function (e) { var t = new e.constructor(e.source, oe.exec(e)); return t.lastIndex = e.lastIndex, t; }(e);
                    case q: return _(e, r, n);
                    case $: return function (e) { return Ge ? Object(Ge.call(e)) : {}; }(e);
                } }(e, l, y, t);
            }
        } u || (u = new d); var p = u.get(e); if (p)
            return p; if (u.set(e, s), !c)
            var h = n ? function (e) { return function (e, t, n) { var r = t(e); return Xe(e) ? r : function (e, t) { for (var n = -1, r = t.length, i = e.length; ++n < r;)
                e[i + n] = t[n]; return e; }(r, n(e)); }(e, j, $e); }(e) : j(e); return function (e, t) { for (var n = -1, r = e ? e.length : 0; ++n < r && !1 !== t(e[n], n, e);)
            ; }(h || e, function (i, o) { h && (i = e[o = i]), v(s, o, y(i, t, n, r, o, e, u)); }), s; } function g(e) { return !(!N(e) || function (e) { return !!be && be in e; }(e)) && (M(e) || a(e) ? ke : ae).test(T(e)); } function b(e) { var t = new e.constructor(e.byteLength); return new Oe(t).set(new Oe(e)), t; } function w(e, t, n) { return o(t ? n(u(e), !0) : u(e), r, new e.constructor); } function _(e, t, n) { return o(t ? n(c(e), !0) : c(e), i, new e.constructor); } function x(e, t, n, r) { n || (n = {}); for (var i = -1, o = t.length; ++i < o;) {
            var a = t[i], u = r ? r(n[a], e[a], a, n, e) : void 0;
            v(n, a, void 0 === u ? e[a] : u);
        } return n; } function k(e, t) { var n = e.__data__; return function (e) { var t = typeof e; return "string" == t || "number" == t || "symbol" == t || "boolean" == t ? "__proto__" !== e : null === e; }(t) ? n["string" == typeof t ? "string" : "hash"] : n.map; } function S(e, t) { var n = function (e, t) { return null == e ? void 0 : e[t]; }(e, t); return g(n) ? n : void 0; } function E(e, t) { return !!(t = null == t ? I : t) && ("number" == typeof e || ue.test(e)) && e > -1 && e % 1 == 0 && e < t; } function O(e) { var t = e && e.constructor; return e === ("function" == typeof t && t.prototype || ye); } function T(e) { if (null != e) {
            try {
                return we.call(e);
            }
            catch (e) { }
            try {
                return e + "";
            }
            catch (e) { }
        } return ""; } function C(e, t) { return e === t || e != e && t != t; } function P(e) { return null != e && function (e) { return "number" == typeof e && e > -1 && e % 1 == 0 && e <= I; }(e.length) && !M(e); } function M(e) { var t = N(e) ? xe.call(e) : ""; return t == D || t == U; } function N(e) { var t = typeof e; return !!e && ("object" == t || "function" == t); } function j(e) { return P(e) ? h(e) : function (e) { if (!O(e))
            return Ae(e); var t = []; for (var n in Object(e))
            _e.call(e, n) && "constructor" != n && t.push(n); return t; }(e); } var A = 200, L = "__lodash_hash_undefined__", I = 9007199254740991, R = "[object Arguments]", z = "[object Boolean]", F = "[object Date]", D = "[object Function]", U = "[object GeneratorFunction]", W = "[object Map]", H = "[object Number]", B = "[object Object]", V = "[object RegExp]", q = "[object Set]", G = "[object String]", $ = "[object Symbol]", Y = "[object ArrayBuffer]", X = "[object DataView]", K = "[object Float32Array]", Q = "[object Float64Array]", J = "[object Int8Array]", Z = "[object Int16Array]", ee = "[object Int32Array]", te = "[object Uint8Array]", ne = "[object Uint8ClampedArray]", re = "[object Uint16Array]", ie = "[object Uint32Array]", oe = /\w*$/, ae = /^\[object .+?Constructor\]$/, ue = /^(?:0|[1-9]\d*)$/, se = {}; se[R] = se["[object Array]"] = se[Y] = se[X] = se[z] = se[F] = se[K] = se[Q] = se[J] = se[Z] = se[ee] = se[W] = se[H] = se[B] = se[V] = se[q] = se[G] = se[$] = se[te] = se[ne] = se[re] = se[ie] = !0, se["[object Error]"] = se[D] = se["[object WeakMap]"] = !1; var ce = "object" == typeof e && e && e.Object === Object && e, le = "object" == typeof self && self && self.Object === Object && self, fe = ce || le || Function("return this")(), pe = "object" == typeof t && t && !t.nodeType && t, de = pe && "object" == typeof n && n && !n.nodeType && n, he = de && de.exports === pe, ve = Array.prototype, me = Function.prototype, ye = Object.prototype, ge = fe["__core-js_shared__"], be = function () { var e = /[^.]+$/.exec(ge && ge.keys && ge.keys.IE_PROTO || ""); return e ? "Symbol(src)_1." + e : ""; }(), we = me.toString, _e = ye.hasOwnProperty, xe = ye.toString, ke = RegExp("^" + we.call(_e).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), Se = he ? fe.Buffer : void 0, Ee = fe.Symbol, Oe = fe.Uint8Array, Te = s(Object.getPrototypeOf, Object), Ce = Object.create, Pe = ye.propertyIsEnumerable, Me = ve.splice, Ne = Object.getOwnPropertySymbols, je = Se ? Se.isBuffer : void 0, Ae = s(Object.keys, Object), Le = S(fe, "DataView"), Ie = S(fe, "Map"), Re = S(fe, "Promise"), ze = S(fe, "Set"), Fe = S(fe, "WeakMap"), De = S(Object, "create"), Ue = T(Le), We = T(Ie), He = T(Re), Be = T(ze), Ve = T(Fe), qe = Ee ? Ee.prototype : void 0, Ge = qe ? qe.valueOf : void 0; l.prototype.clear = function () { this.__data__ = De ? De(null) : {}; }, l.prototype.delete = function (e) { return this.has(e) && delete this.__data__[e]; }, l.prototype.get = function (e) { var t = this.__data__; if (De) {
            var n = t[e];
            return n === L ? void 0 : n;
        } return _e.call(t, e) ? t[e] : void 0; }, l.prototype.has = function (e) { var t = this.__data__; return De ? void 0 !== t[e] : _e.call(t, e); }, l.prototype.set = function (e, t) { return this.__data__[e] = De && void 0 === t ? L : t, this; }, f.prototype.clear = function () { this.__data__ = []; }, f.prototype.delete = function (e) { var t = this.__data__, n = m(t, e); return !(n < 0 || (n == t.length - 1 ? t.pop() : Me.call(t, n, 1), 0)); }, f.prototype.get = function (e) { var t = this.__data__, n = m(t, e); return n < 0 ? void 0 : t[n][1]; }, f.prototype.has = function (e) { return m(this.__data__, e) > -1; }, f.prototype.set = function (e, t) { var n = this.__data__, r = m(n, e); return r < 0 ? n.push([e, t]) : n[r][1] = t, this; }, p.prototype.clear = function () { this.__data__ = { hash: new l, map: new (Ie || f), string: new l }; }, p.prototype.delete = function (e) { return k(this, e).delete(e); }, p.prototype.get = function (e) { return k(this, e).get(e); }, p.prototype.has = function (e) { return k(this, e).has(e); }, p.prototype.set = function (e, t) { return k(this, e).set(e, t), this; }, d.prototype.clear = function () { this.__data__ = new f; }, d.prototype.delete = function (e) { return this.__data__.delete(e); }, d.prototype.get = function (e) { return this.__data__.get(e); }, d.prototype.has = function (e) { return this.__data__.has(e); }, d.prototype.set = function (e, t) { var n = this.__data__; if (n instanceof f) {
            var r = n.__data__;
            if (!Ie || r.length < A - 1)
                return r.push([e, t]), this;
            n = this.__data__ = new p(r);
        } return n.set(e, t), this; }; var $e = Ne ? s(Ne, Object) : function () { return []; }, Ye = function (e) { return xe.call(e); }; (Le && Ye(new Le(new ArrayBuffer(1))) != X || Ie && Ye(new Ie) != W || Re && "[object Promise]" != Ye(Re.resolve()) || ze && Ye(new ze) != q || Fe && "[object WeakMap]" != Ye(new Fe)) && (Ye = function (e) { var t = xe.call(e), n = t == B ? e.constructor : void 0, r = n ? T(n) : void 0; if (r)
            switch (r) {
                case Ue: return X;
                case We: return W;
                case He: return "[object Promise]";
                case Be: return q;
                case Ve: return "[object WeakMap]";
            } return t; }); var Xe = Array.isArray, Ke = je || function () { return !1; }; n.exports = function (e) { return y(e, !0, !0); }; }).call(t, n(5), n(6)(e)); }, function (e, t) { var n; n = function () { return this; }(); try {
            n = n || Function("return this")() || (0, eval)("this");
        }
        catch (e) {
            "object" == typeof window && (n = window);
        } e.exports = n; }, function (e, t) { e.exports = function (e) { return e.webpackPolyfill || (e.deprecate = function () { }, e.paths = [], e.children || (e.children = []), Object.defineProperty(e, "loaded", { enumerable: !0, get: function () { return e.l; } }), Object.defineProperty(e, "id", { enumerable: !0, get: function () { return e.i; } }), e.webpackPolyfill = 1), e; }; }, function (e, t, n) {
            "use strict";
            var r = function () { function e(e, t) { for (var n = 0; n < t.length; n++) {
                var r = t[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
            } } return function (t, n, r) { return n && e(t.prototype, n), r && e(t, r), t; }; }();
            Object.defineProperty(t, "__esModule", { value: !0 });
            var i = function () { function e(t, n) { (function (e, t) { if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function"); })(this, e), this.params = t, this.library = n; } return r(e, [{ key: "linkParticles", value: function (e, t) { var n = e.x - t.x, r = e.y - t.y, i = Math.sqrt(n * n + r * r), o = this.library.canvas, a = this.params.particles.line_linked; if (i <= this.params.particles.line_linked.distance) {
                        var u = this.params.particles.line_linked.opacity - i / (1 / this.params.particles.line_linked.opacity) / this.params.particles.line_linked.distance;
                        if (u > 0) {
                            var s = this.params.particles.line_linked.color_rgb_line, c = s.r, l = s.g, f = s.b;
                            o.ctx.save(), o.ctx.strokeStyle = "rgba( " + c + ", " + l + ", " + f + ", " + u + " )", o.ctx.lineWidth = this.params.particles.line_linked.width, o.ctx.beginPath(), a.shadow.enable && (o.ctx.shadowBlur = a.shadow.blur, o.ctx.shadowColor = a.shadow.color), o.ctx.moveTo(e.x, e.y), o.ctx.lineTo(t.x, t.y), o.ctx.stroke(), o.ctx.closePath(), o.ctx.restore();
                        }
                    } } }, { key: "attractParticles", value: function (e, t) { var n = e.x - t.x, r = e.y - t.y; if (Math.sqrt(n * n + r * r) <= this.params.particles.line_linked.distance) {
                        var i = n / (1e3 * this.params.particles.move.attract.rotateX), o = r / (1e3 * this.params.particles.move.attract.rotateY);
                        e.vx -= i, e.vy -= o, t.vx += i, t.vy += o;
                    } } }, { key: "bounceParticles", value: function (e, t) { var n = e.x - t.x, r = e.y - t.y; Math.sqrt(n * n + r * r) <= e.radius + t.radius && (e.vx = -e.vx, e.vy = -e.vy, t.vx = -t.vx, t.vy = -t.vy); } }]), e; }();
            t.default = i;
        }, function (e, t, n) {
            "use strict";
            var r = function () { function e(e, t) { for (var n = 0; n < t.length; n++) {
                var r = t[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
            } } return function (t, n, r) { return n && e(t.prototype, n), r && e(t, r), t; }; }();
            Object.defineProperty(t, "__esModule", { value: !0 });
            var i = n(0), o = function () { function e(t, n) { (function (e, t) { if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function"); })(this, e), this.params = t, this.library = n; } return r(e, [{ key: "pushParticles", value: function (e, t) { var n = this.library, r = n.canvas, o = n.tmp, a = n.manager; o.pushing = !0; for (var u = 0; u < e; u++)
                        this.params.particles.array.push(new i.Particle(this.params, this.library, this.params.particles.color, this.params.particles.opacity.value, { x: t ? t.pos_x : Math.random() * r.width, y: t ? t.pos_y : Math.random() * r.height })), u == e - 1 && (this.params.particles.move.enable || a.particlesDraw(), o.pushing = !1); } }, { key: "removeParticles", value: function (e) { var t = this.library.manager; this.params.particles.array.splice(0, e), this.params.particles.move.enable || t.particlesDraw(); } }, { key: "bubbleParticle", value: function (e) { var t = this, n = this.library.tmp; if (this.params.interactivity.events.onhover.enable && i.isInArray("bubble", this.params.interactivity.events.onhover.mode)) {
                        var r = e.x - this.params.interactivity.mouse.pos_x, o = e.y - this.params.interactivity.mouse.pos_y, a = Math.sqrt(r * r + o * o), u = 1 - a / this.params.interactivity.modes.bubble.distance, s = function () { e.opacity_bubble = e.opacity, e.radius_bubble = e.radius; };
                        if (a <= this.params.interactivity.modes.bubble.distance) {
                            if (u >= 0 && "mousemove" == this.params.interactivity.status) {
                                if (this.params.interactivity.modes.bubble.size != this.params.particles.size.value)
                                    if (this.params.interactivity.modes.bubble.size > this.params.particles.size.value) {
                                        var c = e.radius + this.params.interactivity.modes.bubble.size * u;
                                        c >= 0 && (e.radius_bubble = c);
                                    }
                                    else {
                                        var l = e.radius - this.params.interactivity.modes.bubble.size, f = e.radius - l * u;
                                        e.radius_bubble = f > 0 ? f : 0;
                                    }
                                if (this.params.interactivity.modes.bubble.opacity != this.params.particles.opacity.value)
                                    if (this.params.interactivity.modes.bubble.opacity > this.params.particles.opacity.value) {
                                        var p = this.params.interactivity.modes.bubble.opacity * u;
                                        p > e.opacity && p <= this.params.interactivity.modes.bubble.opacity && (e.opacity_bubble = p);
                                    }
                                    else {
                                        var d = e.opacity - (this.params.particles.opacity.value - this.params.interactivity.modes.bubble.opacity) * u;
                                        d < e.opacity && d >= this.params.interactivity.modes.bubble.opacity && (e.opacity_bubble = d);
                                    }
                            }
                        }
                        else
                            s();
                        "mouseleave" == this.params.interactivity.status && s();
                    }
                    else if (this.params.interactivity.events.onclick.enable && i.isInArray("bubble", this.params.interactivity.events.onclick.mode) && n.bubble_clicking) {
                        var h = e.x - this.params.interactivity.mouse.click_pos_x, v = e.y - this.params.interactivity.mouse.click_pos_y, m = Math.sqrt(h * h + v * v), y = ((new Date).getTime() - this.params.interactivity.mouse.click_time) / 1e3;
                        y > this.params.interactivity.modes.bubble.duration && (n.bubble_duration_end = !0), y > 2 * this.params.interactivity.modes.bubble.duration && (n.bubble_clicking = !1, n.bubble_duration_end = !1);
                        var g = function (r, i, o, a, u) { if (r != i)
                            if (n.bubble_duration_end) {
                                if (void 0 != o) {
                                    var s = a - y * (a - r) / t.params.interactivity.modes.bubble.duration, c = r - s, l = r + c;
                                    "size" == u && (e.radius_bubble = l), "opacity" == u && (e.opacity_bubble = l);
                                }
                            }
                            else if (m <= t.params.interactivity.modes.bubble.distance) {
                                if ((void 0 != o ? o : a) != r) {
                                    var f = a - y * (a - r) / t.params.interactivity.modes.bubble.duration;
                                    "size" == u && (e.radius_bubble = f), "opacity" == u && (e.opacity_bubble = f);
                                }
                            }
                            else
                                "size" == u && (e.radius_bubble = void 0), "opacity" == u && (e.opacity_bubble = void 0); };
                        n.bubble_clicking && (g(this.params.interactivity.modes.bubble.size, this.params.particles.size.value, e.radius_bubble, e.radius, "size"), g(this.params.interactivity.modes.bubble.opacity, this.params.particles.opacity.value, e.opacity_bubble, e.opacity, "opacity"));
                    } } }, { key: "repulseParticle", value: function (e) { var t = this, n = this.library, r = n.canvas, o = n.tmp; if (this.params.interactivity.events.onhover.enable && i.isInArray("repulse", this.params.interactivity.events.onhover.mode) && "mousemove" == this.params.interactivity.status) {
                        var a = e.x - this.params.interactivity.mouse.pos_x, u = e.y - this.params.interactivity.mouse.pos_y, s = Math.sqrt(a * a + u * u), c = { x: a / s, y: u / s }, l = this.params.interactivity.modes.repulse.distance, f = i.clamp(1 / l * (-1 * Math.pow(s / l, 2) + 1) * l * 100, 0, 50), p = { x: e.x + c.x * f, y: e.y + c.y * f };
                        "bounce" == this.params.particles.move.out_mode ? (p.x - e.radius > 0 && p.x + e.radius < r.width && (e.x = p.x), p.y - e.radius > 0 && p.y + e.radius < r.height && (e.y = p.y)) : (e.x = p.x, e.y = p.y);
                    }
                    else if (this.params.interactivity.events.onclick.enable && i.isInArray("repulse", this.params.interactivity.events.onclick.mode))
                        if (o.repulse_finish || ++o.repulse_count == this.params.particles.array.length && (o.repulse_finish = !0), o.repulse_clicking) {
                            var d = Math.pow(this.params.interactivity.modes.repulse.distance / 6, 3), h = this.params.interactivity.mouse.click_pos_x - e.x, v = this.params.interactivity.mouse.click_pos_y - e.y, m = h * h + v * v, y = -d / m * 1;
                            m <= d && function () { var n = Math.atan2(v, h); if (e.vx = y * Math.cos(n), e.vy = y * Math.sin(n), "bounce" == t.params.particles.move.out_mode) {
                                var i = { x: e.x + e.vx, y: e.y + e.vy };
                                i.x + e.radius > r.width ? e.vx = -e.vx : i.x - e.radius < 0 && (e.vx = -e.vx), i.y + e.radius > r.height ? e.vy = -e.vy : i.y - e.radius < 0 && (e.vy = -e.vy);
                            } }();
                        }
                        else
                            0 == o.repulse_clicking && (e.vx = e.vx_i, e.vy = e.vy_i); } }, { key: "grabParticle", value: function (e) { var t = this.library.canvas, n = this.params, r = n.interactivity, i = n.particles; if (r.events.onhover.enable && "mousemove" == r.status) {
                        var o = e.x - r.mouse.pos_x, a = e.y - r.mouse.pos_y, u = Math.sqrt(o * o + a * a);
                        if (u <= r.modes.grab.distance) {
                            var s = r.modes.grab, c = s.line_linked.opacity - u / (1 / s.line_linked.opacity) / s.distance;
                            if (c > 0) {
                                var l = i.line_linked.color_rgb_line, f = l.r, p = l.g, d = l.b;
                                t.ctx.strokeStyle = "rgba( " + f + ", " + p + ", " + d + ", " + c + " )", t.ctx.lineWidth = i.line_linked.width, t.ctx.beginPath(), t.ctx.moveTo(e.x, e.y), t.ctx.lineTo(r.mouse.pos_x, r.mouse.pos_y), t.ctx.stroke(), t.ctx.closePath();
                            }
                        }
                    } } }]), e; }();
            t.default = o;
        }, function (e, t, n) {
            "use strict";
            var r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e; } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }, i = function () { function e(e, t) { for (var n = 0; n < t.length; n++) {
                var r = t[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
            } } return function (t, n, r) { return n && e(t.prototype, n), r && e(t, r), t; }; }();
            Object.defineProperty(t, "__esModule", { value: !0 });
            var o = n(0), a = function () { function e(t, n, r, i, o) { (function (e, t) { if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function"); })(this, e), this.params = t, this.library = n, this.setupSize(), this.setupPosition(o), this.setupColor(r), this.setupOpacity(), this.setupAnimation(); } return i(e, [{ key: "setupSize", value: function () { this.radius = (this.params.particles.size.random ? Math.random() : 1) * this.params.particles.size.value, this.params.particles.size.anim.enable && (this.size_status = !1, this.vs = this.params.particles.size.anim.speed / 100, this.params.particles.size.anim.sync || (this.vs = this.vs * Math.random())); } }, { key: "setupPosition", value: function (e) { var t = this.library, n = t.canvas, r = t.vendors; this.x = e ? e.x : Math.random() * n.width, this.y = e ? e.y : Math.random() * n.height, this.x > n.width - 2 * this.radius ? this.x = this.x - this.radius : this.x < 2 * this.radius && (this.x = this.x + this.radius), this.y > n.height - 2 * this.radius ? this.y = this.y - this.radius : this.y < 2 * this.radius && (this.y = this.y + this.radius), this.params.particles.move.bounce && r.checkOverlap(this, e); } }, { key: "setupColor", value: function (e) { this.color = o.getColor(e.value); } }, { key: "setupOpacity", value: function () { this.opacity = (this.params.particles.opacity.random ? Math.random() : 1) * this.params.particles.opacity.value, this.params.particles.opacity.anim.enable && (this.opacity_status = !1, this.vo = this.params.particles.opacity.anim.speed / 100, this.params.particles.opacity.anim.sync || (this.vo = this.vo * Math.random())); } }, { key: "setupAnimation", value: function () { var e = this.library, t = e.tmp, n = e.vendors, i = null; switch (this.params.particles.move.direction) {
                        case "top":
                            i = { x: 0, y: -1 };
                            break;
                        case "top-right":
                            i = { x: .5, y: -.5 };
                            break;
                        case "right":
                            i = { x: 1, y: 0 };
                            break;
                        case "bottom-right":
                            i = { x: .5, y: .5 };
                            break;
                        case "bottom":
                            i = { x: 0, y: 1 };
                            break;
                        case "bottom-left":
                            i = { x: -.5, y: 1 };
                            break;
                        case "left":
                            i = { x: -1, y: 0 };
                            break;
                        case "top-left":
                            i = { x: -.5, y: -.5 };
                            break;
                        default: i = { x: 0, y: 0 };
                    } this.params.particles.move.straight ? (this.vx = i.x, this.vy = i.y, this.params.particles.move.random && (this.vx = this.vx * Math.random(), this.vy = this.vy * Math.random())) : (this.vx = i.x + Math.random() - .5, this.vy = i.y + Math.random() - .5), this.vx_i = this.vx, this.vy_i = this.vy; var o = this.params.particles.shape.type; if ("object" == (void 0 === o ? "undefined" : r(o))) {
                        if (o instanceof Array) {
                            var a = o[Math.floor(Math.random() * o.length)];
                            this.shape = a;
                        }
                    }
                    else
                        this.shape = o; if ("image" == this.shape) {
                        var u = this.params.particles.shape;
                        this.img = { src: u.image.src, ratio: u.image.width / u.image.height }, this.img.ratio || (this.img.ratio = 1), "svg" == t.img_type && void 0 != u.image.data && (n.createSvgImg(this, u.image.data), t.pushing && (this.img.loaded = !1));
                    } if ("images" == this.shape) {
                        var s = this.params.particles.shape;
                        t.img_index++;
                        var c = s.images[t.img_index % s.images.length];
                        this.img = { src: c.src, ratio: c.width / c.height }, this.img.ratio || (this.img.ratio = 1), "svg" == t.img_type && void 0 != c.data && (n.createSvgImg(this, c.data), t.pushing && (this.img.loaded = !1));
                    } } }, { key: "draw", value: function () { var e = this, t = this.library, n = t.canvas, r = t.tmp, i = t.vendors, o = void this.params.particles; o = void 0 != this.radius_bubble ? this.radius_bubble : this.radius; var a = void 0; a = void 0 != this.opacity_bubble ? this.opacity_bubble : this.opacity; var u = void 0; if (this.color.rgb) {
                        var s = this.color.rgb;
                        u = "rgba( " + s.r + ", " + s.g + ", " + s.b + ", " + a + " )";
                    }
                    else {
                        var c = this.color.hsl;
                        u = "hsla( " + c.h + ", " + c.s + ", " + c.l + ", " + a + " )";
                    } switch (n.ctx.fillStyle = u, n.ctx.beginPath(), this.shape) {
                        case "circle":
                            n.ctx.arc(this.x, this.y, o, 0, 2 * Math.PI, !1);
                            break;
                        case "edge":
                            n.ctx.rect(this.x - o, this.y - o, 2 * o, 2 * o);
                            break;
                        case "triangle":
                            i.drawShape(n.ctx, this.x - o, this.y + o / 1.66, 2 * o, 3, 2);
                            break;
                        case "polygon":
                            i.drawShape(n.ctx, this.x - o / (this.params.particles.shape.polygon.nb_sides / 3.5), this.y - o / .76, 2.66 * o / (this.params.particles.shape.polygon.nb_sides / 3), this.params.particles.shape.polygon.nb_sides, 1);
                            break;
                        case "star":
                            i.drawShape(n.ctx, this.x - 2 * o / (this.params.particles.shape.polygon.nb_sides / 4), this.y - o / 1.52, 2 * o * 2.66 / (this.params.particles.shape.polygon.nb_sides / 3), this.params.particles.shape.polygon.nb_sides, 2);
                            break;
                        case "images":
                        case "image":
                            var l = void 0;
                            (l = "svg" == r.img_type ? this.img.obj : r.img_obj) && function (t) { n.ctx.drawImage(t, e.x - o, e.y - o, 2 * o, 2 * o / e.img.ratio); }(l);
                    } n.ctx.closePath(), this.params.particles.shape.stroke.width > 0 && (n.ctx.strokeStyle = this.params.particles.shape.stroke.color, n.ctx.lineWidth = this.params.particles.shape.stroke.width, n.ctx.stroke()), n.ctx.fill(); } }]), e; }();
            t.default = a;
        }, function (e, t, n) {
            "use strict";
            var r = function () { function e(e, t) { for (var n = 0; n < t.length; n++) {
                var r = t[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
            } } return function (t, n, r) { return n && e(t.prototype, n), r && e(t, r), t; }; }();
            Object.defineProperty(t, "__esModule", { value: !0 });
            var i = n(0), o = function () { function e(t, n, r, i, o) { (function (e, t) { if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function"); })(this, e), this.params = t, this.interact = n, this.modes = r, this.vendors = i, this.library = o; } return r(e, [{ key: "particlesCreate", value: function () { for (var e = this.params.particles, t = e.color, n = e.opacity, r = 0; r < this.params.particles.number.value; r++)
                        this.params.particles.array.push(new i.Particle(this.params, this.library, t, n.value)); } }, { key: "particlesUpdate", value: function () { var e = this, t = this.library, n = t.canvas, r = t.interact, o = t.modes; this.params.particles.array.forEach(function (t, a) { if (e.params.particles.move.enable) {
                        var u = e.params.particles.move.speed / 2;
                        t.x += t.vx * u, t.y += t.vy * u;
                    } e.params.particles.opacity.anim.enable && (1 == t.opacity_status ? (t.opacity >= e.params.particles.opacity.value && (t.opacity_status = !1), t.opacity += t.vo) : (t.opacity <= e.params.particles.opacity.anim.opacity_min && (t.opacity_status = !0), t.opacity -= t.vo), t.opacity < 0 && (t.opacity = 0)), e.params.particles.size.anim.enable && (1 == t.size_status ? (t.radius >= e.params.particles.size.value && (t.size_status = !1), t.radius += t.vs) : (t.radius <= e.params.particles.size.anim.size_min && (t.size_status = !0), t.radius -= t.vs), t.radius < 0 && (t.radius = 0)); var s = void 0; switch (s = "bounce" == e.params.particles.move.out_mode ? { x_left: t.radius, x_right: n.width, y_top: t.radius, y_bottom: n.height } : { x_left: -t.radius, x_right: n.width + t.radius, y_top: -t.radius, y_bottom: n.height + t.radius }, t.x - t.radius > n.width ? (t.x = s.x_left, t.y = Math.random() * n.height) : t.x + t.radius < 0 && (t.x = s.x_right, t.y = Math.random() * n.height), t.y - t.radius > n.height ? (t.y = s.y_top, t.x = Math.random() * n.width) : t.y + t.radius < 0 && (t.y = s.y_bottom, t.x = Math.random() * n.width), e.params.particles.move.out_mode) {
                        case "bounce": t.x + t.radius > n.width ? t.vx = -t.vx : t.x - t.radius < 0 && (t.vx = -t.vx), t.y + t.radius > n.height ? t.vy = -t.vy : t.y - t.radius < 0 && (t.vy = -t.vy);
                    } if (i.isInArray("grab", e.params.interactivity.events.onhover.mode) && o.grabParticle(t), (i.isInArray("bubble", e.params.interactivity.events.onhover.mode) || i.isInArray("bubble", e.params.interactivity.events.onclick.mode)) && o.bubbleParticle(t), (i.isInArray("repulse", e.params.interactivity.events.onhover.mode) || i.isInArray("repulse", e.params.interactivity.events.onclick.mode)) && o.repulseParticle(t), e.params.particles.line_linked.enable || e.params.particles.move.attract.enable)
                        for (var c = a + 1; c < e.params.particles.array.length; c++) {
                            var l = e.params.particles.array[c];
                            e.params.particles.line_linked.enable && r.linkParticles(t, l), e.params.particles.move.attract.enable && r.attractParticles(t, l), e.params.particles.move.bounce && r.bounceParticles(t, l);
                        } }); } }, { key: "particlesDraw", value: function () { var e = this.library, t = e.canvas, n = e.manager; t.ctx.clearRect(0, 0, t.width, t.height), n.particlesUpdate(), this.params.particles.array.forEach(function (e) { e.draw(); }); } }, { key: "particlesEmpty", value: function () { this.params.particles.array = []; } }, { key: "particlesRefresh", value: function () { var e = this.library, t = e.tmp; e.vendors, cancelAnimationFrame(t.checkAnimFrame), cancelAnimationFrame(t.drawAnimFrame), t.img_obj = void 0, t.count_svg = 0, this.particlesEmpty(), this.library.canvasClear(), this.library.start(); } }]), e; }();
            t.default = o;
        }, function (e, t, n) {
            "use strict";
            var r = function () { function e(e, t) { for (var n = 0; n < t.length; n++) {
                var r = t[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
            } } return function (t, n, r) { return n && e(t.prototype, n), r && e(t, r), t; }; }();
            Object.defineProperty(t, "__esModule", { value: !0 });
            var i = n(0), o = function () { function e(t) { (function (e, t) { if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function"); })(this, e), this.tmp = {}, this.tmp = {}, this.loadParameters(t), this.extendParams(), this.interact = new i.Interact(this.params, this), this.modes = new i.Modes(this.params, this), this.vendors = new i.Vendors(this.params, this), this.manager = new i.ParticleManager(this.params, this.interact, this.modes, this.vendors, this); } return r(e, [{ key: "loadParameters", value: function (e) { var t = i.getDefaultParams(), n = i.deepExtend(t, e); this.params = n; } }, { key: "loadCanvas", value: function (e) { this.canvas = { element: e, width: e.offsetWidth, height: e.offsetHeight }; } }, { key: "start", value: function () { var e = this.vendors; e.eventsListeners(), e.start(); } }, { key: "destroy", value: function () { var e = this.tmp; this.detachListeners(), this.vendors.detachListeners(), cancelAnimationFrame(e.drawAnimFrame), this.canvasClear(); } }, { key: "detachListeners", value: function () { window.removeEventListener("resize", this.onWindowResize); } }, { key: "extendParams", value: function () { this.extendTmpDefinition(), this.onWindowResize = this.onWindowResize.bind(this); } }, { key: "extendTmpDefinition", value: function () { var e = this.tmp; e.obj = { size_value: this.params.particles.size.value, size_anim_speed: this.params.particles.size.anim.speed, move_speed: this.params.particles.move.speed, line_linked_distance: this.params.particles.line_linked.distance, line_linked_width: this.params.particles.line_linked.width, mode_grab_distance: this.params.interactivity.modes.grab.distance, mode_bubble_distance: this.params.interactivity.modes.bubble.distance, mode_bubble_size: this.params.interactivity.modes.bubble.size, mode_repulse_distance: this.params.interactivity.modes.repulse.distance }, e.count_svg = 0, e.img_index = 0; } }, { key: "retinaInit", value: function () { var e = this.canvas, t = this.tmp; this.params.retina_detect && window.devicePixelRatio > 1 ? (e.pxratio = window.devicePixelRatio, t.retina = !0, e.width = e.element.offsetWidth * e.pxratio, e.height = e.element.offsetHeight * e.pxratio, this.params.particles.size.value = t.obj.size_value * e.pxratio, this.params.particles.size.anim.speed = t.obj.size_anim_speed * e.pxratio, this.params.particles.move.speed = t.obj.move_speed * e.pxratio, this.params.particles.line_linked.distance = t.obj.line_linked_distance * e.pxratio, this.params.interactivity.modes.grab.distance = t.obj.mode_grab_distance * e.pxratio, this.params.interactivity.modes.bubble.distance = t.obj.mode_bubble_distance * e.pxratio, this.params.particles.line_linked.width = t.obj.line_linked_width * e.pxratio, this.params.interactivity.modes.bubble.size = t.obj.mode_bubble_size * e.pxratio, this.params.interactivity.modes.repulse.distance = t.obj.mode_repulse_distance * e.pxratio) : (e.pxratio = 1, t.retina = !1); } }, { key: "canvasInit", value: function () { var e = this.canvas; e.ctx = e.element.getContext("2d"); } }, { key: "canvasSize", value: function () { var e = this.canvas; e.element.width = e.width, e.element.height = e.height, this.params && this.params.interactivity.events.resize && window.addEventListener("resize", this.onWindowResize); } }, { key: "canvasPaint", value: function () { var e = this.canvas; if (e && e.ctx)
                        try {
                            e.ctx.fillRect(0, 0, e.width, e.height);
                        }
                        catch (e) {
                            console.warn(e);
                        } } }, { key: "canvasClear", value: function () { var e = this.canvas; if (e && e.ctx)
                        try {
                            e.ctx.clearRect(0, 0, e.width, e.height);
                        }
                        catch (e) {
                            console.warn(e);
                        } } }, { key: "onWindowResize", value: function () { var e = this.canvas, t = this.manager, n = this.tmp, r = this.vendors; e.width = e.element.offsetWidth, e.height = e.element.offsetHeight, n.retina && (e.width *= e.pxratio, e.height *= e.pxratio), e.element.width = e.width, e.element.height = e.height, this.params.particles.move.enable || (t.particlesEmpty(), t.particlesCreate(), t.particlesDraw(), r.densityAutoParticles()), r.densityAutoParticles(); } }]), e; }();
            t.default = o;
        }, function (e, t, n) {
            "use strict";
            var r = function () { function e(e, t) { for (var n = 0; n < t.length; n++) {
                var r = t[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
            } } return function (t, n, r) { return n && e(t.prototype, n), r && e(t, r), t; }; }();
            Object.defineProperty(t, "__esModule", { value: !0 });
            var i = n(0), o = function () { function e(t, n) { (function (e, t) { if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function"); })(this, e), this.params = t, this.library = n, this.onMouseMove = this.onMouseMove.bind(this), this.onMouseLeave = this.onMouseLeave.bind(this), this.onClick = this.onClick.bind(this); } return r(e, [{ key: "eventsListeners", value: function () { var e = this.params.interactivity, t = this.library.canvas; "window" == e.detect_on ? e.el = window : e.el = t.element, (e.events.onhover.enable || e.events.onclick.enable) && (e.el.addEventListener("mousemove", this.onMouseMove), e.el.addEventListener("mouseleave", this.onMouseLeave)), e.events.onclick.enable && e.el.addEventListener("click", this.onClick); } }, { key: "detachListeners", value: function () { var e = this.params.interactivity, t = this.library.tmp; e.el && ((e.events.onhover.enable || e.events.onclick.enable) && (e.el.removeEventListener("mousemove", this.onMouseMove), e.el.addEventListener("mouseleave", this.onMouseLeave)), e.events.onclick.enable && e.el.addEventListener("click", this.onClick)), window.cancelAnimationFrame(t.drawAnimFrame); } }, { key: "onMouseMove", value: function (e) { var t = this.library, n = t.canvas, r = t.tmp, i = this.params.interactivity, o = void 0; o = i.el == window ? { x: e.clientX, y: e.clientY } : { x: e.offsetX || e.clientX, y: e.offsetY || e.clientY }, i.mouse.pos_x = o.x, i.mouse.pos_y = o.y, r.retina && (i.mouse.pos_x *= n.pxratio, i.mouse.pos_y *= n.pxratio), i.status = "mousemove"; } }, { key: "onMouseLeave", value: function (e) { var t = this.params.interactivity; t.mouse.pos_x = null, t.mouse.pos_y = null, t.status = "mouseleave"; } }, { key: "onClick", value: function () { var e = this.library, t = e.modes, n = e.tmp, r = this.params, i = r.interactivity, o = r.particles; if (i.mouse.click_pos_x = i.mouse.pos_x, i.mouse.click_pos_y = i.mouse.pos_y, i.mouse.click_time = (new Date).getTime(), i.events.onclick.enable)
                        switch (i.events.onclick.mode) {
                            case "push":
                                o.move.enable ? t.pushParticles(i.modes.push.particles_nb, i.mouse) : 1 == i.modes.push.particles_nb ? t.pushParticles(i.modes.push.particles_nb, i.mouse) : i.modes.push.particles_nb > 1 && t.pushParticles(i.modes.push.particles_nb);
                                break;
                            case "remove":
                                t.removeParticles(i.modes.remove.particles_nb);
                                break;
                            case "bubble":
                                n.bubble_clicking = !0;
                                break;
                            case "repulse": n.repulse_clicking = !0, n.repulse_count = 0, n.repulse_finish = !1, setTimeout(function () { n.repulse_clicking = !1; }, 1e3 * i.modes.repulse.duration);
                        } } }, { key: "densityAutoParticles", value: function () { var e = this.library, t = e.canvas, n = e.modes, r = e.tmp, i = this.params.particles; if (i.number.density.enable) {
                        var o = t.element.width * t.element.height / 1e3;
                        r.retina && (o = o / t.pxratio * 2);
                        var a = o * i.number.value / i.number.density.value_area, u = i.array.length - a;
                        u < 0 ? n.pushParticles(Math.abs(u)) : n.removeParticles(u);
                    } } }, { key: "checkOverlap", value: function (e, t) { var n = this.library, r = n.canvas, i = n.vendors; this.params.particles.array.forEach(function (n) { var o = n, a = e.x - o.x, u = e.y - o.y; Math.sqrt(a * a + u * u) <= e.radius + o.radius && (e.x = t ? t.x : Math.random() * r.width, e.y = t ? t.y : Math.random() * r.height, i.checkOverlap(e)); }); } }, { key: "createSvgImg", value: function (e, t) { var n = this.library.tmp, r = t.replace(/#([0-9A-F]{3,6})|rgb\([0-9,]+\)/gi, function (t, n, r, i) { var o = void 0; if (e.color.rgb) {
                        var a = e.color.rgb;
                        o = "rgba( " + a.r + ", " + a.g + ", " + a.b + ", " + e.opacity + " )";
                    }
                    else {
                        var u = e.color.hsl;
                        o = "rgba( " + u.h + ", " + u.s + ", " + u.l + ", " + e.opacity + " )";
                    } return o; }), i = new Blob([r], { type: "image/svg+xml;charset=utf-8" }), o = window.URL || window, a = o.createObjectURL(i), u = new Image; u.addEventListener("load", function () { e.img.obj = u, e.img.loaded = !0, o.revokeObjectURL(a), n.count_svg++; }), u.src = a; } }, { key: "destroy", value: function () { var e = this.library, t = e.canvas, n = e.tmp; cancelAnimationFrame(n.drawAnimFrame), t.element.remove(); } }, { key: "drawShape", value: function (e, t, n, r, i, o) { var a = i * o, u = i / o, s = 180 * (u - 2) / u, c = Math.PI - Math.PI * s / 180; e.save(), e.beginPath(), e.translate(t, n), e.moveTo(0, 0); for (var l = 0; l < a; l++)
                        e.lineTo(r, 0), e.translate(r, 0), e.rotate(c); e.fill(), e.restore(); } }, { key: "exportImg", value: function () { var e = this.library.canvas; window.open(e.element.toDataURL("image/png"), "_blank"); } }, { key: "loadImg", value: function (e, t) { var n = this.library, r = n.tmp, i = n.vendors; if (r.img_error = void 0, "" != t.src)
                        if ("svg" == e)
                            if (t.data)
                                i.checkBeforeDraw();
                            else {
                                var o = new XMLHttpRequest;
                                o.open("GET", t.src), o.onreadystatechange = function (e) { 4 == o.readyState && (200 == o.status ? (t.data = e.currentTarget.response, i.checkBeforeDraw()) : (console.log("Error react-particles-js - image not found"), r.img_error = !0)); }, o.send();
                            }
                        else {
                            var a = new Image;
                            a.addEventListener("load", function () { r.img_obj = a, i.checkBeforeDraw(); }), a.src = t.src;
                        }
                    else
                        console.log("Error react-particles-js - no image.src"), r.img_error = !0; } }, { key: "draw", value: function () { var e = this.library, t = e.tmp, n = e.manager, r = e.vendors, i = this.params.particles; "image" == i.shape.type || "images" == i.shape.type ? "svg" == t.img_type ? t.count_svg >= i.number.value ? (n.particlesDraw(), i.move.enable ? t.drawAnimFrame = requestAnimationFrame(r.draw.bind(r)) : cancelAnimationFrame(t.drawAnimFrame)) : t.img_error || (t.drawAnimFrame = requestAnimationFrame(r.draw.bind(r))) : void 0 != t.img_obj ? (n.particlesDraw(), i.move.enable ? t.drawAnimFrame = requestAnimationFrame(r.draw.bind(r)) : cancelAnimationFrame(t.drawAnimFrame)) : t.img_error || (t.drawAnimFrame = requestAnimationFrame(r.draw.bind(r))) : (n.particlesDraw(), i.move.enable ? t.drawAnimFrame = requestAnimationFrame(r.draw.bind(r)) : cancelAnimationFrame(t.drawAnimFrame)); } }, { key: "checkBeforeDraw", value: function () { var e = this.library, t = e.tmp, n = e.vendors, r = this.params.particles; "image" == r.shape.type || "images" == r.shape.type ? (cancelAnimationFrame(t.checkAnimFrame), t.img_error || (n.init(), n.draw())) : (n.init(), n.draw()); } }, { key: "init", value: function () { var e = this.library, t = e.manager, n = e.vendors, r = this.params.particles; e.retinaInit(), e.canvasInit(), e.canvasSize(), t.particlesCreate(), n.densityAutoParticles(), r.line_linked.color_rgb_line = i.hexToRgb(r.line_linked.color); } }, { key: "start", value: function () { var e = this.library, t = e.tmp, n = e.vendors, r = this.params.particles; if ("image" == r.shape.type) {
                        var i = void 0;
                        (i = /^data:image\/(\w{3})\+xml;base64,(.*)$/.exec(r.shape.image.src)) ? (t.img_type = i[1], r.shape.image.data = atob(i[2])) : (i = /^.*(\w{3})$/.exec(r.shape.image.src)) && (t.img_type = i[1]), n.loadImg(t.img_type, r.shape.image);
                    }
                    else if ("images" == r.shape.type) {
                        var o = !0, a = !1, u = void 0;
                        try {
                            for (var s, c = r.shape.images[Symbol.iterator](); !(o = (s = c.next()).done); o = !0) {
                                var l = s.value, f = void 0;
                                (f = /^data:image\/(\w{3})\+xml;base64,(.*)$/.exec(l.src)) ? (t.img_type = f[1], l.data = atob(f[2])) : (f = /^.*(\w{3})$/.exec(l.src)) && (t.img_type = f[1]), n.loadImg(t.img_type, l);
                            }
                        }
                        catch (e) {
                            a = !0, u = e;
                        }
                        finally {
                            try {
                                !o && c.return && c.return();
                            }
                            finally {
                                if (a)
                                    throw u;
                            }
                        }
                    }
                    else
                        n.checkBeforeDraw(); } }]), e; }();
            t.default = o;
        }, function (e, t, n) {
            "use strict";
            Object.defineProperty(t, "__esModule", { value: !0 }), t.getDefaultParams = function () { return { particles: { number: { value: 40, density: { enable: !1, value_area: 1200 } }, color: { value: "#FFF" }, shape: { type: "circle", stroke: { width: 0, color: "#000000" }, polygon: { nb_sides: 5 }, image: { src: "", data: null, width: 100, height: 100 }, images: [] }, opacity: { value: .5, random: !1, anim: { enable: !0, speed: 1, opacity_min: .1, sync: !1 } }, size: { value: 1, random: !1, anim: { enable: !1, speed: 40, size_min: 0, sync: !1 } }, line_linked: { enable: !0, distance: 150, color: "#FFF", opacity: .6, width: 1, shadow: { enable: !1, blur: 5, color: "lime" } }, move: { enable: !0, speed: 3, direction: "none", random: !1, straight: !1, out_mode: "bounce", bounce: !0, attract: { enable: !1, rotateX: 3e3, rotateY: 3e3 } }, array: [] }, interactivity: { detect_on: "canvas", events: { onhover: { enable: !1, mode: "grab" }, onclick: { enable: !1, mode: "repulse" }, resize: !0 }, modes: { grab: { distance: 180, line_linked: { opacity: .35 } }, bubble: { distance: 200, size: 80, duration: .4 }, repulse: { distance: 100, duration: 5 }, push: { particles_nb: 4 }, remove: { particles_nb: 2 } }, mouse: {} }, retina_detect: !0 }; };
        }, function (e, t, n) {
            "use strict";
            var r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e; } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; };
            Object.defineProperty(t, "__esModule", { value: !0 }), t.hexToRgb = function (e) { e = e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function (e, t, n, r) { return t + t + n + n + r + r; }); var t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e); return t ? { r: parseInt(t[1], 16), g: parseInt(t[2], 16), b: parseInt(t[3], 16) } : null; }, t.clamp = function (e, t, n) { return Math.min(Math.max(e, t), n); }, t.isInArray = function (e, t) { return t.indexOf(e) > -1; }, t.deepExtend = function (e, n) { for (var r in n)
                n[r] && n[r].constructor && n[r].constructor === Object ? (e[r] = e[r] || {}, t.deepExtend(e[r], n[r])) : e[r] = n[r]; return e; }, t.getColor = function (e) { var n = {}; if ("object" == (void 0 === e ? "undefined" : r(e)))
                if (e instanceof Array) {
                    var i = e[Math.floor(Math.random() * e.length)];
                    n.rgb = t.hexToRgb(i);
                }
                else {
                    var o = e.r, a = e.g, u = e.b;
                    if (void 0 !== o && void 0 !== a && void 0 !== u)
                        n.rgb = { r: o, g: a, b: u };
                    else {
                        var s = e.h, c = e.s, l = e.l;
                        void 0 !== s && void 0 !== a && void 0 !== u && (n.hsl = { h: s, s: c, l: l });
                    }
                }
            else
                "random" == e ? n.rgb = { r: Math.floor(255 * Math.random()) + 1, g: Math.floor(255 * Math.random()) + 1, b: Math.floor(255 * Math.random()) + 1 } : "string" == typeof e && (n.rgb = t.hexToRgb(e)); return n; };
        }])); }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (var n in t)
            t.hasOwnProperty(n) && (e[n] = t[n]); }, function (e, t) { function n() { this.constructor = e; } r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n); });
        Object.defineProperty(t, "__esModule", { value: !0 });
        var o = n(202), a = n(7);
        n(201);
        var u = n(199), s = function (e) { function t() { return null !== e && e.apply(this, arguments) || this; } return i(t, e), t.prototype.render = function () { return a.createElement("div", { className: "container-spacebackground" }, a.createElement("div", { className: "spacebackground" }, a.createElement(o.default, { params: { particles: { number: { value: 1e3, density: { enable: !0, value_area: 789.1476416322727 } }, color: { value: "#ffffff" }, shape: { type: "circle", stroke: { width: 0, color: "#000000" }, polygon: { nb_sides: 3 } }, opacity: { value: .48927153781200905, random: !1, anim: { enable: !0, speed: .05, opacity_min: 0, sync: !1 } }, size: { value: 1.5, random: !0, anim: { enable: !0, speed: 2, size_min: 0, sync: !1 } }, line_linked: { enable: !1, distance: 150, color: "#ffffff", opacity: .4, width: 1 }, move: { enable: !0, speed: 0, direction: "none", random: !0, straight: !1, out_mode: "out", bounce: !0, attract: { enable: !1, rotateX: 600, rotateY: 1200 } } }, interactivity: { detect_on: "canvas", events: { onhover: { enable: !0, mode: "bubble" }, onclick: { enable: !0, mode: "push" }, resize: !0 }, modes: { grab: { distance: 400, line_linked: { opacity: 1 } }, bubble: { distance: 83.91608391608392, size: 1, duration: 3 }, repulse: { distance: 200, duration: .4 }, push: { particles_nb: 4 }, remove: { particles_nb: 2 } } } }, style: { width: "100%" } }), a.createElement(u.default, null))); }, t; }(a.Component);
        t.SpaceBackground = s, t.default = s;
    }, function (e, t, n) {
        "use strict";
        /** @license React v16.4.0
         * react.production.min.js
         *
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ var r = n(102), i = n(73), o = n(101), a = n(72), u = "function" == typeof Symbol && Symbol.for, s = u ? Symbol.for("react.element") : 60103, c = u ? Symbol.for("react.portal") : 60106, l = u ? Symbol.for("react.fragment") : 60107, f = u ? Symbol.for("react.strict_mode") : 60108, p = u ? Symbol.for("react.profiler") : 60114, d = u ? Symbol.for("react.provider") : 60109, h = u ? Symbol.for("react.context") : 60110, v = u ? Symbol.for("react.async_mode") : 60111, m = u ? Symbol.for("react.forward_ref") : 60112;
        u && Symbol.for("react.timeout");
        var y = "function" == typeof Symbol && Symbol.iterator;
        function g(e) { for (var t = arguments.length - 1, n = "https://reactjs.org/docs/error-decoder.html?invariant=" + e, r = 0; r < t; r++)
            n += "&args[]=" + encodeURIComponent(arguments[r + 1]); i(!1, "Minified React error #" + e + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", n); }
        var b = { isMounted: function () { return !1; }, enqueueForceUpdate: function () { }, enqueueReplaceState: function () { }, enqueueSetState: function () { } };
        function w(e, t, n) { this.props = e, this.context = t, this.refs = o, this.updater = n || b; }
        function _() { }
        function x(e, t, n) { this.props = e, this.context = t, this.refs = o, this.updater = n || b; }
        w.prototype.isReactComponent = {}, w.prototype.setState = function (e, t) { "object" != typeof e && "function" != typeof e && null != e && g("85"), this.updater.enqueueSetState(this, e, t, "setState"); }, w.prototype.forceUpdate = function (e) { this.updater.enqueueForceUpdate(this, e, "forceUpdate"); }, _.prototype = w.prototype;
        var k = x.prototype = new _;
        k.constructor = x, r(k, w.prototype), k.isPureReactComponent = !0;
        var S = { current: null }, E = Object.prototype.hasOwnProperty, O = { key: !0, ref: !0, __self: !0, __source: !0 };
        function T(e, t, n) { var r = void 0, i = {}, o = null, a = null; if (null != t)
            for (r in void 0 !== t.ref && (a = t.ref), void 0 !== t.key && (o = "" + t.key), t)
                E.call(t, r) && !O.hasOwnProperty(r) && (i[r] = t[r]); var u = arguments.length - 2; if (1 === u)
            i.children = n;
        else if (1 < u) {
            for (var c = Array(u), l = 0; l < u; l++)
                c[l] = arguments[l + 2];
            i.children = c;
        } if (e && e.defaultProps)
            for (r in u = e.defaultProps)
                void 0 === i[r] && (i[r] = u[r]); return { $$typeof: s, type: e, key: o, ref: a, props: i, _owner: S.current }; }
        function C(e) { return "object" == typeof e && null !== e && e.$$typeof === s; }
        var P = /\/+/g, M = [];
        function N(e, t, n, r) { if (M.length) {
            var i = M.pop();
            return i.result = e, i.keyPrefix = t, i.func = n, i.context = r, i.count = 0, i;
        } return { result: e, keyPrefix: t, func: n, context: r, count: 0 }; }
        function j(e) { e.result = null, e.keyPrefix = null, e.func = null, e.context = null, e.count = 0, 10 > M.length && M.push(e); }
        function A(e, t, n, r) { var i = typeof e; "undefined" !== i && "boolean" !== i || (e = null); var o = !1; if (null === e)
            o = !0;
        else
            switch (i) {
                case "string":
                case "number":
                    o = !0;
                    break;
                case "object": switch (e.$$typeof) {
                    case s:
                    case c: o = !0;
                }
            } if (o)
            return n(r, e, "" === t ? "." + L(e, 0) : t), 1; if (o = 0, t = "" === t ? "." : t + ":", Array.isArray(e))
            for (var a = 0; a < e.length; a++) {
                var u = t + L(i = e[a], a);
                o += A(i, u, n, r);
            }
        else if (null === e || void 0 === e ? u = null : u = "function" == typeof (u = y && e[y] || e["@@iterator"]) ? u : null, "function" == typeof u)
            for (e = u.call(e), a = 0; !(i = e.next()).done;)
                o += A(i = i.value, u = t + L(i, a++), n, r);
        else
            "object" === i && g("31", "[object Object]" === (n = "" + e) ? "object with keys {" + Object.keys(e).join(", ") + "}" : n, ""); return o; }
        function L(e, t) { return "object" == typeof e && null !== e && null != e.key ? function (e) { var t = { "=": "=0", ":": "=2" }; return "$" + ("" + e).replace(/[=:]/g, function (e) { return t[e]; }); }(e.key) : t.toString(36); }
        function I(e, t) { e.func.call(e.context, t, e.count++); }
        function R(e, t, n) { var r = e.result, i = e.keyPrefix; e = e.func.call(e.context, t, e.count++), Array.isArray(e) ? z(e, r, n, a.thatReturnsArgument) : null != e && (C(e) && (t = i + (!e.key || t && t.key === e.key ? "" : ("" + e.key).replace(P, "$&/") + "/") + n, e = { $$typeof: s, type: e.type, key: t, ref: e.ref, props: e.props, _owner: e._owner }), r.push(e)); }
        function z(e, t, n, r, i) { var o = ""; null != n && (o = ("" + n).replace(P, "$&/") + "/"), t = N(t, o, r, i), null == e || A(e, "", R, t), j(t); }
        var F = { Children: { map: function (e, t, n) { if (null == e)
                    return e; var r = []; return z(e, r, null, t, n), r; }, forEach: function (e, t, n) { if (null == e)
                    return e; t = N(null, null, t, n), null == e || A(e, "", I, t), j(t); }, count: function (e) { return null == e ? 0 : A(e, "", a.thatReturnsNull, null); }, toArray: function (e) { var t = []; return z(e, t, null, a.thatReturnsArgument), t; }, only: function (e) { return C(e) || g("143"), e; } }, createRef: function () { return { current: null }; }, Component: w, PureComponent: x, createContext: function (e, t) { return void 0 === t && (t = null), (e = { $$typeof: h, _calculateChangedBits: t, _defaultValue: e, _currentValue: e, _currentValue2: e, _changedBits: 0, _changedBits2: 0, Provider: null, Consumer: null }).Provider = { $$typeof: d, _context: e }, e.Consumer = e; }, forwardRef: function (e) { return { $$typeof: m, render: e }; }, Fragment: l, StrictMode: f, unstable_AsyncMode: v, unstable_Profiler: p, createElement: T, cloneElement: function (e, t, n) { (null === e || void 0 === e) && g("267", e); var i = void 0, o = r({}, e.props), a = e.key, u = e.ref, c = e._owner; if (null != t) {
                void 0 !== t.ref && (u = t.ref, c = S.current), void 0 !== t.key && (a = "" + t.key);
                var l = void 0;
                for (i in e.type && e.type.defaultProps && (l = e.type.defaultProps), t)
                    E.call(t, i) && !O.hasOwnProperty(i) && (o[i] = void 0 === t[i] && void 0 !== l ? l[i] : t[i]);
            } if (1 === (i = arguments.length - 2))
                o.children = n;
            else if (1 < i) {
                l = Array(i);
                for (var f = 0; f < i; f++)
                    l[f] = arguments[f + 2];
                o.children = l;
            } return { $$typeof: s, type: e.type, key: a, ref: u, props: o, _owner: c }; }, createFactory: function (e) { var t = T.bind(null, e); return t.type = e, t; }, isValidElement: C, version: "16.4.0", __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { ReactCurrentOwner: S, assign: r } }, D = { default: F }, U = D && F || D;
        e.exports = U.default ? U.default : U;
    }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (var n in t)
            t.hasOwnProperty(n) && (e[n] = t[n]); }, function (e, t) { function n() { this.constructor = e; } r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n); });
        Object.defineProperty(t, "__esModule", { value: !0 });
        var o = n(7), a = n(203);
        n(196);
        var u = n(194), s = n(187), c = function (e) { function t() { return null !== e && e.apply(this, arguments) || this; } return i(t, e), t.prototype.render = function () { return o.createElement("div", { className: "space-container" }, o.createElement(a.default, null), o.createElement(s.NavigationIcons, null), o.createElement(u.CompanyMotto, null)); }, t; }(o.Component);
        t.Space = c, t.default = c;
    }, function (e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 });
        var r = n(205), i = n(184), o = n(177), a = n(144), u = n(141), s = n(70), c = n(7);
        window.onload = function () { s.render(c.createElement(a.default, null), document.getElementById("rocketMount")), s.render(c.createElement(r.default, null), document.getElementById("spaceMount")), s.render(c.createElement(i.default, null), document.getElementById("aboutUsMount")), s.render(c.createElement(o.default, null), document.getElementById("productsMount")), s.render(c.createElement(u.default, { Title: "Services", Description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.", ButtonText: "Learn More", ButtonColor: "#F77249", ImagePath: "http://i0.kym-cdn.com/entries/icons/original/000/000/888/VanillaHappyCat.jpg", IconPath: "", Reversed: !1 }), document.getElementById("servicesMount")); };
    }, function (e, t) { e.exports = function (e, t) { var n = t === Object(t) ? function (e) { return t[e]; } : t; return function (t) { return String(t).replace(e, n); }; }; }, function (e, t, n) { var r = n(0), i = n(207)(/[\\^$*+?.()|[\]{}]/g, "\\$&"); r(r.S, "RegExp", { escape: function (e) { return i(e); } }); }, function (e, t, n) { n(208), e.exports = n(23).RegExp.escape; }, function (e, t, n) { (function (t) { !function (t) {
        "use strict";
        var n, r = Object.prototype, i = r.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, a = o.iterator || "@@iterator", u = o.asyncIterator || "@@asyncIterator", s = o.toStringTag || "@@toStringTag", c = "object" == typeof e, l = t.regeneratorRuntime;
        if (l)
            c && (e.exports = l);
        else {
            (l = t.regeneratorRuntime = c ? e.exports : {}).wrap = w;
            var f = "suspendedStart", p = "suspendedYield", d = "executing", h = "completed", v = {}, m = {};
            m[a] = function () { return this; };
            var y = Object.getPrototypeOf, g = y && y(y(N([])));
            g && g !== r && i.call(g, a) && (m = g);
            var b = S.prototype = x.prototype = Object.create(m);
            k.prototype = b.constructor = S, S.constructor = k, S[s] = k.displayName = "GeneratorFunction", l.isGeneratorFunction = function (e) { var t = "function" == typeof e && e.constructor; return !!t && (t === k || "GeneratorFunction" === (t.displayName || t.name)); }, l.mark = function (e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, S) : (e.__proto__ = S, s in e || (e[s] = "GeneratorFunction")), e.prototype = Object.create(b), e; }, l.awrap = function (e) { return { __await: e }; }, E(O.prototype), O.prototype[u] = function () { return this; }, l.AsyncIterator = O, l.async = function (e, t, n, r) { var i = new O(w(e, t, n, r)); return l.isGeneratorFunction(t) ? i : i.next().then(function (e) { return e.done ? e.value : i.next(); }); }, E(b), b[s] = "Generator", b[a] = function () { return this; }, b.toString = function () { return "[object Generator]"; }, l.keys = function (e) { var t = []; for (var n in e)
                t.push(n); return t.reverse(), function n() { for (; t.length;) {
                var r = t.pop();
                if (r in e)
                    return n.value = r, n.done = !1, n;
            } return n.done = !0, n; }; }, l.values = N, M.prototype = { constructor: M, reset: function (e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = n, this.done = !1, this.delegate = null, this.method = "next", this.arg = n, this.tryEntries.forEach(P), !e)
                    for (var t in this)
                        "t" === t.charAt(0) && i.call(this, t) && !isNaN(+t.slice(1)) && (this[t] = n); }, stop: function () { this.done = !0; var e = this.tryEntries[0].completion; if ("throw" === e.type)
                    throw e.arg; return this.rval; }, dispatchException: function (e) { if (this.done)
                    throw e; var t = this; function r(r, i) { return u.type = "throw", u.arg = e, t.next = r, i && (t.method = "next", t.arg = n), !!i; } for (var o = this.tryEntries.length - 1; o >= 0; --o) {
                    var a = this.tryEntries[o], u = a.completion;
                    if ("root" === a.tryLoc)
                        return r("end");
                    if (a.tryLoc <= this.prev) {
                        var s = i.call(a, "catchLoc"), c = i.call(a, "finallyLoc");
                        if (s && c) {
                            if (this.prev < a.catchLoc)
                                return r(a.catchLoc, !0);
                            if (this.prev < a.finallyLoc)
                                return r(a.finallyLoc);
                        }
                        else if (s) {
                            if (this.prev < a.catchLoc)
                                return r(a.catchLoc, !0);
                        }
                        else {
                            if (!c)
                                throw new Error("try statement without catch or finally");
                            if (this.prev < a.finallyLoc)
                                return r(a.finallyLoc);
                        }
                    }
                } }, abrupt: function (e, t) { for (var n = this.tryEntries.length - 1; n >= 0; --n) {
                    var r = this.tryEntries[n];
                    if (r.tryLoc <= this.prev && i.call(r, "finallyLoc") && this.prev < r.finallyLoc) {
                        var o = r;
                        break;
                    }
                } o && ("break" === e || "continue" === e) && o.tryLoc <= t && t <= o.finallyLoc && (o = null); var a = o ? o.completion : {}; return a.type = e, a.arg = t, o ? (this.method = "next", this.next = o.finallyLoc, v) : this.complete(a); }, complete: function (e, t) { if ("throw" === e.type)
                    throw e.arg; return "break" === e.type || "continue" === e.type ? this.next = e.arg : "return" === e.type ? (this.rval = this.arg = e.arg, this.method = "return", this.next = "end") : "normal" === e.type && t && (this.next = t), v; }, finish: function (e) { for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                    var n = this.tryEntries[t];
                    if (n.finallyLoc === e)
                        return this.complete(n.completion, n.afterLoc), P(n), v;
                } }, catch: function (e) { for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                    var n = this.tryEntries[t];
                    if (n.tryLoc === e) {
                        var r = n.completion;
                        if ("throw" === r.type) {
                            var i = r.arg;
                            P(n);
                        }
                        return i;
                    }
                } throw new Error("illegal catch attempt"); }, delegateYield: function (e, t, r) { return this.delegate = { iterator: N(e), resultName: t, nextLoc: r }, "next" === this.method && (this.arg = n), v; } };
        }
        function w(e, t, n, r) { var i = t && t.prototype instanceof x ? t : x, o = Object.create(i.prototype), a = new M(r || []); return o._invoke = function (e, t, n) { var r = f; return function (i, o) { if (r === d)
            throw new Error("Generator is already running"); if (r === h) {
            if ("throw" === i)
                throw o;
            return j();
        } for (n.method = i, n.arg = o;;) {
            var a = n.delegate;
            if (a) {
                var u = T(a, n);
                if (u) {
                    if (u === v)
                        continue;
                    return u;
                }
            }
            if ("next" === n.method)
                n.sent = n._sent = n.arg;
            else if ("throw" === n.method) {
                if (r === f)
                    throw r = h, n.arg;
                n.dispatchException(n.arg);
            }
            else
                "return" === n.method && n.abrupt("return", n.arg);
            r = d;
            var s = _(e, t, n);
            if ("normal" === s.type) {
                if (r = n.done ? h : p, s.arg === v)
                    continue;
                return { value: s.arg, done: n.done };
            }
            "throw" === s.type && (r = h, n.method = "throw", n.arg = s.arg);
        } }; }(e, n, a), o; }
        function _(e, t, n) { try {
            return { type: "normal", arg: e.call(t, n) };
        }
        catch (e) {
            return { type: "throw", arg: e };
        } }
        function x() { }
        function k() { }
        function S() { }
        function E(e) { ["next", "throw", "return"].forEach(function (t) { e[t] = function (e) { return this._invoke(t, e); }; }); }
        function O(e) { function n(t, r, o, a) { var u = _(e[t], e, r); if ("throw" !== u.type) {
            var s = u.arg, c = s.value;
            return c && "object" == typeof c && i.call(c, "__await") ? Promise.resolve(c.__await).then(function (e) { n("next", e, o, a); }, function (e) { n("throw", e, o, a); }) : Promise.resolve(c).then(function (e) { s.value = e, o(s); }, a);
        } a(u.arg); } var r; "object" == typeof t.process && t.process.domain && (n = t.process.domain.bind(n)), this._invoke = function (e, t) { function i() { return new Promise(function (r, i) { n(e, t, r, i); }); } return r = r ? r.then(i, i) : i(); }; }
        function T(e, t) { var r = e.iterator[t.method]; if (r === n) {
            if (t.delegate = null, "throw" === t.method) {
                if (e.iterator.return && (t.method = "return", t.arg = n, T(e, t), "throw" === t.method))
                    return v;
                t.method = "throw", t.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return v;
        } var i = _(r, e.iterator, t.arg); if ("throw" === i.type)
            return t.method = "throw", t.arg = i.arg, t.delegate = null, v; var o = i.arg; return o ? o.done ? (t[e.resultName] = o.value, t.next = e.nextLoc, "return" !== t.method && (t.method = "next", t.arg = n), t.delegate = null, v) : o : (t.method = "throw", t.arg = new TypeError("iterator result is not an object"), t.delegate = null, v); }
        function C(e) { var t = { tryLoc: e[0] }; 1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t); }
        function P(e) { var t = e.completion || {}; t.type = "normal", delete t.arg, e.completion = t; }
        function M(e) { this.tryEntries = [{ tryLoc: "root" }], e.forEach(C, this), this.reset(!0); }
        function N(e) { if (e) {
            var t = e[a];
            if (t)
                return t.call(e);
            if ("function" == typeof e.next)
                return e;
            if (!isNaN(e.length)) {
                var r = -1, o = function t() { for (; ++r < e.length;)
                    if (i.call(e, r))
                        return t.value = e[r], t.done = !1, t; return t.value = n, t.done = !0, t; };
                return o.next = o;
            }
        } return { next: j }; }
        function j() { return { value: n, done: !0 }; }
    }("object" == typeof t ? t : "object" == typeof window ? window : "object" == typeof self ? self : this); }).call(this, n(51)); }, function (e, t, n) { for (var r = n(78), i = n(41), o = n(14), a = n(2), u = n(15), s = n(45), c = n(6), l = c("iterator"), f = c("toStringTag"), p = s.Array, d = { CSSRuleList: !0, CSSStyleDeclaration: !1, CSSValueList: !1, ClientRectList: !1, DOMRectList: !1, DOMStringList: !1, DOMTokenList: !0, DataTransferItemList: !1, FileList: !1, HTMLAllCollection: !1, HTMLCollection: !1, HTMLFormElement: !1, HTMLSelectElement: !1, MediaList: !0, MimeTypeArray: !1, NamedNodeMap: !1, NodeList: !0, PaintRequestList: !1, Plugin: !1, PluginArray: !1, SVGLengthList: !1, SVGNumberList: !1, SVGPathSegList: !1, SVGPointList: !1, SVGStringList: !1, SVGTransformList: !1, SourceBufferList: !1, StyleSheetList: !0, TextTrackCueList: !1, TextTrackList: !1, TouchList: !1 }, h = i(d), v = 0; v < h.length; v++) {
        var m, y = h[v], g = d[y], b = a[y], w = b && b.prototype;
        if (w && (w[l] || u(w, l, p), w[f] || u(w, f, y), s[y] = p, g))
            for (m in r)
                w[m] || o(w, m, r[m], !0);
    } }, function (e, t, n) { var r = n(0), i = n(77); r(r.G + r.B, { setImmediate: i.set, clearImmediate: i.clear }); }, function (e, t, n) { var r = n(2), i = n(0), o = n(59), a = [].slice, u = /MSIE .\./.test(o), s = function (e) { return function (t, n) { var r = arguments.length > 2, i = !!r && a.call(arguments, 2); return e(r ? function () { ("function" == typeof t ? t : Function(t)).apply(this, i); } : t, n); }; }; i(i.G + i.B + i.F * u, { setTimeout: s(r.setTimeout), setInterval: s(r.setInterval) }); }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(2), o = n(23), a = n(76)(), u = n(6)("observable"), s = n(12), c = n(1), l = n(36), f = n(34), p = n(15), d = n(35), h = d.RETURN, v = function (e) { return null == e ? void 0 : s(e); }, m = function (e) { var t = e._c; t && (e._c = void 0, t()); }, y = function (e) { return void 0 === e._o; }, g = function (e) { y(e) || (e._o = void 0, m(e)); }, b = function (e, t) { c(e), this._c = void 0, this._o = e, e = new w(this); try {
            var n = t(e), r = n;
            null != n && ("function" == typeof n.unsubscribe ? n = function () { r.unsubscribe(); } : s(n), this._c = n);
        }
        catch (t) {
            return void e.error(t);
        } y(this) && m(this); };
        b.prototype = f({}, { unsubscribe: function () { g(this); } });
        var w = function (e) { this._s = e; };
        w.prototype = f({}, { next: function (e) { var t = this._s; if (!y(t)) {
                var n = t._o;
                try {
                    var r = v(n.next);
                    if (r)
                        return r.call(n, e);
                }
                catch (e) {
                    try {
                        g(t);
                    }
                    finally {
                        throw e;
                    }
                }
            } }, error: function (e) { var t = this._s; if (y(t))
                throw e; var n = t._o; t._o = void 0; try {
                var r = v(n.error);
                if (!r)
                    throw e;
                e = r.call(n, e);
            }
            catch (e) {
                try {
                    m(t);
                }
                finally {
                    throw e;
                }
            } return m(t), e; }, complete: function (e) { var t = this._s; if (!y(t)) {
                var n = t._o;
                t._o = void 0;
                try {
                    var r = v(n.complete);
                    e = r ? r.call(n, e) : void 0;
                }
                catch (e) {
                    try {
                        m(t);
                    }
                    finally {
                        throw e;
                    }
                }
                return m(t), e;
            } } });
        var _ = function (e) { l(this, _, "Observable", "_f")._f = s(e); };
        f(_.prototype, { subscribe: function (e) { return new b(e, this._f); }, forEach: function (e) { var t = this; return new (o.Promise || i.Promise)(function (n, r) { s(e); var i = t.subscribe({ next: function (t) { try {
                    return e(t);
                }
                catch (e) {
                    r(e), i.unsubscribe();
                } }, error: r, complete: n }); }); } }), f(_, { from: function (e) { var t = "function" == typeof this ? this : _, n = v(c(e)[u]); if (n) {
                var r = c(n.call(e));
                return r.constructor === t ? r : new t(function (e) { return r.subscribe(e); });
            } return new t(function (t) { var n = !1; return a(function () { if (!n) {
                try {
                    if (d(e, !1, function (e) { if (t.next(e), n)
                        return h; }) === h)
                        return;
                }
                catch (e) {
                    if (n)
                        throw e;
                    return void t.error(e);
                }
                t.complete();
            } }), function () { n = !0; }; }); }, of: function () { for (var e = 0, t = arguments.length, n = new Array(t); e < t;)
                n[e] = arguments[e++]; return new ("function" == typeof this ? this : _)(function (e) { var t = !1; return a(function () { if (!t) {
                for (var r = 0; r < n.length; ++r)
                    if (e.next(n[r]), t)
                        return;
                e.complete();
            } }), function () { t = !0; }; }); } }), p(_.prototype, u, function () { return this; }), r(r.G, { Observable: _ }), n(37)("Observable");
    }, function (e, t, n) { var r = n(0), i = n(76)(), o = n(2).process, a = "process" == n(21)(o); r(r.G, { asap: function (e) { var t = a && o.domain; i(t ? t.bind(e) : e); } }); }, function (e, t, n) { var r = n(29), i = n(1), o = n(12), a = r.key, u = r.set; r.exp({ metadata: function (e, t) { return function (n, r) { u(e, t, (void 0 !== r ? i : o)(n), a(r)); }; } }); }, function (e, t, n) { var r = n(29), i = n(1), o = r.has, a = r.key; r.exp({ hasOwnMetadata: function (e, t) { return o(e, i(t), arguments.length < 3 ? void 0 : a(arguments[2])); } }); }, function (e, t, n) { var r = n(29), i = n(1), o = n(16), a = r.has, u = r.key, s = function (e, t, n) { if (a(e, t, n))
        return !0; var r = o(t); return null !== r && s(e, r, n); }; r.exp({ hasMetadata: function (e, t) { return s(e, i(t), arguments.length < 3 ? void 0 : u(arguments[2])); } }); }, function (e, t, n) { var r = n(29), i = n(1), o = r.keys, a = r.key; r.exp({ getOwnMetadataKeys: function (e) { return o(i(e), arguments.length < 2 ? void 0 : a(arguments[1])); } }); }, function (e, t, n) { var r = n(29), i = n(1), o = r.get, a = r.key; r.exp({ getOwnMetadata: function (e, t) { return o(e, i(t), arguments.length < 3 ? void 0 : a(arguments[2])); } }); }, function (e, t, n) { var r = n(113), i = n(104), o = n(29), a = n(1), u = n(16), s = o.keys, c = o.key, l = function (e, t) { var n = s(e, t), o = u(e); if (null === o)
        return n; var a = l(o, t); return a.length ? n.length ? i(new r(n.concat(a))) : a : n; }; o.exp({ getMetadataKeys: function (e) { return l(a(e), arguments.length < 2 ? void 0 : c(arguments[1])); } }); }, function (e, t, n) { var r = n(29), i = n(1), o = n(16), a = r.has, u = r.get, s = r.key, c = function (e, t, n) { if (a(e, t, n))
        return u(e, t, n); var r = o(t); return null !== r ? c(e, r, n) : void 0; }; r.exp({ getMetadata: function (e, t) { return c(e, i(t), arguments.length < 3 ? void 0 : s(arguments[2])); } }); }, function (e, t, n) { var r = n(29), i = n(1), o = r.key, a = r.map, u = r.store; r.exp({ deleteMetadata: function (e, t) { var n = arguments.length < 3 ? void 0 : o(arguments[2]), r = a(i(t), n, !1); if (void 0 === r || !r.delete(e))
            return !1; if (r.size)
            return !0; var s = u.get(t); return s.delete(n), !!s.size || u.delete(t); } }); }, function (e, t, n) { var r = n(29), i = n(1), o = r.key, a = r.set; r.exp({ defineMetadata: function (e, t, n, r) { a(e, t, i(n), o(r)); } }); }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(75), o = n(117);
        r(r.S, "Promise", { try: function (e) { var t = i.f(this), n = o(e); return (n.e ? t.reject : t.resolve)(n.v), t.promise; } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(23), o = n(2), a = n(60), u = n(116);
        r(r.P + r.R, "Promise", { finally: function (e) { var t = a(this, i.Promise || o.Promise), n = "function" == typeof e; return this.then(n ? function (n) { return u(t, e()).then(function () { return n; }); } : e, n ? function (n) { return u(t, e()).then(function () { throw n; }); } : e); } });
    }, function (e, t, n) { var r = n(0); r(r.S, "Math", { signbit: function (e) { return (e = +e) != e ? e : 0 == e ? 1 / e == 1 / 0 : e > 0; } }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { umulh: function (e, t) { var n = +e, r = +t, i = 65535 & n, o = 65535 & r, a = n >>> 16, u = r >>> 16, s = (a * o >>> 0) + (i * o >>> 16); return a * u + (s >>> 16) + ((i * u >>> 0) + (65535 & s) >>> 16); } }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { scale: n(103) }); }, function (e, t, n) { var r = n(0), i = Math.PI / 180; r(r.S, "Math", { radians: function (e) { return e * i; } }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { RAD_PER_DEG: 180 / Math.PI }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { imulh: function (e, t) { var n = +e, r = +t, i = 65535 & n, o = 65535 & r, a = n >> 16, u = r >> 16, s = (a * o >>> 0) + (i * o >>> 16); return a * u + (s >> 16) + ((i * u >>> 0) + (65535 & s) >> 16); } }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { isubh: function (e, t, n, r) { var i = e >>> 0, o = n >>> 0; return (t >>> 0) - (r >>> 0) - ((~i & o | ~(i ^ o) & i - o >>> 0) >>> 31) | 0; } }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { iaddh: function (e, t, n, r) { var i = e >>> 0, o = n >>> 0; return (t >>> 0) + (r >>> 0) + ((i & o | (i | o) & ~(i + o >>> 0)) >>> 31) | 0; } }); }, function (e, t, n) { var r = n(0), i = n(103), o = n(123); r(r.S, "Math", { fscale: function (e, t, n, r, a) { return o(i(e, t, n, r, a)); } }); }, function (e, t, n) { var r = n(0), i = 180 / Math.PI; r(r.S, "Math", { degrees: function (e) { return e * i; } }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { DEG_PER_RAD: Math.PI / 180 }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { clamp: function (e, t, n) { return Math.min(n, Math.max(t, e)); } }); }, function (e, t, n) { var r = n(0), i = n(21); r(r.S, "Error", { isError: function (e) { return "Error" === i(e); } }); }, function (e, t, n) { var r = n(0); r(r.S, "System", { global: n(2) }); }, function (e, t, n) { var r = n(0); r(r.G, { global: n(2) }); }, function (e, t, n) { n(54)("WeakSet"); }, function (e, t, n) { n(54)("WeakMap"); }, function (e, t, n) { n(54)("Set"); }, function (e, t, n) { n(54)("Map"); }, function (e, t, n) { n(55)("WeakSet"); }, function (e, t, n) { n(55)("WeakMap"); }, function (e, t, n) { n(55)("Set"); }, function (e, t, n) { n(55)("Map"); }, function (e, t, n) { var r = n(0); r(r.P + r.R, "Set", { toJSON: n(105)("Set") }); }, function (e, t, n) { var r = n(0); r(r.P + r.R, "Map", { toJSON: n(105)("Map") }); }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(11), o = n(28), a = n(16), u = n(17).f;
        n(10) && r(r.P + n(56), "Object", { __lookupSetter__: function (e) { var t, n = i(this), r = o(e, !0); do {
                if (t = u(n, r))
                    return t.set;
            } while (n = a(n)); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(11), o = n(28), a = n(16), u = n(17).f;
        n(10) && r(r.P + n(56), "Object", { __lookupGetter__: function (e) { var t, n = i(this), r = o(e, !0); do {
                if (t = u(n, r))
                    return t.get;
            } while (n = a(n)); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(11), o = n(12), a = n(9);
        n(10) && r(r.P + n(56), "Object", { __defineSetter__: function (e, t) { a.f(i(this), e, { set: o(t), enumerable: !0, configurable: !0 }); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(11), o = n(12), a = n(9);
        n(10) && r(r.P + n(56), "Object", { __defineGetter__: function (e, t) { a.f(i(this), e, { get: o(t), enumerable: !0, configurable: !0 }); } });
    }, function (e, t, n) { var r = n(0), i = n(106)(!0); r(r.S, "Object", { entries: function (e) { return i(e); } }); }, function (e, t, n) { var r = n(0), i = n(106)(!1); r(r.S, "Object", { values: function (e) { return i(e); } }); }, function (e, t, n) { var r = n(0), i = n(109), o = n(18), a = n(17), u = n(82); r(r.S, "Object", { getOwnPropertyDescriptors: function (e) { for (var t, n, r = o(e), s = a.f, c = i(r), l = {}, f = 0; c.length > f;)
            void 0 !== (n = s(r, t = c[f++])) && u(l, t, n); return l; } }); }, function (e, t, n) { n(98)("observable"); }, function (e, t, n) { n(98)("asyncIterator"); }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(27), o = n(8), a = n(64), u = n(62), s = RegExp.prototype, c = function (e, t) { this._r = e, this._s = t; };
        n(86)(c, "RegExp String", function () { var e = this._r.exec(this._s); return { value: e, done: null === e }; }), r(r.P, "String", { matchAll: function (e) { if (i(this), !a(e))
                throw TypeError(e + " is not a regexp!"); var t = String(this), n = "flags" in s ? String(e.flags) : u.call(e), r = new RegExp(e.source, ~n.indexOf("g") ? n : "g" + n); return r.lastIndex = o(e.lastIndex), new c(r, t); } });
    }, function (e, t, n) {
        "use strict";
        n(46)("trimRight", function (e) { return function () { return e(this, 2); }; }, "trimEnd");
    }, function (e, t, n) {
        "use strict";
        n(46)("trimLeft", function (e) { return function () { return e(this, 1); }; }, "trimStart");
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(107), o = n(59);
        r(r.P + r.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(o), "String", { padEnd: function (e) { return i(this, e, arguments.length > 1 ? arguments[1] : void 0, !1); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(107), o = n(59);
        r(r.P + r.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(o), "String", { padStart: function (e) { return i(this, e, arguments.length > 1 ? arguments[1] : void 0, !0); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(88)(!0);
        r(r.P, "String", { at: function (e) { return i(this, e); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(108), o = n(11), a = n(8), u = n(26), s = n(80);
        r(r.P, "Array", { flatten: function () { var e = arguments[0], t = o(this), n = a(t.length), r = s(t, 0); return i(r, t, t, n, 0, void 0 === e ? 1 : u(e)), r; } }), n(31)("flatten");
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(108), o = n(11), a = n(8), u = n(12), s = n(80);
        r(r.P, "Array", { flatMap: function (e) { var t, n, r = o(this); return u(e), t = a(r.length), n = s(r, 0), i(n, r, r, t, 0, 1, e, arguments[1]), n; } }), n(31)("flatMap");
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(67)(!0);
        r(r.P, "Array", { includes: function (e) { return i(this, e, arguments.length > 1 ? arguments[1] : void 0); } }), n(31)("includes");
    }, function (e, t, n) { var r = n(0), i = n(94); i && r(r.S, "Reflect", { setPrototypeOf: function (e, t) { i.check(e, t); try {
            return i.set(e, t), !0;
        }
        catch (e) {
            return !1;
        } } }); }, function (e, t, n) { var r = n(9), i = n(17), o = n(16), a = n(19), u = n(0), s = n(43), c = n(1), l = n(4); u(u.S, "Reflect", { set: function e(t, n, u) { var f, p, d = arguments.length < 4 ? t : arguments[3], h = i.f(c(t), n); if (!h) {
            if (l(p = o(t)))
                return e(p, n, u, d);
            h = s(0);
        } if (a(h, "value")) {
            if (!1 === h.writable || !l(d))
                return !1;
            if (f = i.f(d, n)) {
                if (f.get || f.set || !1 === f.writable)
                    return !1;
                f.value = u, r.f(d, n, f);
            }
            else
                r.f(d, n, s(0, u));
            return !0;
        } return void 0 !== h.set && (h.set.call(d, u), !0); } }); }, function (e, t, n) { var r = n(0), i = n(1), o = Object.preventExtensions; r(r.S, "Reflect", { preventExtensions: function (e) { i(e); try {
            return o && o(e), !0;
        }
        catch (e) {
            return !1;
        } } }); }, function (e, t, n) { var r = n(0); r(r.S, "Reflect", { ownKeys: n(109) }); }, function (e, t, n) { var r = n(0), i = n(1), o = Object.isExtensible; r(r.S, "Reflect", { isExtensible: function (e) { return i(e), !o || o(e); } }); }, function (e, t, n) { var r = n(0); r(r.S, "Reflect", { has: function (e, t) { return t in e; } }); }, function (e, t, n) { var r = n(0), i = n(16), o = n(1); r(r.S, "Reflect", { getPrototypeOf: function (e) { return i(o(e)); } }); }, function (e, t, n) { var r = n(17), i = n(0), o = n(1); i(i.S, "Reflect", { getOwnPropertyDescriptor: function (e, t) { return r.f(o(e), t); } }); }, function (e, t, n) { var r = n(17), i = n(16), o = n(19), a = n(0), u = n(4), s = n(1); a(a.S, "Reflect", { get: function e(t, n) { var a, c, l = arguments.length < 3 ? t : arguments[2]; return s(t) === l ? t[n] : (a = r.f(t, n)) ? o(a, "value") ? a.value : void 0 !== a.get ? a.get.call(l) : void 0 : u(c = i(t)) ? e(c, n, l) : void 0; } }); }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(1), o = function (e) { this._t = i(e), this._i = 0; var t, n = this._k = []; for (t in e)
            n.push(t); };
        n(86)(o, "Object", function () { var e, t = this._k; do {
            if (this._i >= t.length)
                return { value: void 0, done: !0 };
        } while (!((e = t[this._i++]) in this._t)); return { value: e, done: !1 }; }), r(r.S, "Reflect", { enumerate: function (e) { return new o(e); } });
    }, function (e, t, n) { var r = n(0), i = n(17).f, o = n(1); r(r.S, "Reflect", { deleteProperty: function (e, t) { var n = i(o(e), t); return !(n && !n.configurable) && delete e[t]; } }); }, function (e, t, n) { var r = n(9), i = n(0), o = n(1), a = n(28); i(i.S + i.F * n(3)(function () { Reflect.defineProperty(r.f({}, 1, { value: 1 }), 1, { value: 2 }); }), "Reflect", { defineProperty: function (e, t, n) { o(e), t = a(t, !0), o(n); try {
            return r.f(e, t, n), !0;
        }
        catch (e) {
            return !1;
        } } }); }, function (e, t, n) { var r = n(0), i = n(39), o = n(12), a = n(1), u = n(4), s = n(3), c = n(130), l = (n(2).Reflect || {}).construct, f = s(function () { function e() { } return !(l(function () { }, [], e) instanceof e); }), p = !s(function () { l(function () { }); }); r(r.S + r.F * (f || p), "Reflect", { construct: function (e, t) { o(e), a(t); var n = arguments.length < 3 ? e : o(arguments[2]); if (p && !f)
            return l(e, t, n); if (e == n) {
            switch (t.length) {
                case 0: return new e;
                case 1: return new e(t[0]);
                case 2: return new e(t[0], t[1]);
                case 3: return new e(t[0], t[1], t[2]);
                case 4: return new e(t[0], t[1], t[2], t[3]);
            }
            var r = [null];
            return r.push.apply(r, t), new (c.apply(e, r));
        } var s = n.prototype, d = i(u(s) ? s : Object.prototype), h = Function.apply.call(e, d, t); return u(h) ? h : d; } }); }, function (e, t, n) { var r = n(0), i = n(12), o = n(1), a = (n(2).Reflect || {}).apply, u = Function.apply; r(r.S + r.F * !n(3)(function () { a(function () { }); }), "Reflect", { apply: function (e, t, n) { var r = i(e), s = o(n); return a ? a(r, t, s) : u.call(r, t, s); } }); }, function (e, t, n) { n(30)("Float64", 8, function (e) { return function (t, n, r) { return e(this, t, n, r); }; }); }, function (e, t, n) { n(30)("Float32", 4, function (e) { return function (t, n, r) { return e(this, t, n, r); }; }); }, function (e, t, n) { n(30)("Uint32", 4, function (e) { return function (t, n, r) { return e(this, t, n, r); }; }); }, function (e, t, n) { n(30)("Int32", 4, function (e) { return function (t, n, r) { return e(this, t, n, r); }; }); }, function (e, t, n) { n(30)("Uint16", 2, function (e) { return function (t, n, r) { return e(this, t, n, r); }; }); }, function (e, t, n) { n(30)("Int16", 2, function (e) { return function (t, n, r) { return e(this, t, n, r); }; }); }, function (e, t, n) { n(30)("Uint8", 1, function (e) { return function (t, n, r) { return e(this, t, n, r); }; }, !0); }, function (e, t, n) { n(30)("Uint8", 1, function (e) { return function (t, n, r) { return e(this, t, n, r); }; }); }, function (e, t, n) { n(30)("Int8", 1, function (e) { return function (t, n, r) { return e(this, t, n, r); }; }); }, function (e, t, n) { var r = n(0); r(r.G + r.W + r.F * !n(57).ABV, { DataView: n(74).DataView }); }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(57), o = n(74), a = n(1), u = n(40), s = n(8), c = n(4), l = n(2).ArrayBuffer, f = n(60), p = o.ArrayBuffer, d = o.DataView, h = i.ABV && l.isView, v = p.prototype.slice, m = i.VIEW;
        r(r.G + r.W + r.F * (l !== p), { ArrayBuffer: p }), r(r.S + r.F * !i.CONSTR, "ArrayBuffer", { isView: function (e) { return h && h(e) || c(e) && m in e; } }), r(r.P + r.U + r.F * n(3)(function () { return !new p(2).slice(1, void 0).byteLength; }), "ArrayBuffer", { slice: function (e, t) { if (void 0 !== v && void 0 === t)
                return v.call(a(this), e); for (var n = a(this).byteLength, r = u(e, n), i = u(void 0 === t ? n : t, n), o = new (f(this, p))(s(i - r)), c = new d(this), l = new d(o), h = 0; r < i;)
                l.setUint8(h++, c.getUint8(r++)); return o; } }), n(37)("ArrayBuffer");
    }, function (e, t, n) {
        "use strict";
        var r = n(111), i = n(44);
        n(58)("WeakSet", function (e) { return function () { return e(this, arguments.length > 0 ? arguments[0] : void 0); }; }, { add: function (e) { return r.def(i(this, "WeakSet"), e, !0); } }, r, !1, !0);
    }, function (e, t, n) {
        "use strict";
        var r, i, o, a, u = n(32), s = n(2), c = n(22), l = n(48), f = n(0), p = n(4), d = n(12), h = n(36), v = n(35), m = n(60), y = n(77).set, g = n(76)(), b = n(75), w = n(117), _ = n(59), x = n(116), k = s.TypeError, S = s.process, E = S && S.versions, O = E && E.v8 || "", T = s.Promise, C = "process" == l(S), P = function () { }, M = i = b.f, N = !!function () { try {
            var e = T.resolve(1), t = (e.constructor = {})[n(6)("species")] = function (e) { e(P, P); };
            return (C || "function" == typeof PromiseRejectionEvent) && e.then(P) instanceof t && 0 !== O.indexOf("6.6") && -1 === _.indexOf("Chrome/66");
        }
        catch (e) { } }(), j = function (e) { var t; return !(!p(e) || "function" != typeof (t = e.then)) && t; }, A = function (e, t) { if (!e._n) {
            e._n = !0;
            var n = e._c;
            g(function () { for (var r = e._v, i = 1 == e._s, o = 0, a = function (t) { var n, o, a, u = i ? t.ok : t.fail, s = t.resolve, c = t.reject, l = t.domain; try {
                u ? (i || (2 == e._h && R(e), e._h = 1), !0 === u ? n = r : (l && l.enter(), n = u(r), l && (l.exit(), a = !0)), n === t.promise ? c(k("Promise-chain cycle")) : (o = j(n)) ? o.call(n, s, c) : s(n)) : c(r);
            }
            catch (e) {
                l && !a && l.exit(), c(e);
            } }; n.length > o;)
                a(n[o++]); e._c = [], e._n = !1, t && !e._h && L(e); });
        } }, L = function (e) { y.call(s, function () { var t, n, r, i = e._v, o = I(e); if (o && (t = w(function () { C ? S.emit("unhandledRejection", i, e) : (n = s.onunhandledrejection) ? n({ promise: e, reason: i }) : (r = s.console) && r.error && r.error("Unhandled promise rejection", i); }), e._h = C || I(e) ? 2 : 1), e._a = void 0, o && t.e)
            throw t.v; }); }, I = function (e) { return 1 !== e._h && 0 === (e._a || e._c).length; }, R = function (e) { y.call(s, function () { var t; C ? S.emit("rejectionHandled", e) : (t = s.onrejectionhandled) && t({ promise: e, reason: e._v }); }); }, z = function (e) { var t = this; t._d || (t._d = !0, (t = t._w || t)._v = e, t._s = 2, t._a || (t._a = t._c.slice()), A(t, !0)); }, F = function (e) { var t, n = this; if (!n._d) {
            n._d = !0, n = n._w || n;
            try {
                if (n === e)
                    throw k("Promise can't be resolved itself");
                (t = j(e)) ? g(function () { var r = { _w: n, _d: !1 }; try {
                    t.call(e, c(F, r, 1), c(z, r, 1));
                }
                catch (e) {
                    z.call(r, e);
                } }) : (n._v = e, n._s = 1, A(n, !1));
            }
            catch (e) {
                z.call({ _w: n, _d: !1 }, e);
            }
        } };
        N || (T = function (e) { h(this, T, "Promise", "_h"), d(e), r.call(this); try {
            e(c(F, this, 1), c(z, this, 1));
        }
        catch (e) {
            z.call(this, e);
        } }, (r = function (e) { this._c = [], this._a = void 0, this._s = 0, this._d = !1, this._v = void 0, this._h = 0, this._n = !1; }).prototype = n(34)(T.prototype, { then: function (e, t) { var n = M(m(this, T)); return n.ok = "function" != typeof e || e, n.fail = "function" == typeof t && t, n.domain = C ? S.domain : void 0, this._c.push(n), this._a && this._a.push(n), this._s && A(this, !1), n.promise; }, catch: function (e) { return this.then(void 0, e); } }), o = function () { var e = new r; this.promise = e, this.resolve = c(F, e, 1), this.reject = c(z, e, 1); }, b.f = M = function (e) { return e === T || e === a ? new o(e) : i(e); }), f(f.G + f.W + f.F * !N, { Promise: T }), n(47)(T, "Promise"), n(37)("Promise"), a = n(23).Promise, f(f.S + f.F * !N, "Promise", { reject: function (e) { var t = M(this); return (0, t.reject)(e), t.promise; } }), f(f.S + f.F * (u || !N), "Promise", { resolve: function (e) { return x(u && this === a ? T : this, e); } }), f(f.S + f.F * !(N && n(63)(function (e) { T.all(e).catch(P); })), "Promise", { all: function (e) { var t = this, n = M(t), r = n.resolve, i = n.reject, o = w(function () { var n = [], o = 0, a = 1; v(e, !1, function (e) { var u = o++, s = !1; n.push(void 0), a++, t.resolve(e).then(function (e) { s || (s = !0, n[u] = e, --a || r(n)); }, i); }), --a || r(n); }); return o.e && i(o.v), n.promise; }, race: function (e) { var t = this, n = M(t), r = n.reject, i = w(function () { v(e, !1, function (e) { t.resolve(e).then(n.resolve, r); }); }); return i.e && r(i.v), n.promise; } });
    }, function (e, t, n) { n(61)("split", 2, function (e, t, r) {
        "use strict";
        var i = n(64), o = r, a = [].push;
        if ("c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || ".".split(/()()/).length > 1 || "".split(/.?/).length) {
            var u = void 0 === /()??/.exec("")[1];
            r = function (e, t) { var n = String(this); if (void 0 === e && 0 === t)
                return []; if (!i(e))
                return o.call(n, e, t); var r, s, c, l, f, p = [], d = (e.ignoreCase ? "i" : "") + (e.multiline ? "m" : "") + (e.unicode ? "u" : "") + (e.sticky ? "y" : ""), h = 0, v = void 0 === t ? 4294967295 : t >>> 0, m = new RegExp(e.source, d + "g"); for (u || (r = new RegExp("^" + m.source + "$(?!\\s)", d)); (s = m.exec(n)) && !((c = s.index + s[0].length) > h && (p.push(n.slice(h, s.index)), !u && s.length > 1 && s[0].replace(r, function () { for (f = 1; f < arguments.length - 2; f++)
                void 0 === arguments[f] && (s[f] = void 0); }), s.length > 1 && s.index < n.length && a.apply(p, s.slice(1)), l = s[0].length, h = c, p.length >= v));)
                m.lastIndex === s.index && m.lastIndex++; return h === n.length ? !l && m.test("") || p.push("") : p.push(n.slice(h)), p.length > v ? p.slice(0, v) : p; };
        }
        else
            "0".split(void 0, 0).length && (r = function (e, t) { return void 0 === e && 0 === t ? [] : o.call(this, e, t); });
        return [function (n, i) { var o = e(this), a = void 0 == n ? void 0 : n[t]; return void 0 !== a ? a.call(n, o, i) : r.call(String(o), n, i); }, r];
    }); }, function (e, t, n) { n(61)("search", 1, function (e, t, n) { return [function (n) {
            "use strict";
            var r = e(this), i = void 0 == n ? void 0 : n[t];
            return void 0 !== i ? i.call(n, r) : new RegExp(n)[t](String(r));
        }, n]; }); }, function (e, t, n) { n(61)("replace", 2, function (e, t, n) { return [function (r, i) {
            "use strict";
            var o = e(this), a = void 0 == r ? void 0 : r[t];
            return void 0 !== a ? a.call(r, o, i) : n.call(String(o), r, i);
        }, n]; }); }, function (e, t, n) { n(61)("match", 1, function (e, t, n) { return [function (n) {
            "use strict";
            var r = e(this), i = void 0 == n ? void 0 : n[t];
            return void 0 !== i ? i.call(n, r) : new RegExp(n)[t](String(r));
        }, n]; }); }, function (e, t, n) {
        "use strict";
        n(118);
        var r = n(1), i = n(62), o = n(10), a = /./.toString, u = function (e) { n(14)(RegExp.prototype, "toString", e, !0); };
        n(3)(function () { return "/a/b" != a.call({ source: "a", flags: "b" }); }) ? u(function () { var e = r(this); return "/".concat(e.source, "/", "flags" in e ? e.flags : !o && e instanceof RegExp ? i.call(e) : void 0); }) : "toString" != a.name && u(function () { return a.call(this); });
    }, function (e, t, n) { var r = n(2), i = n(92), o = n(9).f, a = n(38).f, u = n(64), s = n(62), c = r.RegExp, l = c, f = c.prototype, p = /a/g, d = /a/g, h = new c(p) !== p; if (n(10) && (!h || n(3)(function () { return d[n(6)("match")] = !1, c(p) != p || c(d) == d || "/a/i" != c(p, "i"); }))) {
        c = function (e, t) { var n = this instanceof c, r = u(e), o = void 0 === t; return !n && r && e.constructor === c && o ? e : i(h ? new l(r && !o ? e.source : e, t) : l((r = e instanceof c) ? e.source : e, r && o ? s.call(e) : t), n ? this : f, c); };
        for (var v = function (e) { e in c || o(c, e, { configurable: !0, get: function () { return l[e]; }, set: function (t) { l[e] = t; } }); }, m = a(l), y = 0; m.length > y;)
            v(m[y++]);
        f.constructor = c, c.prototype = f, n(14)(r, "RegExp", c);
    } n(37)("RegExp"); }, function (e, t, n) { n(37)("Array"); }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(24)(6), o = "findIndex", a = !0;
        o in [] && Array(1)[o](function () { a = !1; }), r(r.P + r.F * a, "Array", { findIndex: function (e) { return i(this, e, arguments.length > 1 ? arguments[1] : void 0); } }), n(31)(o);
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(24)(5), o = !0;
        "find" in [] && Array(1).find(function () { o = !1; }), r(r.P + r.F * o, "Array", { find: function (e) { return i(this, e, arguments.length > 1 ? arguments[1] : void 0); } }), n(31)("find");
    }, function (e, t, n) { var r = n(0); r(r.P, "Array", { fill: n(79) }), n(31)("fill"); }, function (e, t, n) { var r = n(0); r(r.P, "Array", { copyWithin: n(120) }), n(31)("copyWithin"); }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(18), o = n(26), a = n(8), u = [].lastIndexOf, s = !!u && 1 / [1].lastIndexOf(1, -0) < 0;
        r(r.P + r.F * (s || !n(20)(u)), "Array", { lastIndexOf: function (e) { if (s)
                return u.apply(this, arguments) || 0; var t = i(this), n = a(t.length), r = n - 1; for (arguments.length > 1 && (r = Math.min(r, o(arguments[1]))), r < 0 && (r = n + r); r >= 0; r--)
                if (r in t && t[r] === e)
                    return r || 0; return -1; } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(67)(!1), o = [].indexOf, a = !!o && 1 / [1].indexOf(1, -0) < 0;
        r(r.P + r.F * (a || !n(20)(o)), "Array", { indexOf: function (e) { return a ? o.apply(this, arguments) || 0 : i(this, e, arguments[1]); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(121);
        r(r.P + r.F * !n(20)([].reduceRight, !0), "Array", { reduceRight: function (e) { return i(this, e, arguments.length, arguments[1], !0); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(121);
        r(r.P + r.F * !n(20)([].reduce, !0), "Array", { reduce: function (e) { return i(this, e, arguments.length, arguments[1], !1); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(24)(4);
        r(r.P + r.F * !n(20)([].every, !0), "Array", { every: function (e) { return i(this, e, arguments[1]); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(24)(3);
        r(r.P + r.F * !n(20)([].some, !0), "Array", { some: function (e) { return i(this, e, arguments[1]); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(24)(2);
        r(r.P + r.F * !n(20)([].filter, !0), "Array", { filter: function (e) { return i(this, e, arguments[1]); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(24)(1);
        r(r.P + r.F * !n(20)([].map, !0), "Array", { map: function (e) { return i(this, e, arguments[1]); } });
    }, function (e, t, n) { var r = n(4), i = n(65), o = n(6)("species"); e.exports = function (e) { var t; return i(e) && ("function" != typeof (t = e.constructor) || t !== Array && !i(t.prototype) || (t = void 0), r(t) && null === (t = t[o]) && (t = void 0)), void 0 === t ? Array : t; }; }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(24)(0), o = n(20)([].forEach, !0);
        r(r.P + r.F * !o, "Array", { forEach: function (e) { return i(this, e, arguments[1]); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(12), o = n(11), a = n(3), u = [].sort, s = [1, 2, 3];
        r(r.P + r.F * (a(function () { s.sort(void 0); }) || !a(function () { s.sort(null); }) || !n(20)(u)), "Array", { sort: function (e) { return void 0 === e ? u.call(o(this)) : u.call(o(this), i(e)); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(95), o = n(21), a = n(40), u = n(8), s = [].slice;
        r(r.P + r.F * n(3)(function () { i && s.call(i); }), "Array", { slice: function (e, t) { var n = u(this.length), r = o(this); if (t = void 0 === t ? n : t, "Array" == r)
                return s.call(this, e, t); for (var i = a(e, n), c = a(t, n), l = u(c - i), f = new Array(l), p = 0; p < l; p++)
                f[p] = "String" == r ? this.charAt(i + p) : this[i + p]; return f; } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(18), o = [].join;
        r(r.P + r.F * (n(50) != Object || !n(20)(o)), "Array", { join: function (e) { return o.call(i(this), void 0 === e ? "," : e); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(82);
        r(r.S + r.F * n(3)(function () { function e() { } return !(Array.of.call(e) instanceof e); }), "Array", { of: function () { for (var e = 0, t = arguments.length, n = new ("function" == typeof this ? this : Array)(t); t > e;)
                i(n, e, arguments[e++]); return n.length = t, n; } });
    }, function (e, t, n) {
        "use strict";
        var r = n(22), i = n(0), o = n(11), a = n(122), u = n(83), s = n(8), c = n(82), l = n(81);
        i(i.S + i.F * !n(63)(function (e) { Array.from(e); }), "Array", { from: function (e) { var t, n, i, f, p = o(e), d = "function" == typeof this ? this : Array, h = arguments.length, v = h > 1 ? arguments[1] : void 0, m = void 0 !== v, y = 0, g = l(p); if (m && (v = r(v, h > 2 ? arguments[2] : void 0, 2)), void 0 == g || d == Array && u(g))
                for (n = new d(t = s(p.length)); t > y; y++)
                    c(n, y, m ? v(p[y], y) : p[y]);
            else
                for (f = g.call(p), n = new d; !(i = f.next()).done; y++)
                    c(n, y, m ? a(f, v, [i.value, y], !0) : i.value); return n.length = y, n; } });
    }, function (e, t, n) { var r = n(0); r(r.S, "Array", { isArray: n(65) }); }, function (e, t, n) {
        "use strict";
        var r = n(1), i = n(28);
        e.exports = function (e) { if ("string" !== e && "number" !== e && "default" !== e)
            throw TypeError("Incorrect hint"); return i(r(this), "number" != e); };
    }, function (e, t, n) { var r = n(6)("toPrimitive"), i = Date.prototype; r in i || n(15)(i, r, n(324)); }, function (e, t, n) { var r = Date.prototype, i = r.toString, o = r.getTime; new Date(NaN) + "" != "Invalid Date" && n(14)(r, "toString", function () { var e = o.call(this); return e == e ? i.call(this) : "Invalid Date"; }); }, function (e, t, n) {
        "use strict";
        var r = n(3), i = Date.prototype.getTime, o = Date.prototype.toISOString, a = function (e) { return e > 9 ? e : "0" + e; };
        e.exports = r(function () { return "0385-07-25T07:06:39.999Z" != o.call(new Date(-5e13 - 1)); }) || !r(function () { o.call(new Date(NaN)); }) ? function () { if (!isFinite(i.call(this)))
            throw RangeError("Invalid time value"); var e = this, t = e.getUTCFullYear(), n = e.getUTCMilliseconds(), r = t < 0 ? "-" : t > 9999 ? "+" : ""; return r + ("00000" + Math.abs(t)).slice(r ? -6 : -4) + "-" + a(e.getUTCMonth() + 1) + "-" + a(e.getUTCDate()) + "T" + a(e.getUTCHours()) + ":" + a(e.getUTCMinutes()) + ":" + a(e.getUTCSeconds()) + "." + (n > 99 ? n : "0" + a(n)) + "Z"; } : o;
    }, function (e, t, n) { var r = n(0), i = n(327); r(r.P + r.F * (Date.prototype.toISOString !== i), "Date", { toISOString: i }); }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(11), o = n(28);
        r(r.P + r.F * n(3)(function () { return null !== new Date(NaN).toJSON() || 1 !== Date.prototype.toJSON.call({ toISOString: function () { return 1; } }); }), "Date", { toJSON: function (e) { var t = i(this), n = o(t); return "number" != typeof n || isFinite(n) ? t.toISOString() : null; } });
    }, function (e, t, n) { var r = n(0); r(r.S, "Date", { now: function () { return (new Date).getTime(); } }); }, function (e, t, n) {
        "use strict";
        n(13)("sup", function (e) { return function () { return e(this, "sup", "", ""); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("sub", function (e) { return function () { return e(this, "sub", "", ""); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("strike", function (e) { return function () { return e(this, "strike", "", ""); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("small", function (e) { return function () { return e(this, "small", "", ""); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("link", function (e) { return function (t) { return e(this, "a", "href", t); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("italics", function (e) { return function () { return e(this, "i", "", ""); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("fontsize", function (e) { return function (t) { return e(this, "font", "size", t); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("fontcolor", function (e) { return function (t) { return e(this, "font", "color", t); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("fixed", function (e) { return function () { return e(this, "tt", "", ""); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("bold", function (e) { return function () { return e(this, "b", "", ""); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("blink", function (e) { return function () { return e(this, "blink", "", ""); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("big", function (e) { return function () { return e(this, "big", "", ""); }; });
    }, function (e, t, n) {
        "use strict";
        n(13)("anchor", function (e) { return function (t) { return e(this, "a", "name", t); }; });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(8), o = n(85), a = "".startsWith;
        r(r.P + r.F * n(84)("startsWith"), "String", { startsWith: function (e) { var t = o(this, e, "startsWith"), n = i(Math.min(arguments.length > 1 ? arguments[1] : void 0, t.length)), r = String(e); return a ? a.call(t, r, n) : t.slice(n, n + r.length) === r; } });
    }, function (e, t, n) { var r = n(0); r(r.P, "String", { repeat: n(91) }); }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(85);
        r(r.P + r.F * n(84)("includes"), "String", { includes: function (e) { return !!~i(this, e, "includes").indexOf(e, arguments.length > 1 ? arguments[1] : void 0); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(8), o = n(85), a = "".endsWith;
        r(r.P + r.F * n(84)("endsWith"), "String", { endsWith: function (e) { var t = o(this, e, "endsWith"), n = arguments.length > 1 ? arguments[1] : void 0, r = i(t.length), u = void 0 === n ? r : Math.min(i(n), r), s = String(e); return a ? a.call(t, s, u) : t.slice(u - s.length, u) === s; } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(88)(!1);
        r(r.P, "String", { codePointAt: function (e) { return i(this, e); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(88)(!0);
        n(87)(String, "String", function (e) { this._t = String(e), this._i = 0; }, function () { var e, t = this._t, n = this._i; return n >= t.length ? { value: void 0, done: !0 } : (e = r(t, n), this._i += e.length, { value: e, done: !1 }); });
    }, function (e, t, n) {
        "use strict";
        n(46)("trim", function (e) { return function () { return e(this, 3); }; });
    }, function (e, t, n) { var r = n(0), i = n(18), o = n(8); r(r.S, "String", { raw: function (e) { for (var t = i(e.raw), n = o(t.length), r = arguments.length, a = [], u = 0; n > u;)
            a.push(String(t[u++])), u < r && a.push(String(arguments[u])); return a.join(""); } }); }, function (e, t, n) { var r = n(0), i = n(40), o = String.fromCharCode, a = String.fromCodePoint; r(r.S + r.F * (!!a && 1 != a.length), "String", { fromCodePoint: function (e) { for (var t, n = [], r = arguments.length, a = 0; r > a;) {
            if (t = +arguments[a++], i(t, 1114111) !== t)
                throw RangeError(t + " is not a valid code point");
            n.push(t < 65536 ? o(t) : o(55296 + ((t -= 65536) >> 10), t % 1024 + 56320));
        } return n.join(""); } }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { trunc: function (e) { return (e > 0 ? Math.floor : Math.ceil)(e); } }); }, function (e, t, n) { var r = n(0), i = n(89), o = Math.exp; r(r.S, "Math", { tanh: function (e) { var t = i(e = +e), n = i(-e); return t == 1 / 0 ? 1 : n == 1 / 0 ? -1 : (t - n) / (o(e) + o(-e)); } }); }, function (e, t, n) { var r = n(0), i = n(89), o = Math.exp; r(r.S + r.F * n(3)(function () { return -2e-17 != !Math.sinh(-2e-17); }), "Math", { sinh: function (e) { return Math.abs(e = +e) < 1 ? (i(e) - i(-e)) / 2 : (o(e - 1) - o(-e - 1)) * (Math.E / 2); } }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { sign: n(90) }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { log2: function (e) { return Math.log(e) / Math.LN2; } }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { log1p: n(124) }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { log10: function (e) { return Math.log(e) * Math.LOG10E; } }); }, function (e, t, n) { var r = n(0), i = Math.imul; r(r.S + r.F * n(3)(function () { return -5 != i(4294967295, 5) || 2 != i.length; }), "Math", { imul: function (e, t) { var n = +e, r = +t, i = 65535 & n, o = 65535 & r; return 0 | i * o + ((65535 & n >>> 16) * o + i * (65535 & r >>> 16) << 16 >>> 0); } }); }, function (e, t, n) { var r = n(0), i = Math.abs; r(r.S, "Math", { hypot: function (e, t) { for (var n, r, o = 0, a = 0, u = arguments.length, s = 0; a < u;)
            s < (n = i(arguments[a++])) ? (o = o * (r = s / n) * r + 1, s = n) : o += n > 0 ? (r = n / s) * r : n; return s === 1 / 0 ? 1 / 0 : s * Math.sqrt(o); } }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { fround: n(123) }); }, function (e, t, n) { var r = n(0), i = n(89); r(r.S + r.F * (i != Math.expm1), "Math", { expm1: i }); }, function (e, t, n) { var r = n(0), i = Math.exp; r(r.S, "Math", { cosh: function (e) { return (i(e = +e) + i(-e)) / 2; } }); }, function (e, t, n) { var r = n(0); r(r.S, "Math", { clz32: function (e) { return (e >>>= 0) ? 31 - Math.floor(Math.log(e + .5) * Math.LOG2E) : 32; } }); }, function (e, t, n) { var r = n(0), i = n(90); r(r.S, "Math", { cbrt: function (e) { return i(e = +e) * Math.pow(Math.abs(e), 1 / 3); } }); }, function (e, t, n) { var r = n(0), i = Math.atanh; r(r.S + r.F * !(i && 1 / i(-0) < 0), "Math", { atanh: function (e) { return 0 == (e = +e) ? e : Math.log((1 + e) / (1 - e)) / 2; } }); }, function (e, t, n) { var r = n(0), i = Math.asinh; r(r.S + r.F * !(i && 1 / i(0) > 0), "Math", { asinh: function e(t) { return isFinite(t = +t) && 0 != t ? t < 0 ? -e(-t) : Math.log(t + Math.sqrt(t * t + 1)) : t; } }); }, function (e, t, n) { var r = n(0), i = n(124), o = Math.sqrt, a = Math.acosh; r(r.S + r.F * !(a && 710 == Math.floor(a(Number.MAX_VALUE)) && a(1 / 0) == 1 / 0), "Math", { acosh: function (e) { return (e = +e) < 1 ? NaN : e > 94906265.62425156 ? Math.log(e) + Math.LN2 : i(e - 1 + o(e - 1) * o(e + 1)); } }); }, function (e, t, n) { var r = n(0), i = n(128); r(r.S + r.F * (Number.parseInt != i), "Number", { parseInt: i }); }, function (e, t, n) { var r = n(0), i = n(127); r(r.S + r.F * (Number.parseFloat != i), "Number", { parseFloat: i }); }, function (e, t, n) { var r = n(0); r(r.S, "Number", { MIN_SAFE_INTEGER: -9007199254740991 }); }, function (e, t, n) { var r = n(0); r(r.S, "Number", { MAX_SAFE_INTEGER: 9007199254740991 }); }, function (e, t, n) { var r = n(0), i = n(125), o = Math.abs; r(r.S, "Number", { isSafeInteger: function (e) { return i(e) && o(e) <= 9007199254740991; } }); }, function (e, t, n) { var r = n(0); r(r.S, "Number", { isNaN: function (e) { return e != e; } }); }, function (e, t, n) { var r = n(0); r(r.S, "Number", { isInteger: n(125) }); }, function (e, t, n) { var r = n(0), i = n(2).isFinite; r(r.S, "Number", { isFinite: function (e) { return "number" == typeof e && i(e); } }); }, function (e, t, n) { var r = n(0); r(r.S, "Number", { EPSILON: Math.pow(2, -52) }); }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(3), o = n(126), a = 1..toPrecision;
        r(r.P + r.F * (i(function () { return "1" !== a.call(1, void 0); }) || !i(function () { a.call({}); })), "Number", { toPrecision: function (e) { var t = o(this, "Number#toPrecision: incorrect invocation!"); return void 0 === e ? a.call(t) : a.call(t, e); } });
    }, function (e, t, n) {
        "use strict";
        var r = n(0), i = n(26), o = n(126), a = n(91), u = 1..toFixed, s = Math.floor, c = [0, 0, 0, 0, 0, 0], l = "Number.toFixed: incorrect invocation!", f = function (e, t) { for (var n = -1, r = t; ++n < 6;)
            r += e * c[n], c[n] = r % 1e7, r = s(r / 1e7); }, p = function (e) { for (var t = 6, n = 0; --t >= 0;)
            n += c[t], c[t] = s(n / e), n = n % e * 1e7; }, d = function () { for (var e = 6, t = ""; --e >= 0;)
            if ("" !== t || 0 === e || 0 !== c[e]) {
                var n = String(c[e]);
                t = "" === t ? n : t + a.call("0", 7 - n.length) + n;
            } return t; }, h = function (e, t, n) { return 0 === t ? n : t % 2 == 1 ? h(e, t - 1, n * e) : h(e * e, t / 2, n); };
        r(r.P + r.F * (!!u && ("0.000" !== 8e-5.toFixed(3) || "1" !== .9.toFixed(0) || "1.25" !== 1.255.toFixed(2) || "1000000000000000128" !== (0xde0b6b3a7640080).toFixed(0)) || !n(3)(function () { u.call({}); })), "Number", { toFixed: function (e) { var t, n, r, u, s = o(this, l), c = i(e), v = "", m = "0"; if (c < 0 || c > 20)
                throw RangeError(l); if (s != s)
                return "NaN"; if (s <= -1e21 || s >= 1e21)
                return String(s); if (s < 0 && (v = "-", s = -s), s > 1e-21)
                if (n = (t = function (e) { for (var t = 0, n = e; n >= 4096;)
                    t += 12, n /= 4096; for (; n >= 2;)
                    t += 1, n /= 2; return t; }(s * h(2, 69, 1)) - 69) < 0 ? s * h(2, -t, 1) : s / h(2, t, 1), n *= 4503599627370496, (t = 52 - t) > 0) {
                    for (f(0, n), r = c; r >= 7;)
                        f(1e7, 0), r -= 7;
                    for (f(h(10, r, 1), 0), r = t - 1; r >= 23;)
                        p(1 << 23), r -= 23;
                    p(1 << r), f(1, 1), p(2), m = d();
                }
                else
                    f(0, n), f(1 << -t, 0), m = d() + a.call("0", c); return m = c > 0 ? v + ((u = m.length) <= c ? "0." + a.call("0", c - u) + m : m.slice(0, u - c) + "." + m.slice(u - c)) : v + m; } });
    }, function (e, t, n) {
        "use strict";
        var r = n(2), i = n(19), o = n(21), a = n(92), u = n(28), s = n(3), c = n(38).f, l = n(17).f, f = n(9).f, p = n(46).trim, d = r.Number, h = d, v = d.prototype, m = "Number" == o(n(39)(v)), y = "trim" in String.prototype, g = function (e) { var t = u(e, !1); if ("string" == typeof t && t.length > 2) {
            var n, r, i, o = (t = y ? t.trim() : p(t, 3)).charCodeAt(0);
            if (43 === o || 45 === o) {
                if (88 === (n = t.charCodeAt(2)) || 120 === n)
                    return NaN;
            }
            else if (48 === o) {
                switch (t.charCodeAt(1)) {
                    case 66:
                    case 98:
                        r = 2, i = 49;
                        break;
                    case 79:
                    case 111:
                        r = 8, i = 55;
                        break;
                    default: return +t;
                }
                for (var a, s = t.slice(2), c = 0, l = s.length; c < l; c++)
                    if ((a = s.charCodeAt(c)) < 48 || a > i)
                        return NaN;
                return parseInt(s, r);
            }
        } return +t; };
        if (!d(" 0o1") || !d("0b1") || d("+0x1")) {
            d = function (e) { var t = arguments.length < 1 ? 0 : e, n = this; return n instanceof d && (m ? s(function () { v.valueOf.call(n); }) : "Number" != o(n)) ? a(new h(g(t)), n, d) : g(t); };
            for (var b, w = n(10) ? c(h) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","), _ = 0; w.length > _; _++)
                i(h, b = w[_]) && !i(d, b) && f(d, b, l(h, b));
            d.prototype = v, v.constructor = d, n(14)(r, "Number", d);
        }
    }, function (e, t, n) { var r = n(0), i = n(127); r(r.G + r.F * (parseFloat != i), { parseFloat: i }); }, function (e, t, n) { var r = n(0), i = n(128); r(r.G + r.F * (parseInt != i), { parseInt: i }); }, function (e, t, n) {
        "use strict";
        var r = n(4), i = n(16), o = n(6)("hasInstance"), a = Function.prototype;
        o in a || n(9).f(a, o, { value: function (e) { if ("function" != typeof this || !r(e))
                return !1; if (!r(this.prototype))
                return e instanceof this; for (; e = i(e);)
                if (this.prototype === e)
                    return !0; return !1; } });
    }, function (e, t, n) { var r = n(9).f, i = Function.prototype, o = /^\s*function ([^ (]*)/; "name" in i || n(10) && r(i, "name", { configurable: !0, get: function () { try {
            return ("" + this).match(o)[1];
        }
        catch (e) {
            return "";
        } } }); }, function (e, t, n) { var r = n(0); r(r.P, "Function", { bind: n(130) }); }, function (e, t, n) {
        "use strict";
        var r = n(48), i = {};
        i[n(6)("toStringTag")] = "z", i + "" != "[object z]" && n(14)(Object.prototype, "toString", function () { return "[object " + r(this) + "]"; }, !0);
    }, function (e, t, n) { var r = n(0); r(r.S, "Object", { setPrototypeOf: n(94).set }); }, function (e, t) { e.exports = Object.is || function (e, t) { return e === t ? 0 !== e || 1 / e == 1 / t : e != e && t != t; }; }, function (e, t, n) { var r = n(0); r(r.S, "Object", { is: n(389) }); }, function (e, t, n) { var r = n(0); r(r.S + r.F, "Object", { assign: n(131) }); }, function (e, t, n) { var r = n(4); n(25)("isExtensible", function (e) { return function (t) { return !!r(t) && (!e || e(t)); }; }); }, function (e, t, n) { var r = n(4); n(25)("isSealed", function (e) { return function (t) { return !r(t) || !!e && e(t); }; }); }, function (e, t, n) { var r = n(4); n(25)("isFrozen", function (e) { return function (t) { return !r(t) || !!e && e(t); }; }); }, function (e, t, n) { var r = n(4), i = n(33).onFreeze; n(25)("preventExtensions", function (e) { return function (t) { return e && r(t) ? e(i(t)) : t; }; }); }, function (e, t, n) { var r = n(4), i = n(33).onFreeze; n(25)("seal", function (e) { return function (t) { return e && r(t) ? e(i(t)) : t; }; }); }, function (e, t, n) { var r = n(4), i = n(33).onFreeze; n(25)("freeze", function (e) { return function (t) { return e && r(t) ? e(i(t)) : t; }; }); }, function (e, t, n) { n(25)("getOwnPropertyNames", function () { return n(132).f; }); }, function (e, t, n) { var r = n(11), i = n(41); n(25)("keys", function () { return function (e) { return i(r(e)); }; }); }, function (e, t, n) { var r = n(11), i = n(16); n(25)("getPrototypeOf", function () { return function (e) { return i(r(e)); }; }); }, function (e, t, n) { var r = n(18), i = n(17).f; n(25)("getOwnPropertyDescriptor", function () { return function (e, t) { return i(r(e), t); }; }); }, function (e, t, n) { var r = n(0); r(r.S + r.F * !n(10), "Object", { defineProperties: n(133) }); }, function (e, t, n) { var r = n(0); r(r.S + r.F * !n(10), "Object", { defineProperty: n(9).f }); }, function (e, t, n) { var r = n(0); r(r.S, "Object", { create: n(39) }); }, function (e, t, n) { var r = n(41), i = n(66), o = n(49); e.exports = function (e) { var t = r(e), n = i.f; if (n)
        for (var a, u = n(e), s = o.f, c = 0; u.length > c;)
            s.call(e, a = u[c++]) && t.push(a); return t; }; }, function (e, t, n) {
        "use strict";
        var r = n(2), i = n(19), o = n(10), a = n(0), u = n(14), s = n(33).KEY, c = n(3), l = n(68), f = n(47), p = n(42), d = n(6), h = n(135), v = n(98), m = n(405), y = n(65), g = n(1), b = n(4), w = n(18), _ = n(28), x = n(43), k = n(39), S = n(132), E = n(17), O = n(9), T = n(41), C = E.f, P = O.f, M = S.f, N = r.Symbol, j = r.JSON, A = j && j.stringify, L = d("_hidden"), I = d("toPrimitive"), R = {}.propertyIsEnumerable, z = l("symbol-registry"), F = l("symbols"), D = l("op-symbols"), U = Object.prototype, W = "function" == typeof N, H = r.QObject, B = !H || !H.prototype || !H.prototype.findChild, V = o && c(function () { return 7 != k(P({}, "a", { get: function () { return P(this, "a", { value: 7 }).a; } })).a; }) ? function (e, t, n) { var r = C(U, t); r && delete U[t], P(e, t, n), r && e !== U && P(U, t, r); } : P, q = function (e) { var t = F[e] = k(N.prototype); return t._k = e, t; }, G = W && "symbol" == typeof N.iterator ? function (e) { return "symbol" == typeof e; } : function (e) { return e instanceof N; }, $ = function (e, t, n) { return e === U && $(D, t, n), g(e), t = _(t, !0), g(n), i(F, t) ? (n.enumerable ? (i(e, L) && e[L][t] && (e[L][t] = !1), n = k(n, { enumerable: x(0, !1) })) : (i(e, L) || P(e, L, x(1, {})), e[L][t] = !0), V(e, t, n)) : P(e, t, n); }, Y = function (e, t) { g(e); for (var n, r = m(t = w(t)), i = 0, o = r.length; o > i;)
            $(e, n = r[i++], t[n]); return e; }, X = function (e) { var t = R.call(this, e = _(e, !0)); return !(this === U && i(F, e) && !i(D, e)) && (!(t || !i(this, e) || !i(F, e) || i(this, L) && this[L][e]) || t); }, K = function (e, t) { if (e = w(e), t = _(t, !0), e !== U || !i(F, t) || i(D, t)) {
            var n = C(e, t);
            return !n || !i(F, t) || i(e, L) && e[L][t] || (n.enumerable = !0), n;
        } }, Q = function (e) { for (var t, n = M(w(e)), r = [], o = 0; n.length > o;)
            i(F, t = n[o++]) || t == L || t == s || r.push(t); return r; }, J = function (e) { for (var t, n = e === U, r = M(n ? D : w(e)), o = [], a = 0; r.length > a;)
            !i(F, t = r[a++]) || n && !i(U, t) || o.push(F[t]); return o; };
        W || (u((N = function () { if (this instanceof N)
            throw TypeError("Symbol is not a constructor!"); var e = p(arguments.length > 0 ? arguments[0] : void 0), t = function (n) { this === U && t.call(D, n), i(this, L) && i(this[L], e) && (this[L][e] = !1), V(this, e, x(1, n)); }; return o && B && V(U, e, { configurable: !0, set: t }), q(e); }).prototype, "toString", function () { return this._k; }), E.f = K, O.f = $, n(38).f = S.f = Q, n(49).f = X, n(66).f = J, o && !n(32) && u(U, "propertyIsEnumerable", X, !0), h.f = function (e) { return q(d(e)); }), a(a.G + a.W + a.F * !W, { Symbol: N });
        for (var Z = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), ee = 0; Z.length > ee;)
            d(Z[ee++]);
        for (var te = T(d.store), ne = 0; te.length > ne;)
            v(te[ne++]);
        a(a.S + a.F * !W, "Symbol", { for: function (e) { return i(z, e += "") ? z[e] : z[e] = N(e); }, keyFor: function (e) { if (!G(e))
                throw TypeError(e + " is not a symbol!"); for (var t in z)
                if (z[t] === e)
                    return t; }, useSetter: function () { B = !0; }, useSimple: function () { B = !1; } }), a(a.S + a.F * !W, "Object", { create: function (e, t) { return void 0 === t ? k(e) : Y(k(e), t); }, defineProperty: $, defineProperties: Y, getOwnPropertyDescriptor: K, getOwnPropertyNames: Q, getOwnPropertySymbols: J }), j && a(a.S + a.F * (!W || c(function () { var e = N(); return "[null]" != A([e]) || "{}" != A({ a: e }) || "{}" != A(Object(e)); })), "JSON", { stringify: function (e) { for (var t, n, r = [e], i = 1; arguments.length > i;)
                r.push(arguments[i++]); if (n = t = r[1], (b(t) || void 0 !== e) && !G(e))
                return y(t) || (t = function (e, t) { if ("function" == typeof n && (t = n.call(this, e, t)), !G(t))
                    return t; }), r[1] = t, A.apply(j, r); } }), N.prototype[I] || n(15)(N.prototype, I, N.prototype.valueOf), f(N, "Symbol"), f(Math, "Math", !0), f(r.JSON, "JSON", !0);
    }, function (e, t, n) { n(406), n(404), n(403), n(402), n(401), n(400), n(399), n(398), n(397), n(396), n(395), n(394), n(393), n(392), n(391), n(390), n(388), n(387), n(386), n(385), n(384), n(383), n(382), n(381), n(380), n(379), n(378), n(377), n(376), n(375), n(374), n(373), n(372), n(371), n(370), n(369), n(368), n(367), n(366), n(365), n(364), n(363), n(362), n(361), n(360), n(359), n(358), n(357), n(356), n(355), n(354), n(353), n(352), n(351), n(350), n(349), n(348), n(347), n(346), n(345), n(344), n(343), n(342), n(341), n(340), n(339), n(338), n(337), n(336), n(335), n(334), n(333), n(332), n(331), n(330), n(329), n(328), n(326), n(325), n(323), n(322), n(321), n(320), n(319), n(318), n(317), n(315), n(314), n(313), n(312), n(311), n(310), n(309), n(308), n(307), n(306), n(305), n(304), n(303), n(78), n(302), n(301), n(118), n(300), n(299), n(298), n(297), n(296), n(115), n(113), n(112), n(295), n(294), n(293), n(292), n(291), n(290), n(289), n(288), n(287), n(286), n(285), n(284), n(283), n(282), n(281), n(280), n(279), n(278), n(277), n(276), n(275), n(274), n(273), n(272), n(271), n(270), n(269), n(268), n(267), n(266), n(265), n(264), n(263), n(262), n(261), n(260), n(259), n(258), n(257), n(256), n(255), n(254), n(253), n(252), n(251), n(250), n(249), n(248), n(247), n(246), n(245), n(244), n(243), n(242), n(241), n(240), n(239), n(238), n(237), n(236), n(235), n(234), n(233), n(232), n(231), n(230), n(229), n(228), n(227), n(226), n(225), n(224), n(223), n(222), n(221), n(220), n(219), n(218), n(217), n(216), n(215), n(214), n(213), n(212), n(211), e.exports = n(23); }, function (e, t, n) {
        "use strict";
        (function (e) { if (n(407), n(210), n(209), e._babelPolyfill)
            throw new Error("only one instance of babel-polyfill is allowed"); e._babelPolyfill = !0; var t = "defineProperty"; function r(e, n, r) { e[n] || Object[t](e, n, { writable: !0, configurable: !0, value: r }); } r(String.prototype, "padLeft", "".padStart), r(String.prototype, "padRight", "".padEnd), "pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (e) { [][e] && r(Array, e, Function.call.bind([][e])); }); }).call(this, n(51));
    }, function (e, t, n) { n(408), n(206), e.exports = n(138); }]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNsaWNrL2xpYi91dGlscy9pbm5lclNsaWRlclV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9Db21wb25lbnRzL0NsaWVudC9CdXR0b24vQnV0dG9uLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5xdWlyZS5qcy9zcmMvVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9Db21wb25lbnRzL0NsaWVudC9Db21wYW55RGV0YWlscy9Db21wYW55RGV0YWlscy50c3giLCJ3ZWJwYWNrOi8vLy4vQ29tcG9uZW50cy9DbGllbnQvUm9ja2V0L1JvY2tldC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VucXVpcmUuanMvc3JjL1F1ZXJ5SGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5xdWlyZS5qcy9zcmMvTWVkaWFRdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5xdWlyZS5qcy9zcmMvTWVkaWFRdWVyeURpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbnF1aXJlLmpzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2RlZmF1bHQtcHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy1jb252ZXJ0L2NhbWVsMmh5cGhlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNvbjJtcS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzaXplLW9ic2VydmVyLXBvbHlmaWxsL2Rpc3QvUmVzaXplT2JzZXJ2ZXIuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNsaWNrL2xpYi9hcnJvd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNsaWNrL2xpYi9kb3RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zbGljay9saWIvdHJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5kZWJvdW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2luaXRpYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2lubmVyLXNsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL3NsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL0NvbXBvbmVudHMvQ2xpZW50L1Byb2R1Y3RDYXJvdXNlbC9Qcm9kdWN0Q2Fyb3VzZWwudHN4Iiwid2VicGFjazovLy8uL0NvbXBvbmVudHMvQ2xpZW50L1Byb2R1Y3RzL1Byb2R1Y3RzLnRzeCIsIndlYnBhY2s6Ly8vLi9Db21wb25lbnRzL0NsaWVudC9BYm91dFVzL0Fib3V0VXMudHN4Iiwid2VicGFjazovLy8uL0NvbXBvbmVudHMvQ2xpZW50L05hdmlnYXRpb25JY29ucy9OYXZpZ2F0aW9uSWNvbnMudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS1zb2xpZC9mYVJvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWUvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vLy4vQ29tcG9uZW50cy9DbGllbnQvQ29tcGFueU1vdHRvL0NvbXBhbnlNb3R0by50c3giLCJ3ZWJwYWNrOi8vLy4vQ29tcG9uZW50cy9DbGllbnQvTW9vbi9Nb29uLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcGFydGljbGVzLWpzL2xpYi9wYXJ0aWNsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vQ29tcG9uZW50cy9DbGllbnQvU3BhY2VCYWNrZ3JvdW5kL1NwYWNlQmFja2dyb3VuZC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9Db21wb25lbnRzL0NsaWVudC9IaWdoT3JkZXJDb21wb25lbnRzL1NwYWNlL1NwYWNlLnRzeCIsIndlYnBhY2s6Ly8vLi9TY3JpcHRzL0hvbWUvRW50cnkudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZXBsYWNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmltdWxoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmZzY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9saWIvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwid2luZG93IiwiTWF0aCIsInNlbGYiLCJfX2ciLCJleGVjIiwiZSIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiYSIsImRlZmluZWQiLCJmYWlscyIsInF1b3QiLCJjcmVhdGVIVE1MIiwic3RyaW5nIiwidGFnIiwiYXR0cmlidXRlIiwiU3RyaW5nIiwicDEiLCJyZXBsYWNlIiwiTkFNRSIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwibGVuZ3RoIiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsInRoaXMiLCJjcmVhdGVEZXNjIiwidG9PYmplY3QiLCJJRV9QUk9UTyIsIk9iamVjdFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjb25zdHJ1Y3RvciIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJJT2JqZWN0IiwibWV0aG9kIiwiYXJnIiwidG9TdHJpbmciLCJzbGljZSIsImFGdW5jdGlvbiIsImZuIiwidGhhdCIsImIiLCJhcHBseSIsImFyZ3VtZW50cyIsInZlcnNpb24iLCJfX2UiLCJ0b0xlbmd0aCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwicmVzIiwiaW5kZXgiLCJyZXN1bHQiLCJwdXNoIiwiS0VZIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJ2YWx1ZU9mIiwiTWFwIiwic2hhcmVkIiwiZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCIsInRhcmdldEtleSIsInRhcmdldE1ldGFkYXRhIiwic2V0Iiwia2V5TWV0YWRhdGEiLCJtYXAiLCJNZXRhZGF0YUtleSIsIm1ldGFkYXRhTWFwIiwiTWV0YWRhdGFWYWx1ZSIsImtleXMiLCJmb3JFYWNoIiwiXyIsIkxJQlJBUlkiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9JbmRleCIsInRvQWJzb2x1dGVJbmRleCIsImNsYXNzb2YiLCJpc0FycmF5SXRlciIsImdPUE4iLCJnZXRJdGVyRm4iLCJ3a3MiLCJjcmVhdGVBcnJheU1ldGhvZCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsIkl0ZXJhdG9ycyIsIiRpdGVyRGV0ZWN0Iiwic2V0U3BlY2llcyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJBcnJheVByb3RvIiwiQXJyYXkiLCIkQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIiREYXRhVmlldyIsIkRhdGFWaWV3IiwiYXJyYXlGb3JFYWNoIiwiYXJyYXlGaWx0ZXIiLCJhcnJheVNvbWUiLCJhcnJheUV2ZXJ5IiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlJbmRleE9mIiwiYXJyYXlWYWx1ZXMiLCJ2YWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJlbnRyaWVzIiwiYXJyYXlMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJyZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwicmVkdWNlUmlnaHQiLCJhcnJheUpvaW4iLCJhcnJheVNvcnQiLCJzb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJJVEVSQVRPUiIsIlRBRyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiYnVmZmVyIiwiRk9SQ0VEX1NFVCIsInRvT2Zmc2V0IiwiQllURVMiLCJvZmZzZXQiLCJ2YWxpZGF0ZSIsIkMiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJzdGVwIiwiaXRlcmF0b3IiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwibmV4dCIsImRvbmUiLCIkb2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwicHJvdG8iLCJjb3B5V2l0aGluIiwic3RhcnQiLCJldmVyeSIsImZpbGwiLCJmaWx0ZXIiLCJmaW5kIiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIndyYXBwZXIiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIkJhc2UiLCJUQUMiLCJGT1JDRUQiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImRhdGEiLCJ2Iiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCJpdGVyIiwiY29uY2F0IiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsImZyb20iLCJVTlNDT1BBQkxFUyIsIk1FVEEiLCJzZXREZXNjIiwiaWQiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyYWJsZSIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJERVNDUklQVE9SUyIsIlNQRUNJRVMiLCIka2V5cyIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZFBzIiwiZW51bUJ1Z0tleXMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsImRvY3VtZW50Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJtYXgiLCJweCIsInJhbmRvbSIsImJpdG1hcCIsIl90Iiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwidHJpbSIsImRlZiIsInN0YXQiLCJjb2YiLCJBUkciLCJUIiwidHJ5R2V0IiwiY2FsbGVlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJnIiwiZXZhbCIsImNhblVzZURPTSIsInNsaWRlc09uTGVmdCIsInNsaWRlc09uUmlnaHQiLCJzaWJsaW5nRGlyZWN0aW9uIiwiZ2V0VG90YWxTbGlkZXMiLCJnZXRQb3N0Q2xvbmVzIiwiZ2V0UHJlQ2xvbmVzIiwiZ2V0VHJhY2tMZWZ0IiwiZ2V0VHJhY2tBbmltYXRlQ1NTIiwiZ2V0VHJhY2tDU1MiLCJjaGVja1NwZWNLZXlzIiwiZ2V0U2xpZGVDb3VudCIsImNoZWNrTmF2aWdhYmxlIiwiZ2V0TmF2aWdhYmxlSW5kZXhlcyIsInN3aXBlRW5kIiwic3dpcGVNb3ZlIiwic3dpcGVTdGFydCIsImtleUhhbmRsZXIiLCJjaGFuZ2VTbGlkZSIsInNsaWRlSGFuZGxlciIsImluaXRpYWxpemVkU3RhdGUiLCJleHRyYWN0T2JqZWN0IiwiY2FuR29OZXh0IiwiZ2V0U3dpcGVEaXJlY3Rpb24iLCJnZXRIZWlnaHQiLCJnZXRXaWR0aCIsImxhenlTbGlkZXNPblJpZ2h0IiwibGF6eVNsaWRlc09uTGVmdCIsImxhenlFbmRJbmRleCIsImxhenlTdGFydEluZGV4IiwiZ2V0UmVxdWlyZWRMYXp5U2xpZGVzIiwiZ2V0T25EZW1hbmRMYXp5U2xpZGVzIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJfcmVhY3QyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdERvbTIiLCJvYmoiLCJkZWZhdWx0Iiwic3BlYyIsIm9uRGVtYW5kU2xpZGVzIiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwic2xpZGVJbmRleCIsImxhenlMb2FkZWRMaXN0IiwicmVxdWlyZWRTbGlkZXMiLCJjdXJyZW50U2xpZGUiLCJjZW50ZXJNb2RlIiwic2xpZGVzVG9TaG93IiwicGFyc2VJbnQiLCJjZW50ZXJQYWRkaW5nIiwiZWxlbSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwidG91Y2hPYmplY3QiLCJ4RGlzdCIsInlEaXN0Iiwic3dpcGVBbmdsZSIsInZlcnRpY2FsU3dpcGluZyIsInN0YXJ0WCIsImN1clgiLCJzdGFydFkiLCJjdXJZIiwiYXRhbjIiLCJQSSIsImFicyIsImNhbkdvIiwiaW5maW5pdGUiLCJzbGlkZUNvdW50IiwibmV3T2JqZWN0IiwiQ2hpbGRyZW4iLCJjb3VudCIsImNoaWxkcmVuIiwibGlzdFdpZHRoIiwiZmluZERPTU5vZGUiLCJsaXN0UmVmIiwidHJhY2tXaWR0aCIsInRyYWNrUmVmIiwic2xpZGVXaWR0aCIsInZlcnRpY2FsIiwiY2VudGVyUGFkZGluZ0FkaiIsInNsaWRlSGVpZ2h0IiwicXVlcnlTZWxlY3RvciIsImxpc3RIZWlnaHQiLCJpbml0aWFsU2xpZGUiLCJydGwiLCJzbGlkZXNUb0xvYWQiLCJzdGF0ZSIsImF1dG9wbGF5aW5nIiwiYXV0b3BsYXkiLCJ3YWl0Rm9yQW5pbWF0ZSIsImFuaW1hdGluZyIsImZhZGUiLCJsYXp5TG9hZCIsInNsaWRlc1RvU2Nyb2xsIiwidXNlQ1NTIiwiYW5pbWF0aW9uU2xpZGUiLCJmaW5hbFNsaWRlIiwiYW5pbWF0aW9uTGVmdCIsImZpbmFsTGVmdCIsIm5leHRTdGF0ZSIsInRyYWNrU3R5bGUiLCJsZWZ0Iiwic3dpcGVMZWZ0Iiwib3B0aW9ucyIsImluZGV4T2Zmc2V0IiwicHJldmlvdXNJbnQiLCJzbGlkZU9mZnNldCIsInRhcmdldFNsaWRlIiwibWVzc2FnZSIsImRpcmVjdGlvbiIsIk51bWJlciIsImFjY2Vzc2liaWxpdHkiLCJ0YWdOYW1lIiwibWF0Y2giLCJrZXlDb2RlIiwic3dpcGUiLCJkcmFnZ2FibGUiLCJwcmV2ZW50RGVmYXVsdCIsImRyYWdnaW5nIiwidG91Y2hlcyIsInBhZ2VYIiwiY2xpZW50WCIsInBhZ2VZIiwiY2xpZW50WSIsInNjcm9sbGluZyIsInN3aXBlVG9TbGlkZSIsImVkZ2VGcmljdGlvbiIsImVkZ2VEcmFnZ2VkIiwib25FZGdlIiwic3dpcGVkIiwic3dpcGluZyIsInN3aXBlRXZlbnQiLCJjdXJMZWZ0Iiwic3dpcGVMZW5ndGgiLCJzcXJ0IiwicG93IiwidmVydGljYWxTd2lwZUxlbmd0aCIsInBvc2l0aW9uT2Zmc2V0IiwiZG90Q291bnQiLCJzd2lwZURpcmVjdGlvbiIsInRvdWNoU3dpcGVMZW5ndGgiLCJ0b3VjaFRocmVzaG9sZCIsIm9uU3dpcGUiLCJtaW5Td2lwZSIsIm5ld1NsaWRlIiwiY3VycmVudExlZnQiLCJicmVha3BvaW50IiwiY291bnRlciIsImluZGV4ZXMiLCJuYXZpZ2FibGVzIiwicHJldk5hdmlnYWJsZSIsImNlbnRlck9mZnNldCIsInN3aXBlZFNsaWRlIiwic2xpZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsInNsaWRlIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsImN1cnJlbnRJbmRleCIsImRhdGFzZXQiLCJrZXlzQXJyYXkiLCJjb25zb2xlIiwiZXJyb3IiLCJ0cmFja0hlaWdodCIsInRyYWNrQ2hpbGRyZW4iLCJvcGFjaXR5IiwidHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb24iLCJ1c2VUcmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsIndpZHRoIiwiaGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsInNwZWVkIiwiY3NzRWFzZSIsInVuc2xpY2siLCJ0YXJnZXRMZWZ0IiwidmFyaWFibGVXaWR0aCIsInNsaWRlc1RvT2Zmc2V0IiwidGFyZ2V0U2xpZGVJbmRleCIsInRyYWNrRWxlbSIsImNoaWxkTm9kZXMiLCJfcmVmIiwicmlnaHQiLCJfcmVmMiIsImNyZWF0ZUVsZW1lbnQiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImhhc093biIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnVHlwZSIsImlzQXJyYXkiLCJpbm5lciIsImZvck9mIiwiQ09MTEVDVElPTiIsIkEiLCJjYiIsIm1hcEZuIiwibmV4dEl0ZW0iLCJLIiwiX19kZWZpbmVTZXR0ZXJfXyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiRCIsIlNZTUJPTCIsImZucyIsInN0cmZuIiwicnhmbiIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsImFyciIsIk1BVENIIiwiaXNSZWdFeHAiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiY29weXJpZ2h0Iiwibm9vcCIsIl9XSU5ET1ciLCJfRE9DVU1FTlQiLCJfTVVUQVRJT05fT0JTRVJWRVIkMSIsIl9QRVJGT1JNQU5DRSIsIm1hcmsiLCJtZWFzdXJlIiwiTXV0YXRpb25PYnNlcnZlciIsInBlcmZvcm1hbmNlIiwiX3JlZiR1c2VyQWdlbnQiLCJXSU5ET1ciLCJET0NVTUVOVCIsIk1VVEFUSU9OX09CU0VSVkVSIiwiUEVSRk9STUFOQ0UiLCJJU19CUk9XU0VSIiwiSVNfRE9NIiwiZG9jdW1lbnRFbGVtZW50IiwiaGVhZCIsIklTX0lFIiwiVU5JVFNfSU5fR1JJRCIsIkRBVEFfRkFfSTJTVkciLCJEQVRBX0ZBX1BTRVVET19FTEVNRU5UIiwiSFRNTF9DTEFTU19JMlNWR19CQVNFX0NMQVNTIiwiUFJPRFVDVElPTiIsIm9uZVRvVGVuIiwib25lVG9Ud2VudHkiLCJBVFRSSUJVVEVTX1dBVENIRURfRk9SX01VVEFUSU9OIiwiUkVTRVJWRURfQ0xBU1NFUyIsImNsYXNzQ2FsbENoZWNrIiwiY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwidG9Db25zdW1hYmxlQXJyYXkiLCJhcnIyIiwiaW5pdGlhbCIsIkZvbnRBd2Vzb21lQ29uZmlnIiwiaW5pdGlhbEtleXMiLCJfZGVmYXVsdCIsImZhbWlseVByZWZpeCIsInJlcGxhY2VtZW50Q2xhc3MiLCJhdXRvUmVwbGFjZVN2ZyIsImF1dG9BZGRDc3MiLCJhdXRvQTExeSIsInNlYXJjaFBzZXVkb0VsZW1lbnRzIiwib2JzZXJ2ZU11dGF0aW9ucyIsImtlZXBPcmlnaW5hbFNvdXJjZSIsIm1lYXN1cmVQZXJmb3JtYW5jZSIsInNob3dNaXNzaW5nSWNvbnMiLCJjb25maWckMSIsInVwZGF0ZSIsIm5ld0NvbmZpZyIsIl9wYXJhbXMkYXNOZXdEZWZhdWx0IiwiYXNOZXdEZWZhdWx0IiwidmFsaWRLZXlzIiwib2siLCJrIiwiY29uZmlnS2V5Iiwic3R5bGVzIiwiaG9va3MiLCJzaGltcyIsIm5hbWVzcGFjZSIsImZ1bmN0aW9ucyIsImxvYWRlZCIsImRvU2Nyb2xsIiwicmVhZHlTdGF0ZSIsImxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRvbXJlYWR5Iiwic2V0VGltZW91dCIsIm1lYW5pbmdsZXNzVHJhbnNmb3JtIiwic2l6ZSIsIngiLCJ5Iiwicm90YXRlIiwiZmxpcFgiLCJmbGlwWSIsImluc2VydENzcyIsImNzcyIsInNldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsImhlYWRDaGlsZHJlbiIsImJlZm9yZUNoaWxkIiwiY2hpbGQiLCJ0b1VwcGVyQ2FzZSIsImluc2VydEJlZm9yZSIsIl91bmlxdWVJZCIsIm5leHRVbmlxdWVJZCIsInRvQXJyYXkiLCJhcnJheSIsImNsYXNzQXJyYXkiLCJub2RlIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwiZ2V0SWNvbk5hbWUiLCJjbHMiLCJwYXJ0cyIsInByZWZpeCIsImljb25OYW1lIiwiaHRtbEVzY2FwZSIsInN0ciIsImpvaW5TdHlsZXMiLCJhY2MiLCJzdHlsZU5hbWUiLCJ0cmFuc2Zvcm1Jc01lYW5pbmdmdWwiLCJ0cmFuc2Zvcm1Gb3JTdmciLCJjb250YWluZXJXaWR0aCIsImljb25XaWR0aCIsIm91dGVyIiwicGF0aCIsIkFMTF9TUEFDRSIsIm1ha2VJY29uTWFza2luZyIsImF0dHJpYnV0ZXMiLCJtYWluIiwibWFzayIsIm1haW5XaWR0aCIsIm1haW5QYXRoIiwiaWNvbiIsIm1hc2tXaWR0aCIsIm1hc2tQYXRoIiwidHJhbnMiLCJtYXNrUmVjdCIsIm1hc2tJbm5lckdyb3VwIiwibWFza091dGVyR3JvdXAiLCJtYXNrSWQiLCJjbGlwSWQiLCJkZWZzIiwibWFza1VuaXRzIiwibWFza0NvbnRlbnRVbml0cyIsImNsaXAtcGF0aCIsIm1ha2VJY29uU3RhbmRhcmQiLCJzdHlsZVN0cmluZyIsImFzSWNvbiIsImZvdW5kIiwidHJhbnNmb3JtLW9yaWdpbiIsImFzU3ltYm9sIiwic3ltYm9sIiwibWFrZUlubGluZVN2Z0Fic3RyYWN0IiwicGFyYW1zIiwiX3BhcmFtcyRpY29ucyIsImljb25zIiwidGl0bGUiLCJleHRyYSIsIl9wYXJhbXMkd2F0Y2hhYmxlIiwid2F0Y2hhYmxlIiwid2lkdGhDbGFzcyIsImF0dHJDbGFzcyIsImNvbnRlbnQiLCJkYXRhLXByZWZpeCIsImRhdGEtaWNvbiIsImNsYXNzIiwicm9sZSIsInhtbG5zIiwidmlld0JveCIsImFyZ3MiLCJtYWtlTGF5ZXJzVGV4dEFic3RyYWN0IiwiX3BhcmFtcyR3YXRjaGFibGUyIiwiX3JlZjIkd2lkdGgiLCJfcmVmMiRoZWlnaHQiLCJfcmVmMiRzdGFydENlbnRlcmVkIiwic3RhcnRDZW50ZXJlZCIsInRyYW5zZm9ybUZvckNzcyIsIm5vb3AkMiIsInByZWFtYmxlIiwicGVyZiIsInN1YmplY3QiLCJpbml0aWFsVmFsdWUiLCJ0aGlzQ29udGV4dCIsImZ1bmMiLCJiaW5kSW50ZXJuYWw0Iiwic3R5bGVzJDIiLCJfYnlVbmljb2RlIiwiX2J5TGlnYXR1cmUiLCJfYnlPbGROYW1lIiwiYnVpbGQiLCJsb29rdXAiLCJyZWR1Y2VyIiwibGlnYXR1cmVzIiwibGlnYXR1cmUiLCJoYXNSZWd1bGFyIiwic2hpbSIsIm9sZE5hbWUiLCJzdHlsZXMkMSIsImVtcHR5Q2Fub25pY2FsSWNvbiIsInJlc3QiLCJnZXRDYW5vbmljYWxJY29uIiwiaWNvbkZyb21NYXBwaW5nIiwidG9IdG1sIiwiYWJzdHJhY3ROb2RlcyIsIl9hYnN0cmFjdE5vZGVzJGF0dHJpYiIsIl9hYnN0cmFjdE5vZGVzJGNoaWxkciIsImF0dHJpYnV0ZU5hbWUiLCJqb2luQXR0cmlidXRlcyIsIm5vb3AkMSIsImlzV2F0Y2hlZCIsIm11dGF0b3JzIiwibXV0YXRpb24iLCJuZXdPdXRlckhUTUwiLCJwYXJlbnROb2RlIiwib3V0ZXJIVE1MIiwibmV3Tm9kZSIsInJlcGxhY2VDaGlsZCIsIm5lc3QiLCJhYnN0cmFjdCIsImZvclN2ZyIsInNwbGl0Q2xhc3NlcyIsInRvU3ZnIiwidG9Ob2RlIiwibmV3SW5uZXJIVE1MIiwicGVyZm9ybSIsIm11dGF0aW9ucyIsImNhbGxiYWNrIiwiY2FsbGJhY2tGdW5jdGlvbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9wIiwibXV0YXRvciIsImRpc2FibGVkIiwibW8iLCJzdHlsZVBhcnNlciIsInByb3AiLCJjbGFzc1BhcnNlciIsImV4aXN0aW5nUHJlZml4IiwiZXhpc3RpbmdJY29uTmFtZSIsImlubmVyVGV4dCIsImJ5VW5pY29kZSIsImNoYXJDb2RlQXQiLCJ0b0hleCIsInBhcnNlVHJhbnNmb3JtU3RyaW5nIiwidHJhbnNmb3JtU3RyaW5nIiwiZmlyc3QiLCJwYXJzZUZsb2F0IiwidHJhbnNmb3JtUGFyc2VyIiwic3ltYm9sUGFyc2VyIiwiYXR0cmlidXRlc1BhcnNlciIsImV4dHJhQXR0cmlidXRlcyIsImF0dHIiLCJtYXNrUGFyc2VyIiwiTWlzc2luZ0ljb24iLCJzdGFjayIsIkVycm9yIiwiRklMTCIsIkFOSU1BVElPTl9CQVNFIiwiYXR0cmlidXRlVHlwZSIsInJlcGVhdENvdW50IiwiZHVyIiwiUklORyIsIk9QQUNJVFlfQU5JTUFURSIsIm1pc3NpbmciLCJjeCIsImN5IiwiTEFZRVJTX1RFWFRfQ0xBU1NOQU1FIiwiRk9OVF9GQU1JTFlfUEFUVEVSTiIsIlNUWUxFX1RPX1BSRUZJWCIsIlNvbGlkIiwiUmVndWxhciIsIkxpZ2h0IiwiQnJhbmRzIiwiZmluZEljb24iLCJnZW5lcmF0ZU11dGF0aW9uIiwibm9kZU1ldGEiLCJfY2xhc3NQYXJzZXIiLCJleHRyYUNsYXNzZXMiLCJleHRyYVN0eWxlcyIsInBhcnNlTWV0YSIsImNvbXB1dGVkRm9udFNpemUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZm9udFNpemUiLCJib3VuZGluZ0NsaWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJnZW5lcmF0ZUxheWVyc1RleHQiLCJnZW5lcmF0ZVN2Z1JlcGxhY2VtZW50TXV0YXRpb24iLCJyZW1vdmUiLCJyZW1vdmVDaGlsZCIsInJvb3QiLCJwb3MiLCJmb250RmFtaWx5IiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBzZXVkb0VsZW1lbnQiLCJuZXh0U2libGluZyIsInRleHRDb250ZW50Iiwic3Vic3RyIiwiZmlyc3RDaGlsZCIsIm9wZXJhdGlvbiIsIm9uVHJlZSIsImh0bWxDbGFzc0xpc3QiLCJoY2xBZGQiLCJzdWZmaXgiLCJhZGQiLCJoY2xSZW1vdmUiLCJwcmVmaXhlcyIsInByZWZpeGVzRG9tUXVlcnkiLCJjYW5kaWRhdGVzIiwib25Ob2RlIiwiZHJjIiwiZnAiLCJyYyIsImRQYXR0IiwiclBhdHQiLCJwcmVwSWNvbiIsIl9jc3NJbnNlcnRlZCIsImVuc3VyZUNzcyIsImFwaU9iamVjdCIsImFic3RyYWN0Q3JlYXRvciIsImNvbnRhaW5lciIsImh0bWwiLCJmaW5kSWNvbkRlZmluaXRpb24iLCJfcGFyYW1zJHByZWZpeCIsImxpYnJhcnkiLCJkZWZpbml0aW9ucyIsIkxpYnJhcnkiLCJfdGhpcyIsIl9sZW4iLCJfa2V5IiwiYWRkaXRpb25zIiwiX3B1bGxEZWZpbml0aW9ucyIsImRlZmluZSIsIm5vcm1hbGl6ZWQiLCJhZGRQYWNrIiwiZGVmaW5pdGlvbiIsIjAiLCJfbm9ybWFsaXplZCRrZXkiLCJpY29uRGVmaW5pdGlvbiIsIl9wYXJhbXMkdHJhbnNmb3JtIiwiX3BhcmFtcyRzeW1ib2wiLCJfcGFyYW1zJG1hc2siLCJfcGFyYW1zJHRpdGxlIiwiX3BhcmFtcyRjbGFzc2VzIiwiX3BhcmFtcyRhdHRyaWJ1dGVzIiwiX3BhcmFtcyRzdHlsZXMiLCJtYXliZUljb25EZWZpbml0aW9uIiwiYXBpJDEiLCJub0F1dG8iLCJkaXNjb25uZWN0IiwiZG9tIiwiaTJzdmciLCJfcGFyYW1zJG5vZGUiLCJfcGFyYW1zJGNhbGxiYWNrIiwicGFyc2UiLCJ0ZXh0IiwiX3BhcmFtcyR0cmFuc2Zvcm0yIiwiX3BhcmFtcyR0aXRsZTIiLCJfcGFyYW1zJGNsYXNzZXMyIiwiX3BhcmFtcyRhdHRyaWJ1dGVzMiIsIl9wYXJhbXMkc3R5bGVzMiIsImxheWVyIiwiYXNzZW1ibGVyIiwiYXV0b1JlcGxhY2UiLCJidW5rZXIiLCJGb250QXdlc29tZSIsInRyZWVDYWxsYmFjayIsIm5vZGVDYWxsYmFjayIsInBzZXVkb0VsZW1lbnRzQ2FsbGJhY2siLCJvYmplY3RzIiwibXV0YXRpb25SZWNvcmQiLCJhZGRlZE5vZGVzIiwiX2dldENhbm9uaWNhbEljb24iLCJvYnNlcnZlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImFkZFNoaW1zIiwiX25hbWVzcGFjZSRzaGltcyIsImNvbmZpZyIsIl9fd2VicGFja19leHBvcnRzX18iLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsIlJlYWN0IiwiQnV0dG9uIiwiX3N1cGVyIiwiX19leHRlbmRzIiwicmVuZGVyIiwiY2xhc3NOYW1lIiwiYmFja2dyb3VuZENvbG9yIiwiQ29sb3IiLCJUZXh0IiwiQ29tcG9uZW50IiwibWFrZUVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInZhbGlkYXRlRm9ybWF0IiwiZm9ybWF0IiwiY29uZGl0aW9uIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsIlBST1RPVFlQRSIsIldST05HX0lOREVYIiwiSW5maW5pdHkiLCJCYXNlQnVmZmVyIiwibG9nIiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsImoiLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJwcm9jZXNzIiwiUHJvbWlzZSIsImlzTm9kZSIsImxhc3QiLCJub3RpZnkiLCJmbHVzaCIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsIm5leHRUaWNrIiwic3RhbmRhbG9uZSIsInRoZW4iLCJ0b2dnbGUiLCJjcmVhdGVUZXh0Tm9kZSIsInRhc2siLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiY2VsIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsInF1ZXVlIiwicnVuIiwiZXZlbnQiLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwia2luZCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJlbmRQb3MiLCJvcmlnaW5hbCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiJGRlZmluZVByb3BlcnR5IiwicmUiLCJzZWFyY2hTdHJpbmciLCJJdGVyYXRvclByb3RvdHlwZSIsIiRpdGVyQ3JlYXRlIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsImdldE1ldGhvZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiVE9fU1RSSU5HIiwiY2hhckF0IiwiJGV4cG0xIiwiZXhwbTEiLCJzaWduIiwic2V0UHJvdG90eXBlT2YiLCJjaGVjayIsImJ1Z2d5IiwiX19wcm90b19fIiwid2tzRXh0IiwiJFN5bWJvbCIsImlzIiwiZWFjaCIsImNvbGxlY3Rpb24iLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInRvIiwic2NhbGUiLCJpbkxvdyIsImluSGlnaCIsIm91dExvdyIsIm91dEhpZ2giLCJnZXRLZXlzIiwiaXNFbnVtIiwiaXNFbnRyaWVzIiwicmVwZWF0IiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJmbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwiZWxlbWVudCIsInNwcmVhZGFibGUiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwiZ09QUyIsIlJlZmxlY3QiLCJvd25LZXlzIiwiZ2V0U3ltYm9scyIsIm51bWJlciIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiX2wiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwiZW50cnkiLCJkZWxldGUiLCJzcGxpY2UiLCJ1ZnN0b3JlIiwiSW50ZXJuYWxNYXAiLCJ3ZWFrIiwidG1wIiwiJFdlYWtNYXAiLCJmcmVlemUiLCJfZiIsInN0cm9uZyIsIiRpdGVyRGVmaW5lIiwiU0laRSIsImdldEVudHJ5IiwicHJldiIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJmbGFncyIsImluYyIsIm1lbW8iLCJpc1JpZ2h0IiwicmV0IiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJsb2cxcCIsImlzRmluaXRlIiwibXNnIiwiJHBhcnNlRmxvYXQiLCIkdHJpbSIsIiRwYXJzZUludCIsIndzIiwiaGV4IiwicmFkaXgiLCJ1biIsImZhY3RvcmllcyIsInBhcnRBcmdzIiwiYm91bmQiLCJjb25zdHJ1Y3QiLCIkYXNzaWduIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsIm5hbWVzIiwiQnV0dG9uXzEiLCJDb21wYW55RGV0YWlscyIsIlJldmVyc2VkIiwiVGl0bGUiLCJEZXNjcmlwdGlvbiIsIkJ1dHRvblRleHQiLCJCdXR0b25Db2xvciIsIkltYWdlUGF0aCIsIlJvY2tldCIsInJvY2tldElnbml0ZWQiLCJpZ25pdGVSb2NrZXQiLCJoYW5kbGVSb2NrZXRDbGljayIsImNvbXBvbmVudERpZE1vdW50Iiwic2V0U3RhdGUiLCJfX2Fzc2lnbiIsIm9uQ2xpY2siLCJRdWVyeUhhbmRsZXIiLCJkZWZlclNldHVwIiwic2V0dXAiLCJpbml0aWFsaXNlZCIsIm9uIiwib2ZmIiwidW5tYXRjaCIsImRlc3Ryb3kiLCJlcXVhbHMiLCJNZWRpYVF1ZXJ5IiwicXVlcnkiLCJpc1VuY29uZGl0aW9uYWwiLCJoYW5kbGVycyIsIm1xbCIsIm1hdGNoTWVkaWEiLCJjdXJyZW50VGFyZ2V0IiwiYXNzZXNzIiwiYWRkTGlzdGVuZXIiLCJjb25zdHVjdG9yIiwiYWRkSGFuZGxlciIsImhhbmRsZXIiLCJxaCIsIm1hdGNoZXMiLCJyZW1vdmVIYW5kbGVyIiwiaCIsInJlbW92ZUxpc3RlbmVyIiwiYWN0aW9uIiwiVXRpbCIsIk1lZGlhUXVlcnlEaXNwYXRjaCIsInF1ZXJpZXMiLCJicm93c2VySXNJbmNhcGFibGUiLCJyZWdpc3RlciIsInEiLCJzaG91bGREZWdyYWRlIiwidW5yZWdpc3RlciIsIl9yZWFjdCIsImRlZmF1bHRQcm9wcyIsImFkYXB0aXZlSGVpZ2h0IiwiYWZ0ZXJDaGFuZ2UiLCJhcHBlbmREb3RzIiwiZG90cyIsImFycm93cyIsImF1dG9wbGF5U3BlZWQiLCJiZWZvcmVDaGFuZ2UiLCJjdXN0b21QYWdpbmciLCJkb3RzQ2xhc3MiLCJlYXNpbmciLCJmb2N1c09uU2VsZWN0IiwibmV4dEFycm93Iiwib25Jbml0Iiwib25MYXp5TG9hZEVycm9yIiwib25SZUluaXQiLCJwYXVzZU9uRG90c0hvdmVyIiwicGF1c2VPbkZvY3VzIiwicGF1c2VPbkhvdmVyIiwicHJldkFycm93IiwicmVzcG9uc2l2ZSIsInJvd3MiLCJzbGlkZXNQZXJSb3ciLCJ0b3VjaE1vdmUiLCJjYW1lbDJoeXBoZW4iLCJvYmoybXEiLCJtcSIsImZlYXR1cmVzIiwiZmVhdHVyZSIsImlzRGltZW5zaW9uIiwiTWFwU2hpbSIsImdldEluZGV4IiwiYW5vbnltb3VzIiwiX19lbnRyaWVzX18iLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJpc0Jyb3dzZXIiLCJnbG9iYWwkMSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSQxIiwiRGF0ZSIsInRyYWlsaW5nVGltZW91dCIsInRyYW5zaXRpb25LZXlzIiwibXV0YXRpb25PYnNlcnZlclN1cHBvcnRlZCIsIlJlc2l6ZU9ic2VydmVyQ29udHJvbGxlciIsImNvbm5lY3RlZF8iLCJtdXRhdGlvbkV2ZW50c0FkZGVkXyIsIm11dGF0aW9uc09ic2VydmVyXyIsIm9ic2VydmVyc18iLCJvblRyYW5zaXRpb25FbmRfIiwicmVmcmVzaCIsImRlbGF5IiwibGVhZGluZ0NhbGwiLCJ0cmFpbGluZ0NhbGwiLCJsYXN0Q2FsbFRpbWUiLCJyZXNvbHZlUGVuZGluZyIsInByb3h5IiwidGltZW91dENhbGxiYWNrIiwidGltZVN0YW1wIiwidGhyb3R0bGUiLCJhZGRPYnNlcnZlciIsIm9ic2VydmVyIiwiY29ubmVjdF8iLCJyZW1vdmVPYnNlcnZlciIsIm9ic2VydmVycyIsImRpc2Nvbm5lY3RfIiwidXBkYXRlT2JzZXJ2ZXJzXyIsImFjdGl2ZU9ic2VydmVycyIsImdhdGhlckFjdGl2ZSIsImhhc0FjdGl2ZSIsImJyb2FkY2FzdEFjdGl2ZSIsInJlZiIsInByb3BlcnR5TmFtZSIsImdldEluc3RhbmNlIiwiaW5zdGFuY2VfIiwiZGVmaW5lQ29uZmlndXJhYmxlIiwiZ2V0V2luZG93T2YiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJlbXB0eVJlY3QiLCJjcmVhdGVSZWN0SW5pdCIsInRvRmxvYXQiLCJnZXRCb3JkZXJzU2l6ZSIsInBvc2l0aW9ucyIsInBvc2l0aW9uIiwiZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwicGFkZGluZ3MiLCJnZXRQYWRkaW5ncyIsImhvcml6UGFkIiwidmVydFBhZCIsInRvcCIsImJvdHRvbSIsImJveFNpemluZyIsImlzRG9jdW1lbnRFbGVtZW50IiwidmVydFNjcm9sbGJhciIsImhvcml6U2Nyb2xsYmFyIiwiaXNTVkdHcmFwaGljc0VsZW1lbnQiLCJTVkdHcmFwaGljc0VsZW1lbnQiLCJTVkdFbGVtZW50IiwiZ2V0QkJveCIsImdldENvbnRlbnRSZWN0IiwiYmJveCIsImdldFNWR0NvbnRlbnRSZWN0IiwiUmVzaXplT2JzZXJ2YXRpb24iLCJicm9hZGNhc3RXaWR0aCIsImJyb2FkY2FzdEhlaWdodCIsImNvbnRlbnRSZWN0XyIsImlzQWN0aXZlIiwicmVjdCIsImJyb2FkY2FzdFJlY3QiLCJSZXNpemVPYnNlcnZlckVudHJ5IiwicmVjdEluaXQiLCJDb25zdHIiLCJjb250ZW50UmVjdCIsIkRPTVJlY3RSZWFkT25seSIsIlJlc2l6ZU9ic2VydmVyU1BJIiwiY29udHJvbGxlciIsImNhbGxiYWNrQ3R4IiwiYWN0aXZlT2JzZXJ2YXRpb25zXyIsIm9ic2VydmF0aW9uc18iLCJjYWxsYmFja18iLCJjb250cm9sbGVyXyIsImNhbGxiYWNrQ3R4XyIsIkVsZW1lbnQiLCJvYnNlcnZhdGlvbnMiLCJ1bm9ic2VydmUiLCJjbGVhckFjdGl2ZSIsInRoaXMkMSIsIm9ic2VydmF0aW9uIiwiV2Vha01hcCIsIlJlc2l6ZU9ic2VydmVyIiwiTmV4dEFycm93IiwiUHJldkFycm93IiwiX2NsYXNzbmFtZXMyIiwiX2lubmVyU2xpZGVyVXRpbHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX1JlYWN0JFB1cmVDb21wb25lbnQiLCJjbGlja0hhbmRsZXIiLCJwcmV2Q2xhc3NlcyIsInNsaWNrLWFycm93Iiwic2xpY2stcHJldiIsInByZXZIYW5kbGVyIiwicHJldkFycm93UHJvcHMiLCJkYXRhLXJvbGUiLCJjdXN0b21Qcm9wcyIsImNsb25lRWxlbWVudCIsIlB1cmVDb21wb25lbnQiLCJfUmVhY3QkUHVyZUNvbXBvbmVudDIiLCJuZXh0Q2xhc3NlcyIsInNsaWNrLW5leHQiLCJuZXh0SGFuZGxlciIsIm5leHRBcnJvd1Byb3BzIiwiRG90cyIsIl90aGlzMiIsIl9wcm9wcyIsIm1vdXNlRXZlbnRzIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZU92ZXIiLCJvbk1vdXNlTGVhdmUiLCJsZWZ0Qm91bmQiLCJyaWdodEJvdW5kIiwic2xpY2stYWN0aXZlIiwiZG90T3B0aW9ucyIsIlRyYWNrIiwiZ2V0U2xpZGVDbGFzc2VzIiwic2xpY2tBY3RpdmUiLCJzbGlja0NlbnRlciIsInNsaWNrQ2xvbmVkIiwic2xpY2stc2xpZGUiLCJzbGljay1jZW50ZXIiLCJzbGljay1jbG9uZWQiLCJzbGljay1jdXJyZW50IiwiZ2V0S2V5IiwiZmFsbGJhY2tLZXkiLCJyZW5kZXJTbGlkZXMiLCJwcmVDbG9uZVNsaWRlcyIsInBvc3RDbG9uZVNsaWRlcyIsImNoaWxkcmVuQ291bnQiLCJjaGlsZE9uQ2xpY2tPcHRpb25zIiwiY2hpbGRTdHlsZSIsImdldFNsaWRlU3R5bGUiLCJzbGlkZUNsYXNzIiwic2xpZGVDbGFzc2VzIiwiZGF0YS1pbmRleCIsInRhYkluZGV4IiwiYXJpYS1oaWRkZW4iLCJvdXRsaW5lIiwicHJlQ2xvbmVObyIsIkZVTkNfRVJST1JfVEVYVCIsIk5BTiIsInN5bWJvbFRhZyIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwib2JqZWN0VG9TdHJpbmciLCJuYXRpdmVNYXgiLCJuYXRpdmVNaW4iLCJ0b051bWJlciIsImlzT2JqZWN0TGlrZSIsImlzU3ltYm9sIiwib3RoZXIiLCJpc0JpbmFyeSIsIndhaXQiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJ0cmFpbGluZyIsImludm9rZUZ1bmMiLCJ0aW1lIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0aW1lckV4cGlyZWQiLCJ0cmFpbGluZ0VkZ2UiLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImxlYWRpbmdFZGdlIiwiY2FuY2VsIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudERpcmVjdGlvbiIsImluaXRpYWxpemVkIiwiTm9kZSIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImRvYyIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJhYSIsImNhIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJlbmNvZGVVUklDb21wb25lbnQiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsImxhIiwibWEiLCJuYSIsIm9hIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJwYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwicWEiLCJyZWdpc3RyYXRpb25OYW1lIiwicmEiLCJzYSIsImRlcGVuZGVuY2llcyIsInRhIiwidWEiLCJ2YSIsInBsdWdpbnMiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJFYSIsIkZhIiwiR2EiLCJIYSIsInN0YXRlTm9kZSIsIklhIiwiSmEiLCJLYSIsImluamVjdGlvbiIsImdldExpc3RlbmVyIiwicnVuRXZlbnRzSW5CYXRjaCIsInJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2giLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJwcmVjYWNoZUZpYmVyTm9kZSIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSIsImdldE5vZGVGcm9tSW5zdGFuY2UiLCJnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlIiwidXBkYXRlRmliZXJQcm9wcyIsInJldHVybiIsIlJhIiwiU2EiLCJkaXNwYXRjaENvbmZpZyIsIlRhIiwiX3RhcmdldEluc3QiLCJVYSIsIlZhIiwiWGEiLCJZYSIsIlphIiwiYWx0ZXJuYXRlIiwiJGEiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImFiIiwiYmIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJkYiIsImViIiwiYW5pbWF0aW9uIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwibWIiLCJuYiIsIm9iIiwicGIiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZWZhdWx0UHJldmVudGVkIiwiaXNUcnVzdGVkIiwiSCIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJyYiIsImV2ZW50UG9vbCIsInBvcCIsInNiIiwiZGVzdHJ1Y3RvciIsInFiIiwiZ2V0UG9vbGVkIiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV4dGVuZCIsInRiIiwidWIiLCJ2YiIsIndiIiwieGIiLCJkb2N1bWVudE1vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJDYiIsIkRiIiwiRWIiLCJkZXRhaWwiLCJGYiIsIkliIiwid2hpY2giLCJHYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIkhiIiwiSmIiLCJLYiIsImluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQiLCJMYiIsIk1iIiwiTmIiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInVybCIsIndlZWsiLCJZYiIsIlpiIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCIkYiIsImFjIiwiY2MiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsImJjIiwiZGMiLCJjaGVja2VkIiwiZWMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiSSIsImZvciIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJtYyIsIm5jIiwib2MiLCJwYyIsInFjIiwic2MiLCJ0YyIsImRpc3BsYXlOYW1lIiwicGVuZGluZ1Byb3BzIiwiJCR0eXBlb2YiLCJ2YyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwid2MiLCJ4YyIsInljIiwiSiIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsIkNjIiwiRGMiLCJFYyIsIkFjIiwiQmMiLCJ6YyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiRmMiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkdjIiwiSGMiLCJjb250cm9sbGVkIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsImNoYW5nZSIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJkZXRhY2hFdmVudCIsIlZjIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJhZCIsImJkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsImNkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImRkIiwiZWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInNyY0VsZW1lbnQiLCJ0b0VsZW1lbnQiLCJmZCIsInBvaW50ZXJJZCIsInByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiZ2QiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImhkIiwicGFyZW50V2luZG93IiwiZWZmZWN0VGFnIiwiamQiLCJrZCIsInNpYmxpbmciLCJjdXJyZW50IiwibGQiLCJuZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsIm9kIiwiY2xpcGJvYXJkRGF0YSIsInBkIiwicWQiLCJjaGFyQ29kZSIsInJkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInNkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInRkIiwibG9jYXRpb24iLCJsb2NhbGUiLCJ1ZCIsImRhdGFUcmFuc2ZlciIsInZkIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwid2QiLCJ4ZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwieWQiLCJ6ZCIsIkFkIiwiQmQiLCJpc0ludGVyYWN0aXZlIiwiQ2QiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJEZCIsIkVkIiwiRmQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkdkIiwiSWQiLCJMIiwiSmQiLCJLZCIsIkxkIiwiTWQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJjb250ZW50RWRpdGFibGUiLCJVZCIsIlZkIiwic2VsZWN0IiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiYWUiLCJvblNlbGVjdCIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJiZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwibWUiLCJuZSIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwib2UiLCJwZSIsInRpbWVvdXRUaW1lIiwic2NoZWR1bGVkQ2FsbGJhY2siLCJjYWxsYmFja0lkIiwic2hpZnQiLCJxZSIsInRpbWVvdXQiLCJzZSIsInVlIiwidGUiLCJ2ZSIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwid2UiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwieGUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsInllIiwiemUiLCJBZSIsIkJlIiwibWF0aG1sIiwic3ZnIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJuYW1lc3BhY2VVUkkiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiR2UiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJIZSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiSWUiLCJKZSIsInNldFByb3BlcnR5Iiwic3Vic3RyaW5nIiwiS2UiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiYmx1ciIsImZvY3VzIiwiUGUiLCJjcmVhdGVFbGVtZW50TlMiLCJRZSIsIlJlIiwiX19odG1sIiwib25jbGljayIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJzZXRJbml0aWFsUHJvcGVydGllcyIsImRpZmZQcm9wZXJ0aWVzIiwidXBkYXRlUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRUZXh0Iiwid2FybkZvclVubWF0Y2hlZFRleHQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtIiwiWGUiLCJZZSIsIlplIiwiYXV0b0ZvY3VzIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiU2V0IiwiZmYiLCJnZiIsImhmIiwiTSIsIk4iLCJqZiIsImtmIiwibGYiLCJtZiIsIm5mIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJwZiIsInFmIiwicmYiLCJnZXRDaGlsZENvbnRleHQiLCJzZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwidGYiLCJ1ZiIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJ2ZiIsIndmIiwiaXNSZWFjdENvbXBvbmVudCIsInhmIiwieWYiLCJ6ZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiQWYiLCJlYXJsaWVzdFBlbmRpbmdUaW1lIiwibGF0ZXN0UGVuZGluZ1RpbWUiLCJlYXJsaWVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0UGluZ2VkVGltZSIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsImZpbmlzaGVkV29yayIsImNvbnRleHQiLCJwZW5kaW5nQ29udGV4dCIsImh5ZHJhdGUiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsImZpcnN0QmF0Y2giLCJuZXh0U2NoZWR1bGVkUm9vdCIsIkJmIiwiQ2YiLCJEZiIsIkZmIiwiR2YiLCJIZiIsIklmIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJKZiIsIktmIiwicGF5bG9hZCIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiX2NvbnRleHQiLCJfY2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiaGciLCJsZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJlbnF1ZXVlU2V0U3RhdGUiLCJpZyIsImpnIiwia2ciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwibWciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIm5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwib2ciLCJyZWZzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwicGciLCJxZyIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJyZyIsInNnIiwia2MiLCJIZCIsInUiLCJFIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiemciLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIlEiLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiS2ciLCJ1cGRhdGVyIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiaGlkZGVuIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiSmciLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJMZyIsIlBnIiwiUWciLCJSZyIsIlNnIiwiVGciLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiVWciLCJWZyIsIldnIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImNvbXBvbmVudERpZENhdGNoIiwiZGgiLCJjb21wb25lbnRTdGFjayIsImVoIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwaCIsInJoIiwic2giLCJ0aCIsInVoIiwidmgiLCJ3aCIsIlgiLCJ4aCIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJWIiwiR2giLCJIaCIsIlkiLCJJaCIsIkpoIiwiS2giLCJMaCIsIloiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiX29uQ29tcGxldGUiLCJYaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInJhbmdlQ291bnQiLCJXYSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJqYSIsImhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJ6IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsImdnIiwibGMiLCJiYSIsInJpIiwic2kiLCJNZyIsIk5nIiwidGkiLCJ1YyIsIk9nIiwidWkiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsImVpIiwiZmkiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIkVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJnaSIsImppIiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwia2kiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwibGkiLCJfaW50ZXJuYWxSb290IiwibWkiLCJvaSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJuaSIsInBpIiwiaWkiLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJxaSIsImNyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZpIiwid2kiLCJJbm5lclNsaWRlciIsIl90eXBlb2YiLCJfaW5pdGlhbFN0YXRlMiIsIl9sb2Rhc2gyIiwiX3RyYWNrIiwiX2RvdHMiLCJfYXJyb3dzIiwiX3Jlc2l6ZU9ic2VydmVyUG9seWZpbGwyIiwiX1JlYWN0JENvbXBvbmVudCIsImxpc3RSZWZIYW5kbGVyIiwidHJhY2tSZWZIYW5kbGVyIiwiYWRhcHRIZWlnaHQiLCJzc3JJbml0IiwicHJldlN0YXRlIiwib25MYXp5TG9hZCIsInVwZGF0ZVN0YXRlIiwiYXV0b1BsYXkiLCJsYXp5TG9hZFRpbWVyIiwic2V0SW50ZXJ2YWwiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwicm8iLCJvbldpbmRvd1Jlc2l6ZWQiLCJjYWxsYmFja1RpbWVycyIsIm9uZm9jdXMiLCJvblNsaWRlRm9jdXMiLCJvbmJsdXIiLCJvblNsaWRlQmx1ciIsImFuaW1hdGlvbkVuZENhbGxiYWNrIiwiY2xlYXJJbnRlcnZhbCIsInRpbWVyIiwiYXV0b3BsYXlUaW1lciIsIm5leHRQcm9wcyIsInNldFRyYWNrU3R5bGUiLCJfaXRlcmF0b3IiLCJfaXNBcnJheSIsInBhdXNlIiwiY2hlY2tJbWFnZXNMb2FkIiwiZGVib3VuY2VkUmVzaXplIiwicmVzaXplV2luZG93IiwidXBkYXRlZFN0YXRlIiwiX3RyYWNrV2lkdGgiLCJfdHJhY2tMZWZ0IiwiY2hpbGRyZW5XaWR0aHMiLCJwcmVDbG9uZXMiLCJwb3N0Q2xvbmVzIiwiX2kyIiwiX2kzIiwiX3RyYWNrU3R5bGUiLCJjdXJyZW50V2lkdGgiLCJ0cmFja0xlZnQiLCJpbWFnZXMiLCJpbWFnZXNDb3VudCIsImxvYWRlZENvdW50IiwiaW1hZ2UiLCJwcmV2Q2xpY2tIYW5kbGVyIiwib25sb2FkIiwib25lcnJvciIsIl9pbmRleCIsImRvbnRBbmltYXRlIiwiX3RoaXMkcHJvcHMiLCJhc05hdkZvciIsIl9zbGlkZUhhbmRsZXIiLCJpbm5lclNsaWRlciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNsaWNrYWJsZSIsImRpciIsInNlbGVjdEhhbmRsZXIiLCJkaXNhYmxlQm9keVNjcm9sbCIsIm9udG91Y2htb3ZlIiwiZW5hYmxlQm9keVNjcm9sbCIsInRyaWdnZXJTbGlkZUhhbmRsZXIiLCJzbGlja1ByZXYiLCJzbGlja05leHQiLCJzbGlja0dvVG8iLCJwbGF5IiwibmV4dEluZGV4IiwicGxheVR5cGUiLCJwYXVzZVR5cGUiLCJvbkRvdHNPdmVyIiwib25Eb3RzTGVhdmUiLCJvblRyYWNrT3ZlciIsIm9uVHJhY2tMZWF2ZSIsInNsaWNrLXZlcnRpY2FsIiwic2xpY2staW5pdGlhbGl6ZWQiLCJ0cmFja1Byb3BzIiwiZG90UHJvcHMiLCJhcnJvd1Byb3BzIiwidmVydGljYWxIZWlnaHRTdHlsZSIsImNlbnRlclBhZGRpbmdTdHlsZSIsInBhZGRpbmciLCJsaXN0U3R5bGUiLCJsaXN0UHJvcHMiLCJvbk1vdXNlRG93biIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZVVwIiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaE1vdmUiLCJvblRvdWNoRW5kIiwib25Ub3VjaENhbmNlbCIsIm9uS2V5RG93biIsImlubmVyU2xpZGVyUHJvcHMiLCJfaW5uZXJTbGlkZXIiLCJfanNvbjJtcTIiLCJfZGVmYXVsdFByb3BzMiIsImVucXVpcmUiLCJTbGlkZXIiLCJpbm5lclNsaWRlclJlZkhhbmRsZXIiLCJzbGlja1BhdXNlIiwic2xpY2tQbGF5IiwiX3Jlc3BvbnNpdmVNZWRpYUhhbmRsZXJzIiwibWVkaWEiLCJicmVha3BvaW50cyIsImJyZWFrcHQiLCJiUXVlcnkiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwic2V0dGluZ3MiLCJuZXdQcm9wcyIsIl90aGlzMyIsInJlc3AiLCJ3YXJuIiwibmV3Q2hpbGRyZW4iLCJyb3ciLCJfc2xpZGVyIiwiX3NsaWRlcjIiLCJyZWFjdF9zbGlja18xIiwiUHJvZHVjdENhcm91c2VsIiwiUHJvZHVjdENhcm91c2VsXzEiLCJQcm9kdWN0cyIsIkFib3V0VXMiLCJOYXZpZ2F0aW9uSWNvbnMiLCJoYW5kbGVOYXZpZ2F0aW9uSWNvbkNsaWNrIiwiZGF0YS1zaWJsaW5nLWlkIiwiY2xpY2tlZEVsZSIsImdldEVsZW1lbnRCeUlkIiwic2libGluZ0lkIiwic2Nyb2xsSW50b1ZpZXciLCJiZWhhdmlvciIsImludmFyaWFudCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJjb21tb25qc0dsb2JhbCIsImh1bXBzIiwiX3Byb2Nlc3NLZXlzIiwiY2FtZWxpemUiLCJwYXNjYWxpemUiLCJkZWNhbWVsaXplIiwiX2lzRnVuY3Rpb24iLCJfaXNPYmplY3QiLCJfaXNEYXRlIiwiX2lzUmVnRXhwIiwiX2lzQm9vbGVhbiIsIl9pc051bWVyaWNhbCIsIl9wcm9jZXNzb3IiLCJjb252ZXJ0Iiwib3V0cHV0IiwiY2hyIiwiY2FtZWxpemVkIiwic2VwYXJhdGVXb3JkcyIsImRlcGFzY2FsaXplIiwiY2FtZWxpemVLZXlzIiwiZGVjYW1lbGl6ZUtleXMiLCJwYXNjYWxpemVLZXlzIiwiZGVwYXNjYWxpemVLZXlzIiwiQXdhaXRWYWx1ZSIsIkFzeW5jR2VuZXJhdG9yIiwiZ2VuIiwiZnJvbnQiLCJiYWNrIiwicmVzdW1lIiwic2V0dGxlIiwiX2ludm9rZSIsInJlcXVlc3QiLCJhc3luY0l0ZXJhdG9yIiwidGhyb3ciLCJvYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4dHJhUHJvcHMiLCJtaXhpbnMiLCJhdHRycyIsInBhaXIiLCJzdGFydHNXaXRoIiwiX2V4dHJhUHJvcHMkc3R5bGUiLCJleGlzdGluZ1N0eWxlIiwicmVtYWluaW5nIiwiX2NvbnNvbGUiLCJvYmplY3RXaXRoS2V5Iiwibm9ybWFsaXplSWNvbkFyZ3MiLCJGb250QXdlc29tZUljb24kMSIsImljb25BcmdzIiwibWFza0FyZ3MiLCJfY2xhc3NlcyIsImZhLXNwaW4iLCJzcGluIiwiZmEtcHVsc2UiLCJwdWxzZSIsImZhLWZ3IiwiZml4ZWRXaWR0aCIsImZhLWJvcmRlciIsImJvcmRlciIsImZhLWxpIiwibGlzdEl0ZW0iLCJmYS1mbGlwLWhvcml6b250YWwiLCJmbGlwIiwiZmEtZmxpcC12ZXJ0aWNhbCIsInJvdGF0aW9uIiwicHVsbCIsIl9mb3J0YXdlc29tZV9mb250YXdlc29tZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwicmVuZGVyZWRJY29uIiwiY29udmVydEN1cnJ5IiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwicHJvcFR5cGVzIiwicHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJyZWFjdF9mb250YXdlc29tZV8xIiwiZmFSb2NrZXQiLCJDb21wYW55TW90dG8iLCJNb29uIiwiSW50ZXJhY3QiLCJNb2RlcyIsIlBhcnRpY2xlIiwiUGFydGljbGVNYW5hZ2VyIiwiUGFydGljbGVzTGlicmFyeSIsIlZlbmRvcnMiLCJQYXJ0aWNsZXMiLCJjYW52YXMiLCJsb2FkQ2FudmFzIiwiY2FudmFzQ2xhc3NOYW1lIiwiZGVlcEV4dGVuZCIsIl9fZGF0YV9fIiwiTnQiLCJfZSIsImZ0IiwiUHQiLCJidCIsIiQiLCJYdCIsIll0IiwiY29weSIsImp0Iiwia3QiLCJCdCIsInR0IiwibGFzdEluZGV4IiwiJHQiLCJkdCIsImF0Iiwid3QiLCJ2dCIsInl0IiwienQiLCJudCIsInN0Iiwib3QiLCJjdCIsInV0IiwicHQiLCJodCIsIm10IiwiZ3QiLCJCdWZmZXIiLCJ4dCIsIk10IiwiT3QiLCJBdCIsImlzQnVmZmVyIiwiRnQiLCJTdCIsIkV0IiwiSXQiLCJDdCIsIkx0IiwiVHQiLCJSdCIsIkR0IiwiV3QiLCJxdCIsIlV0IiwiaGFzaCIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwicGFydGljbGVzIiwibGluZV9saW5rZWQiLCJkaXN0YW5jZSIsImNvbG9yX3JnYl9saW5lIiwic2F2ZSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwiYmVnaW5QYXRoIiwic2hhZG93IiwiZW5hYmxlIiwic2hhZG93Qmx1ciIsInNoYWRvd0NvbG9yIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiY2xvc2VQYXRoIiwicmVzdG9yZSIsIm1vdmUiLCJhdHRyYWN0Iiwicm90YXRlWCIsInJvdGF0ZVkiLCJ2eCIsInZ5IiwicmFkaXVzIiwibWFuYWdlciIsInB1c2hpbmciLCJwb3NfeCIsInBvc195IiwicGFydGljbGVzRHJhdyIsImludGVyYWN0aXZpdHkiLCJldmVudHMiLCJvbmhvdmVyIiwiaXNJbkFycmF5IiwibW91c2UiLCJtb2RlcyIsImJ1YmJsZSIsIm9wYWNpdHlfYnViYmxlIiwicmFkaXVzX2J1YmJsZSIsInN0YXR1cyIsImJ1YmJsZV9jbGlja2luZyIsImNsaWNrX3Bvc194IiwiY2xpY2tfcG9zX3kiLCJnZXRUaW1lIiwiY2xpY2tfdGltZSIsImR1cmF0aW9uIiwiYnViYmxlX2R1cmF0aW9uX2VuZCIsInJlcHVsc2UiLCJjbGFtcCIsIm91dF9tb2RlIiwicmVwdWxzZV9maW5pc2giLCJyZXB1bHNlX2NvdW50IiwicmVwdWxzZV9jbGlja2luZyIsImNvcyIsInNpbiIsInZ4X2kiLCJ2eV9pIiwiZ3JhYiIsInNldHVwU2l6ZSIsInNldHVwUG9zaXRpb24iLCJzZXR1cENvbG9yIiwic2V0dXBPcGFjaXR5Iiwic2V0dXBBbmltYXRpb24iLCJhbmltIiwic2l6ZV9zdGF0dXMiLCJ2cyIsInN5bmMiLCJ2ZW5kb3JzIiwiYm91bmNlIiwiY2hlY2tPdmVybGFwIiwiZ2V0Q29sb3IiLCJvcGFjaXR5X3N0YXR1cyIsInZvIiwic3RyYWlnaHQiLCJyYXRpbyIsImltZ190eXBlIiwiY3JlYXRlU3ZnSW1nIiwiaW1nX2luZGV4IiwicmdiIiwiaHNsIiwiZmlsbFN0eWxlIiwiYXJjIiwiZHJhd1NoYXBlIiwicG9seWdvbiIsIm5iX3NpZGVzIiwiaW1nX29iaiIsImRyYXdJbWFnZSIsImludGVyYWN0Iiwib3BhY2l0eV9taW4iLCJzaXplX21pbiIsInhfbGVmdCIsInhfcmlnaHQiLCJ5X3RvcCIsInlfYm90dG9tIiwiZ3JhYlBhcnRpY2xlIiwiYnViYmxlUGFydGljbGUiLCJyZXB1bHNlUGFydGljbGUiLCJsaW5rUGFydGljbGVzIiwiYXR0cmFjdFBhcnRpY2xlcyIsImJvdW5jZVBhcnRpY2xlcyIsImNsZWFyUmVjdCIsInBhcnRpY2xlc1VwZGF0ZSIsImRyYXciLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNoZWNrQW5pbUZyYW1lIiwiZHJhd0FuaW1GcmFtZSIsImNvdW50X3N2ZyIsInBhcnRpY2xlc0VtcHR5IiwiY2FudmFzQ2xlYXIiLCJsb2FkUGFyYW1ldGVycyIsImV4dGVuZFBhcmFtcyIsImdldERlZmF1bHRQYXJhbXMiLCJldmVudHNMaXN0ZW5lcnMiLCJkZXRhY2hMaXN0ZW5lcnMiLCJvbldpbmRvd1Jlc2l6ZSIsImV4dGVuZFRtcERlZmluaXRpb24iLCJzaXplX3ZhbHVlIiwic2l6ZV9hbmltX3NwZWVkIiwibW92ZV9zcGVlZCIsImxpbmVfbGlua2VkX2Rpc3RhbmNlIiwibGluZV9saW5rZWRfd2lkdGgiLCJtb2RlX2dyYWJfZGlzdGFuY2UiLCJtb2RlX2J1YmJsZV9kaXN0YW5jZSIsIm1vZGVfYnViYmxlX3NpemUiLCJtb2RlX3JlcHVsc2VfZGlzdGFuY2UiLCJyZXRpbmFfZGV0ZWN0IiwiZGV2aWNlUGl4ZWxSYXRpbyIsInB4cmF0aW8iLCJyZXRpbmEiLCJnZXRDb250ZXh0IiwicmVzaXplIiwiZmlsbFJlY3QiLCJwYXJ0aWNsZXNDcmVhdGUiLCJkZW5zaXR5QXV0b1BhcnRpY2xlcyIsImRldGVjdF9vbiIsIm9mZnNldFgiLCJvZmZzZXRZIiwicHVzaFBhcnRpY2xlcyIsInBhcnRpY2xlc19uYiIsInJlbW92ZVBhcnRpY2xlcyIsImRlbnNpdHkiLCJ2YWx1ZV9hcmVhIiwiQmxvYiIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIkltYWdlIiwicmV2b2tlT2JqZWN0VVJMIiwidHJhbnNsYXRlIiwidG9EYXRhVVJMIiwiaW1nX2Vycm9yIiwiY2hlY2tCZWZvcmVEcmF3IiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZSIsInNlbmQiLCJpbml0IiwicmV0aW5hSW5pdCIsImNhbnZhc0luaXQiLCJjYW52YXNTaXplIiwiaGV4VG9SZ2IiLCJhdG9iIiwibG9hZEltZyIsInJlYWN0X3BhcnRpY2xlc19qc18xIiwiTW9vbl8xIiwiU3BhY2VCYWNrZ3JvdW5kIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImtleVByZWZpeCIsIj0iLCI6IiwiZXNjYXBlIiwib25seSIsImNyZWF0ZVJlZiIsImNyZWF0ZUNvbnRleHQiLCJfZGVmYXVsdFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfY2hhbmdlZEJpdHMyIiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImZvcndhcmRSZWYiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJ1bnN0YWJsZV9Bc3luY01vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsIlNwYWNlQmFja2dyb3VuZF8xIiwiQ29tcGFueU1vdHRvXzEiLCJOYXZpZ2F0aW9uSWNvbnNfMSIsIlNwYWNlIiwiU3BhY2VfMSIsIkFib3V0VXNfMSIsIlByb2R1Y3RzXzEiLCJSb2NrZXRfMSIsIkNvbXBhbnlEZXRhaWxzXzEiLCJSZWFjdERPTSIsIkljb25QYXRoIiwicmVnRXhwIiwicmVwbGFjZXIiLCJwYXJ0IiwiJHJlIiwiT3AiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImluTW9kdWxlIiwicnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIndyYXAiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsIkNvbnRleHQiLCJyZXNldCIsInNraXBUZW1wUmVzZXQiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwicmVjb3JkIiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJhZnRlckxvYyIsImZpbmlzaCIsImNhdGNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbmZvIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIiR0YXNrIiwiTVNJRSIsImJvdW5kQXJncyIsIm1pY3JvdGFzayIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsIl9jIiwic3Vic2NyaXB0aW9uQ2xvc2VkIiwiX28iLCJjbG9zZVN1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbiIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiX3MiLCIkT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIm9ic2VydmFibGUiLCJpdGVtcyIsIk9ic2VydmFibGUiLCJhc2FwIiwiJG1ldGFkYXRhIiwidG9NZXRhS2V5Iiwib3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSIsIm1ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwib3JkaW5hcnlIYXNPd25NZXRhZGF0YSIsImhhc093bk1ldGFkYXRhIiwib3JkaW5hcnlIYXNNZXRhZGF0YSIsImhhc01ldGFkYXRhIiwib3JkaW5hcnlPd25NZXRhZGF0YUtleXMiLCJnZXRPd25NZXRhZGF0YUtleXMiLCJvcmRpbmFyeUdldE93bk1ldGFkYXRhIiwiZ2V0T3duTWV0YWRhdGEiLCJvcmRpbmFyeU1ldGFkYXRhS2V5cyIsIm9LZXlzIiwicEtleXMiLCJnZXRNZXRhZGF0YUtleXMiLCJvcmRpbmFyeUdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCJkZWxldGVNZXRhZGF0YSIsImRlZmluZU1ldGFkYXRhIiwidHJ5IiwicHJvbWlzZVJlc29sdmUiLCJmaW5hbGx5Iiwib25GaW5hbGx5Iiwic2lnbmJpdCIsInVtdWxoIiwiJHUiLCIkdiIsInUwIiwidjAiLCJ1MSIsInYxIiwiREVHX1BFUl9SQUQiLCJyYWRpYW5zIiwiZGVncmVlcyIsIlJBRF9QRVJfREVHIiwiaW11bGgiLCJpc3ViaCIsIngwIiwieDEiLCJ5MCIsInkxIiwiJHgwIiwiJHkwIiwiaWFkZGgiLCJmc2NhbGUiLCJsb3dlciIsInVwcGVyIiwiaXNFcnJvciIsInRvSlNPTiIsIl9fbG9va3VwU2V0dGVyX18iLCJfX2xvb2t1cEdldHRlcl9fIiwiX19kZWZpbmVHZXR0ZXJfXyIsIiR2YWx1ZXMiLCJjcmVhdGVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiZ2V0RmxhZ3MiLCJSZWdFeHBQcm90byIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsInJlZ2V4cCIsIl9yIiwibWF0Y2hBbGwiLCJyeCIsIiRwYWQiLCJwYWRFbmQiLCJwYWRTdGFydCIsIiRhdCIsImFycmF5U3BlY2llc0NyZWF0ZSIsImZsYXR0ZW4iLCJkZXB0aEFyZyIsImZsYXRNYXAiLCIkaW5jbHVkZXMiLCJzZXRQcm90byIsInByb3BlcnR5S2V5IiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwicmVjZWl2ZXIiLCJvd25EZXNjIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRXh0ZW5zaWJsZSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsImRlbGV0ZVByb3BlcnR5IiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluIiwidmlld1MiLCJ2aWV3VCIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIlVTRV9OQVRJVkUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfdiIsInJlYWN0aW9uIiwiZXhpdGVkIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FwYWJpbGl0eSIsImFsbCIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiU1BMSVQiLCIkc3BsaXQiLCJfc3BsaXQiLCIkcHVzaCIsIk5QQ0ciLCJsaW1pdCIsInNlcGFyYXRvcjIiLCJsYXN0TGVuZ3RoIiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5IiwiU0VBUkNIIiwiJHNlYXJjaCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiJG1hdGNoIiwiJGZsYWdzIiwiJFJlZ0V4cCIsInJlMSIsInJlMiIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCIkZmluZCIsImZvcmNlZCIsIk5FR0FUSVZFX1pFUk8iLCIkaW5kZXhPZiIsIiRyZWR1Y2UiLCIkZXZlcnkiLCIkc29tZSIsIiRmaWx0ZXIiLCIkZm9yRWFjaCIsIlNUUklDVCIsIiRzb3J0IiwidXBUbyIsImNsb25lZCIsImhpbnQiLCJUT19QUklNSVRJVkUiLCJEYXRlUHJvdG8iLCIkdG9JU09TdHJpbmciLCJ0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwicHYiLCIkc3RhcnRzV2l0aCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJjb2RlUG9pbnRBdCIsInBvaW50IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJjb2RlIiwidHJ1bmMiLCJ0YW5oIiwic2luaCIsImxvZzIiLCJsb2cxMCIsIkxPRzEwRSIsIiRpbXVsIiwiaW11bCIsInhuIiwieW4iLCJ4bCIsInlsIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiY29zaCIsImNsejMyIiwiTE9HMkUiLCJjYnJ0IiwiJGF0YW5oIiwiYXRhbmgiLCIkYXNpbmgiLCJhc2luaCIsIiRhY29zaCIsImFjb3NoIiwiTUFYX1ZBTFVFIiwiTUlOX1NBRkVfSU5URUdFUiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiX2lzRmluaXRlIiwiJGZhaWxzIiwiYU51bWJlclZhbHVlIiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsImZyYWN0aW9uRGlnaXRzIiwieDIiLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIlRSSU0iLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImRpZ2l0cyIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCJGUHJvdG8iLCJuYW1lUkUiLCIkaXNTZWFsZWQiLCIkaXNGcm96ZW4iLCIkc2VhbCIsIiRmcmVlemUiLCIkZ2V0UHJvdG90eXBlT2YiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRKU09OIiwiX3N0cmluZ2lmeSIsIkhJRERFTiIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwic3ltIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiJHJlcGxhY2VyIiwiX2JhYmVsUG9seWZpbGwiLCJERUZJTkVfUFJPUEVSVFkiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFB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QUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLElBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FHLEVBQUFELFFBQUFGLEVBQUEsK0NDNUxBLEdBTkFBLEVBQUEsS0FFQUEsRUFBQSxLQUVBQSxFQUFBLEtBRUFvQyxFQUFBbXpHLGVBQ0EsVUFBQXYrRSxNQUFBLGtEQUVBNTBCLEVBQUFtekcsZ0JBQUEsRUFFQSxJQUFBQyxFQUFBLGlCQUNBLFNBQUE1NUUsRUFBQXoyQixFQUFBeEQsRUFBQU4sR0FDQThELEVBQUF4RCxJQUFBYixPQUFBMDBHLEdBQUFyd0csRUFBQXhELEdBQ0FnUixVQUFBLEVBQ0FELGNBQUEsRUFDQXJSLFVBSUF1NkIsRUFBQS8xQixPQUFBN0QsVUFBQSxhQUFBaWxHLFVBQ0FyckUsRUFBQS8xQixPQUFBN0QsVUFBQSxjQUFBZ2xHLFFBRUEsZ01BQUE3Z0csTUFBQSxLQUFBb0UsUUFBQSxTQUFBNUksTUFDQUEsSUFBQWk2QixFQUFBeHZCLE1BQUF6SyxFQUFBaUMsU0FBQXJELEtBQUFxQixRQUFBRCIsImZpbGUiOiJIb21lQnVuZGxlLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0MDkpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuNycgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIE1hcCA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYgKCFrZXlNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIHZhciBrZXlzID0gW107XG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uIChPKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpIHtcbiAgdmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG4gIHZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbiAgdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbiAgdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiAgdmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG4gIHZhciAkYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG4gIHZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbiAgdmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuICB2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiAgdmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG4gIHZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG4gIHZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuICB2YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xuICB2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xuICB2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbiAgdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4gIHZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xuICB2YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG4gIHZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbiAgdmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG4gIHZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuICB2YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG4gIHZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xuICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJyk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG4gIHZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbiAgdmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbiAgdmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xuICB2YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKTtcbiAgdmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuICB2YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xuICB2YXIgZFAgPSAkRFAuZjtcbiAgdmFyIGdPUEQgPSAkR09QRC5mO1xuICB2YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuICB2YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbiAgdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG4gIHZhciBTSEFSRURfQlVGRkVSID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVI7XG4gIHZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG4gIHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheVtQUk9UT1RZUEVdO1xuICB2YXIgJEFycmF5QnVmZmVyID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbiAgdmFyICREYXRhVmlldyA9ICRidWZmZXIuRGF0YVZpZXc7XG4gIHZhciBhcnJheUZvckVhY2ggPSBjcmVhdGVBcnJheU1ldGhvZCgwKTtcbiAgdmFyIGFycmF5RmlsdGVyID0gY3JlYXRlQXJyYXlNZXRob2QoMik7XG4gIHZhciBhcnJheVNvbWUgPSBjcmVhdGVBcnJheU1ldGhvZCgzKTtcbiAgdmFyIGFycmF5RXZlcnkgPSBjcmVhdGVBcnJheU1ldGhvZCg0KTtcbiAgdmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xuICB2YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbiAgdmFyIGFycmF5SW5jbHVkZXMgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpO1xuICB2YXIgYXJyYXlJbmRleE9mID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSk7XG4gIHZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcbiAgdmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XG4gIHZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzO1xuICB2YXIgYXJyYXlMYXN0SW5kZXhPZiA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2Y7XG4gIHZhciBhcnJheVJlZHVjZSA9IEFycmF5UHJvdG8ucmVkdWNlO1xuICB2YXIgYXJyYXlSZWR1Y2VSaWdodCA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQ7XG4gIHZhciBhcnJheUpvaW4gPSBBcnJheVByb3RvLmpvaW47XG4gIHZhciBhcnJheVNvcnQgPSBBcnJheVByb3RvLnNvcnQ7XG4gIHZhciBhcnJheVNsaWNlID0gQXJyYXlQcm90by5zbGljZTtcbiAgdmFyIGFycmF5VG9TdHJpbmcgPSBBcnJheVByb3RvLnRvU3RyaW5nO1xuICB2YXIgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmc7XG4gIHZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbiAgdmFyIFRBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbiAgdmFyIFRZUEVEX0NPTlNUUlVDVE9SID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpO1xuICB2YXIgREVGX0NPTlNUUlVDVE9SID0gdWlkKCdkZWZfY29uc3RydWN0b3InKTtcbiAgdmFyIEFMTF9DT05TVFJVQ1RPUlMgPSAkdHlwZWQuQ09OU1RSO1xuICB2YXIgVFlQRURfQVJSQVkgPSAkdHlwZWQuVFlQRUQ7XG4gIHZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG4gIHZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTtcbiAgfSk7XG5cbiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIGlmIChpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpIHJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIChDLCBsZW5ndGgpIHtcbiAgICBpZiAoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbiAoTywgbGlzdCkge1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5LCBpbnRlcm5hbCkge1xuICAgIGRQKGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfSB9KTtcbiAgfTtcblxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKykge1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYgKG1hcHBpbmcgJiYgYUxlbiA+IDIpIG1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBwcm90byA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoO1xuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgTyA9IHZhbGlkYXRlKHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICAgICAgdmFyICRiZWdpbiA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICAgIHZhbGlkYXRlKHRoaXMpO1xuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxuICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXVxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICAgJiYga2V5IGluIHRhcmdldFxuICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xuICB9O1xuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICBpZiAoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgICYmIGlzT2JqZWN0KGRlc2MpXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXG4gICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKVxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSlcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxuICAgICkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYgKCFBTExfQ09OU1RSVUNUT1JTKSB7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogJHNsaWNlLFxuICAgIHNldDogJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gKCkgeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6IGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKSB7XG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcbiAgICB2YXIgTkFNRSA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBLRVk7XG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgS0VZO1xuICAgIHZhciBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdO1xuICAgIHZhciBCYXNlID0gVHlwZWRBcnJheSB8fCB7fTtcbiAgICB2YXIgVEFDID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KTtcbiAgICB2YXIgRk9SQ0VEID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlY7XG4gICAgdmFyIE8gPSB7fTtcbiAgICB2YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7XG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5KDEpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSkgfHwgISRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheSgxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBCYXNlKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5KSkgaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZiAoIUxJQlJBUlkpIFR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl07XG4gICAgdmFyIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3JcbiAgICAgICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuICAgIHZhciAkaXRlcmF0b3IgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmIChDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIHtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTXG4gICAgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgQmFzZS5vZi5jYWxsKFR5cGVkQXJyYXksIDEpOyB9KSwgTkFNRSwge1xuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcblxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHsgc2V0OiAkc2V0IH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgaWYgKCFMSUJSQVJZICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZykgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyA9IGFycmF5VG9TdHJpbmc7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHsgc2xpY2U6ICRzbGljZSB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwgeyB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nIH0pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYgKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jYW5Vc2VET00gPSBleHBvcnRzLnNsaWRlc09uTGVmdCA9IGV4cG9ydHMuc2xpZGVzT25SaWdodCA9IGV4cG9ydHMuc2libGluZ0RpcmVjdGlvbiA9IGV4cG9ydHMuZ2V0VG90YWxTbGlkZXMgPSBleHBvcnRzLmdldFBvc3RDbG9uZXMgPSBleHBvcnRzLmdldFByZUNsb25lcyA9IGV4cG9ydHMuZ2V0VHJhY2tMZWZ0ID0gZXhwb3J0cy5nZXRUcmFja0FuaW1hdGVDU1MgPSBleHBvcnRzLmdldFRyYWNrQ1NTID0gZXhwb3J0cy5jaGVja1NwZWNLZXlzID0gZXhwb3J0cy5nZXRTbGlkZUNvdW50ID0gZXhwb3J0cy5jaGVja05hdmlnYWJsZSA9IGV4cG9ydHMuZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGV4cG9ydHMuc3dpcGVFbmQgPSBleHBvcnRzLnN3aXBlTW92ZSA9IGV4cG9ydHMuc3dpcGVTdGFydCA9IGV4cG9ydHMua2V5SGFuZGxlciA9IGV4cG9ydHMuY2hhbmdlU2xpZGUgPSBleHBvcnRzLnNsaWRlSGFuZGxlciA9IGV4cG9ydHMuaW5pdGlhbGl6ZWRTdGF0ZSA9IGV4cG9ydHMuZXh0cmFjdE9iamVjdCA9IGV4cG9ydHMuY2FuR29OZXh0ID0gZXhwb3J0cy5nZXRTd2lwZURpcmVjdGlvbiA9IGV4cG9ydHMuZ2V0SGVpZ2h0ID0gZXhwb3J0cy5nZXRXaWR0aCA9IGV4cG9ydHMubGF6eVNsaWRlc09uUmlnaHQgPSBleHBvcnRzLmxhenlTbGlkZXNPbkxlZnQgPSBleHBvcnRzLmxhenlFbmRJbmRleCA9IGV4cG9ydHMubGF6eVN0YXJ0SW5kZXggPSBleHBvcnRzLmdldFJlcXVpcmVkTGF6eVNsaWRlcyA9IGV4cG9ydHMuZ2V0T25EZW1hbmRMYXp5U2xpZGVzID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoXCJyZWFjdC1kb21cIik7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZ2V0T25EZW1hbmRMYXp5U2xpZGVzID0gZXhwb3J0cy5nZXRPbkRlbWFuZExhenlTbGlkZXMgPSBmdW5jdGlvbiBnZXRPbkRlbWFuZExhenlTbGlkZXMoc3BlYykge1xuICB2YXIgb25EZW1hbmRTbGlkZXMgPSBbXTtcbiAgdmFyIHN0YXJ0SW5kZXggPSBsYXp5U3RhcnRJbmRleChzcGVjKTtcbiAgdmFyIGVuZEluZGV4ID0gbGF6eUVuZEluZGV4KHNwZWMpO1xuICBmb3IgKHZhciBzbGlkZUluZGV4ID0gc3RhcnRJbmRleDsgc2xpZGVJbmRleCA8IGVuZEluZGV4OyBzbGlkZUluZGV4KyspIHtcbiAgICBpZiAoc3BlYy5sYXp5TG9hZGVkTGlzdC5pbmRleE9mKHNsaWRlSW5kZXgpIDwgMCkge1xuICAgICAgb25EZW1hbmRTbGlkZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9uRGVtYW5kU2xpZGVzO1xufTtcblxuLy8gcmV0dXJuIGxpc3Qgb2Ygc2xpZGVzIHRoYXQgbmVlZCB0byBiZSBwcmVzZW50XG52YXIgZ2V0UmVxdWlyZWRMYXp5U2xpZGVzID0gZXhwb3J0cy5nZXRSZXF1aXJlZExhenlTbGlkZXMgPSBmdW5jdGlvbiBnZXRSZXF1aXJlZExhenlTbGlkZXMoc3BlYykge1xuICB2YXIgcmVxdWlyZWRTbGlkZXMgPSBbXTtcbiAgdmFyIHN0YXJ0SW5kZXggPSBsYXp5U3RhcnRJbmRleChzcGVjKTtcbiAgdmFyIGVuZEluZGV4ID0gbGF6eUVuZEluZGV4KHNwZWMpO1xuICBmb3IgKHZhciBzbGlkZUluZGV4ID0gc3RhcnRJbmRleDsgc2xpZGVJbmRleCA8IGVuZEluZGV4OyBzbGlkZUluZGV4KyspIHtcbiAgICByZXF1aXJlZFNsaWRlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICB9XG4gIHJldHVybiByZXF1aXJlZFNsaWRlcztcbn07XG5cbi8vIHN0YXJ0SW5kZXggdGhhdCBuZWVkcyB0byBiZSBwcmVzZW50XG52YXIgbGF6eVN0YXJ0SW5kZXggPSBleHBvcnRzLmxhenlTdGFydEluZGV4ID0gZnVuY3Rpb24gbGF6eVN0YXJ0SW5kZXgoc3BlYykge1xuICByZXR1cm4gc3BlYy5jdXJyZW50U2xpZGUgLSBsYXp5U2xpZGVzT25MZWZ0KHNwZWMpO1xufTtcbnZhciBsYXp5RW5kSW5kZXggPSBleHBvcnRzLmxhenlFbmRJbmRleCA9IGZ1bmN0aW9uIGxhenlFbmRJbmRleChzcGVjKSB7XG4gIHJldHVybiBzcGVjLmN1cnJlbnRTbGlkZSArIGxhenlTbGlkZXNPblJpZ2h0KHNwZWMpO1xufTtcbnZhciBsYXp5U2xpZGVzT25MZWZ0ID0gZXhwb3J0cy5sYXp5U2xpZGVzT25MZWZ0ID0gZnVuY3Rpb24gbGF6eVNsaWRlc09uTGVmdChzcGVjKSB7XG4gIHJldHVybiBzcGVjLmNlbnRlck1vZGUgPyBNYXRoLmZsb29yKHNwZWMuc2xpZGVzVG9TaG93IC8gMikgKyAocGFyc2VJbnQoc3BlYy5jZW50ZXJQYWRkaW5nKSA+IDAgPyAxIDogMCkgOiAwO1xufTtcbnZhciBsYXp5U2xpZGVzT25SaWdodCA9IGV4cG9ydHMubGF6eVNsaWRlc09uUmlnaHQgPSBmdW5jdGlvbiBsYXp5U2xpZGVzT25SaWdodChzcGVjKSB7XG4gIHJldHVybiBzcGVjLmNlbnRlck1vZGUgPyBNYXRoLmZsb29yKChzcGVjLnNsaWRlc1RvU2hvdyAtIDEpIC8gMikgKyAxICsgKHBhcnNlSW50KHNwZWMuY2VudGVyUGFkZGluZykgPiAwID8gMSA6IDApIDogc3BlYy5zbGlkZXNUb1Nob3c7XG59O1xuXG4vLyBnZXQgd2lkdGggb2YgYW4gZWxlbWVudFxudmFyIGdldFdpZHRoID0gZXhwb3J0cy5nZXRXaWR0aCA9IGZ1bmN0aW9uIGdldFdpZHRoKGVsZW0pIHtcbiAgcmV0dXJuIGVsZW0gJiYgZWxlbS5vZmZzZXRXaWR0aCB8fCAwO1xufTtcbnZhciBnZXRIZWlnaHQgPSBleHBvcnRzLmdldEhlaWdodCA9IGZ1bmN0aW9uIGdldEhlaWdodChlbGVtKSB7XG4gIHJldHVybiBlbGVtICYmIGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IDA7XG59O1xudmFyIGdldFN3aXBlRGlyZWN0aW9uID0gZXhwb3J0cy5nZXRTd2lwZURpcmVjdGlvbiA9IGZ1bmN0aW9uIGdldFN3aXBlRGlyZWN0aW9uKHRvdWNoT2JqZWN0KSB7XG4gIHZhciB2ZXJ0aWNhbFN3aXBpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciB4RGlzdCwgeURpc3QsIHIsIHN3aXBlQW5nbGU7XG4gIHhEaXN0ID0gdG91Y2hPYmplY3Quc3RhcnRYIC0gdG91Y2hPYmplY3QuY3VyWDtcbiAgeURpc3QgPSB0b3VjaE9iamVjdC5zdGFydFkgLSB0b3VjaE9iamVjdC5jdXJZO1xuICByID0gTWF0aC5hdGFuMih5RGlzdCwgeERpc3QpO1xuICBzd2lwZUFuZ2xlID0gTWF0aC5yb3VuZChyICogMTgwIC8gTWF0aC5QSSk7XG4gIGlmIChzd2lwZUFuZ2xlIDwgMCkge1xuICAgIHN3aXBlQW5nbGUgPSAzNjAgLSBNYXRoLmFicyhzd2lwZUFuZ2xlKTtcbiAgfVxuICBpZiAoc3dpcGVBbmdsZSA8PSA0NSAmJiBzd2lwZUFuZ2xlID49IDAgfHwgc3dpcGVBbmdsZSA8PSAzNjAgJiYgc3dpcGVBbmdsZSA+PSAzMTUpIHtcbiAgICByZXR1cm4gXCJsZWZ0XCI7XG4gIH1cbiAgaWYgKHN3aXBlQW5nbGUgPj0gMTM1ICYmIHN3aXBlQW5nbGUgPD0gMjI1KSB7XG4gICAgcmV0dXJuIFwicmlnaHRcIjtcbiAgfVxuICBpZiAodmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgaWYgKHN3aXBlQW5nbGUgPj0gMzUgJiYgc3dpcGVBbmdsZSA8PSAxMzUpIHtcbiAgICAgIHJldHVybiBcInVwXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImRvd25cIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gXCJ2ZXJ0aWNhbFwiO1xufTtcblxuLy8gd2hldGhlciBvciBub3Qgd2UgY2FuIGdvIG5leHRcbnZhciBjYW5Hb05leHQgPSBleHBvcnRzLmNhbkdvTmV4dCA9IGZ1bmN0aW9uIGNhbkdvTmV4dChzcGVjKSB7XG4gIHZhciBjYW5HbyA9IHRydWU7XG4gIGlmICghc3BlYy5pbmZpbml0ZSkge1xuICAgIGlmIChzcGVjLmNlbnRlck1vZGUgJiYgc3BlYy5jdXJyZW50U2xpZGUgPj0gc3BlYy5zbGlkZUNvdW50IC0gMSkge1xuICAgICAgY2FuR28gPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHNwZWMuc2xpZGVDb3VudCA8PSBzcGVjLnNsaWRlc1RvU2hvdyB8fCBzcGVjLmN1cnJlbnRTbGlkZSA+PSBzcGVjLnNsaWRlQ291bnQgLSBzcGVjLnNsaWRlc1RvU2hvdykge1xuICAgICAgY2FuR28gPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhbkdvO1xufTtcblxuLy8gZ2l2ZW4gYW4gb2JqZWN0IGFuZCBhIGxpc3Qgb2Yga2V5cywgcmV0dXJuIG5ldyBvYmplY3Qgd2l0aCBnaXZlbiBrZXlzXG52YXIgZXh0cmFjdE9iamVjdCA9IGV4cG9ydHMuZXh0cmFjdE9iamVjdCA9IGZ1bmN0aW9uIGV4dHJhY3RPYmplY3Qoc3BlYywga2V5cykge1xuICB2YXIgbmV3T2JqZWN0ID0ge307XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIG5ld09iamVjdFtrZXldID0gc3BlY1trZXldO1xuICB9KTtcbiAgcmV0dXJuIG5ld09iamVjdDtcbn07XG5cbi8vIGdldCBpbml0aWFsaXplZCBzdGF0ZVxudmFyIGluaXRpYWxpemVkU3RhdGUgPSBleHBvcnRzLmluaXRpYWxpemVkU3RhdGUgPSBmdW5jdGlvbiBpbml0aWFsaXplZFN0YXRlKHNwZWMpIHtcbiAgLy8gc3BlYyBhbHNvIGNvbnRhaW5zIGxpc3RSZWYsIHRyYWNrUmVmXG4gIHZhciBzbGlkZUNvdW50ID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KHNwZWMuY2hpbGRyZW4pO1xuICB2YXIgbGlzdFdpZHRoID0gTWF0aC5jZWlsKGdldFdpZHRoKF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShzcGVjLmxpc3RSZWYpKSk7XG4gIHZhciB0cmFja1dpZHRoID0gTWF0aC5jZWlsKGdldFdpZHRoKF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShzcGVjLnRyYWNrUmVmKSkpO1xuICB2YXIgc2xpZGVXaWR0aCA9IHZvaWQgMDtcbiAgaWYgKCFzcGVjLnZlcnRpY2FsKSB7XG4gICAgdmFyIGNlbnRlclBhZGRpbmdBZGogPSBzcGVjLmNlbnRlck1vZGUgJiYgcGFyc2VJbnQoc3BlYy5jZW50ZXJQYWRkaW5nKSAqIDI7XG4gICAgaWYgKHR5cGVvZiBzcGVjLmNlbnRlclBhZGRpbmcgPT09IFwic3RyaW5nXCIgJiYgc3BlYy5jZW50ZXJQYWRkaW5nLnNsaWNlKC0xKSA9PT0gXCIlXCIpIHtcbiAgICAgIGNlbnRlclBhZGRpbmdBZGogKj0gbGlzdFdpZHRoIC8gMTAwO1xuICAgIH1cbiAgICBzbGlkZVdpZHRoID0gTWF0aC5jZWlsKChsaXN0V2lkdGggLSBjZW50ZXJQYWRkaW5nQWRqKSAvIHNwZWMuc2xpZGVzVG9TaG93KTtcbiAgfSBlbHNlIHtcbiAgICBzbGlkZVdpZHRoID0gbGlzdFdpZHRoO1xuICB9XG4gIHZhciBzbGlkZUhlaWdodCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShzcGVjLmxpc3RSZWYpICYmIGdldEhlaWdodChfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoc3BlYy5saXN0UmVmKS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pbmRleD1cIjBcIl0nKSk7XG4gIHZhciBsaXN0SGVpZ2h0ID0gc2xpZGVIZWlnaHQgKiBzcGVjLnNsaWRlc1RvU2hvdztcbiAgdmFyIGN1cnJlbnRTbGlkZSA9IHNwZWMuY3VycmVudFNsaWRlID09PSB1bmRlZmluZWQgPyBzcGVjLmluaXRpYWxTbGlkZSA6IHNwZWMuY3VycmVudFNsaWRlO1xuICBpZiAoc3BlYy5ydGwgJiYgc3BlYy5jdXJyZW50U2xpZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGN1cnJlbnRTbGlkZSA9IHNsaWRlQ291bnQgLSAxIC0gc3BlYy5pbml0aWFsU2xpZGU7XG4gIH1cbiAgdmFyIGxhenlMb2FkZWRMaXN0ID0gc3BlYy5sYXp5TG9hZGVkTGlzdCB8fCBbXTtcbiAgdmFyIHNsaWRlc1RvTG9hZCA9IGdldE9uRGVtYW5kTGF6eVNsaWRlcyh7IGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlLCBsYXp5TG9hZGVkTGlzdDogbGF6eUxvYWRlZExpc3QgfSwgc3BlYyk7XG4gIGxhenlMb2FkZWRMaXN0LmNvbmNhdChzbGlkZXNUb0xvYWQpO1xuXG4gIHZhciBzdGF0ZSA9IHtcbiAgICBzbGlkZUNvdW50OiBzbGlkZUNvdW50LFxuICAgIHNsaWRlV2lkdGg6IHNsaWRlV2lkdGgsXG4gICAgbGlzdFdpZHRoOiBsaXN0V2lkdGgsXG4gICAgdHJhY2tXaWR0aDogdHJhY2tXaWR0aCxcbiAgICBjdXJyZW50U2xpZGU6IGN1cnJlbnRTbGlkZSxcbiAgICBzbGlkZUhlaWdodDogc2xpZGVIZWlnaHQsXG4gICAgbGlzdEhlaWdodDogbGlzdEhlaWdodCxcbiAgICBsYXp5TG9hZGVkTGlzdDogbGF6eUxvYWRlZExpc3RcbiAgfTtcblxuICBpZiAoc3BlYy5hdXRvcGxheWluZyA9PT0gbnVsbCAmJiBzcGVjLmF1dG9wbGF5KSB7XG4gICAgc3RhdGVbXCJhdXRvcGxheWluZ1wiXSA9IFwicGxheWluZ1wiO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufTtcblxudmFyIHNsaWRlSGFuZGxlciA9IGV4cG9ydHMuc2xpZGVIYW5kbGVyID0gZnVuY3Rpb24gc2xpZGVIYW5kbGVyKHNwZWMpIHtcbiAgdmFyIHdhaXRGb3JBbmltYXRlID0gc3BlYy53YWl0Rm9yQW5pbWF0ZSxcbiAgICAgIGFuaW1hdGluZyA9IHNwZWMuYW5pbWF0aW5nLFxuICAgICAgZmFkZSA9IHNwZWMuZmFkZSxcbiAgICAgIGluZmluaXRlID0gc3BlYy5pbmZpbml0ZSxcbiAgICAgIGluZGV4ID0gc3BlYy5pbmRleCxcbiAgICAgIHNsaWRlQ291bnQgPSBzcGVjLnNsaWRlQ291bnQsXG4gICAgICBsYXp5TG9hZGVkTGlzdCA9IHNwZWMubGF6eUxvYWRlZExpc3QsXG4gICAgICBsYXp5TG9hZCA9IHNwZWMubGF6eUxvYWQsXG4gICAgICBjdXJyZW50U2xpZGUgPSBzcGVjLmN1cnJlbnRTbGlkZSxcbiAgICAgIGNlbnRlck1vZGUgPSBzcGVjLmNlbnRlck1vZGUsXG4gICAgICBzbGlkZXNUb1Njcm9sbCA9IHNwZWMuc2xpZGVzVG9TY3JvbGwsXG4gICAgICBzbGlkZXNUb1Nob3cgPSBzcGVjLnNsaWRlc1RvU2hvdyxcbiAgICAgIHVzZUNTUyA9IHNwZWMudXNlQ1NTO1xuXG4gIGlmICh3YWl0Rm9yQW5pbWF0ZSAmJiBhbmltYXRpbmcpIHJldHVybiB7fTtcbiAgdmFyIGFuaW1hdGlvblNsaWRlID0gaW5kZXgsXG4gICAgICBmaW5hbFNsaWRlID0gdm9pZCAwLFxuICAgICAgYW5pbWF0aW9uTGVmdCA9IHZvaWQgMCxcbiAgICAgIGZpbmFsTGVmdCA9IHZvaWQgMDtcbiAgdmFyIHN0YXRlID0ge30sXG4gICAgICBuZXh0U3RhdGUgPSB7fTtcbiAgaWYgKGZhZGUpIHtcbiAgICBpZiAoIWluZmluaXRlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gc2xpZGVDb3VudCkpIHJldHVybiB7fTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBhbmltYXRpb25TbGlkZSA9IGluZGV4ICsgc2xpZGVDb3VudDtcbiAgICB9IGVsc2UgaWYgKGluZGV4ID49IHNsaWRlQ291bnQpIHtcbiAgICAgIGFuaW1hdGlvblNsaWRlID0gaW5kZXggLSBzbGlkZUNvdW50O1xuICAgIH1cbiAgICBpZiAobGF6eUxvYWQgJiYgbGF6eUxvYWRlZExpc3QuaW5kZXhPZihhbmltYXRpb25TbGlkZSkgPCAwKSB7XG4gICAgICBsYXp5TG9hZGVkTGlzdC5wdXNoKGFuaW1hdGlvblNsaWRlKTtcbiAgICB9XG4gICAgc3RhdGUgPSB7XG4gICAgICBhbmltYXRpbmc6IHRydWUsXG4gICAgICBjdXJyZW50U2xpZGU6IGFuaW1hdGlvblNsaWRlLFxuICAgICAgbGF6eUxvYWRlZExpc3Q6IGxhenlMb2FkZWRMaXN0XG4gICAgfTtcbiAgICBuZXh0U3RhdGUgPSB7IGFuaW1hdGluZzogZmFsc2UgfTtcbiAgfSBlbHNlIHtcbiAgICBmaW5hbFNsaWRlID0gYW5pbWF0aW9uU2xpZGU7XG4gICAgaWYgKGFuaW1hdGlvblNsaWRlIDwgMCkge1xuICAgICAgZmluYWxTbGlkZSA9IGFuaW1hdGlvblNsaWRlICsgc2xpZGVDb3VudDtcbiAgICAgIGlmICghaW5maW5pdGUpIGZpbmFsU2xpZGUgPSAwO2Vsc2UgaWYgKHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbCAhPT0gMCkgZmluYWxTbGlkZSA9IHNsaWRlQ291bnQgLSBzbGlkZUNvdW50ICUgc2xpZGVzVG9TY3JvbGw7XG4gICAgfSBlbHNlIGlmICghY2FuR29OZXh0KHNwZWMpICYmIGFuaW1hdGlvblNsaWRlID4gY3VycmVudFNsaWRlKSB7XG4gICAgICBhbmltYXRpb25TbGlkZSA9IGZpbmFsU2xpZGUgPSBjdXJyZW50U2xpZGU7XG4gICAgfSBlbHNlIGlmIChjZW50ZXJNb2RlICYmIGFuaW1hdGlvblNsaWRlID49IHNsaWRlQ291bnQpIHtcbiAgICAgIGFuaW1hdGlvblNsaWRlID0gaW5maW5pdGUgPyBzbGlkZUNvdW50IDogc2xpZGVDb3VudCAtIDE7XG4gICAgICBmaW5hbFNsaWRlID0gaW5maW5pdGUgPyAwIDogc2xpZGVDb3VudCAtIDE7XG4gICAgfSBlbHNlIGlmIChhbmltYXRpb25TbGlkZSA+PSBzbGlkZUNvdW50KSB7XG4gICAgICBmaW5hbFNsaWRlID0gYW5pbWF0aW9uU2xpZGUgLSBzbGlkZUNvdW50O1xuICAgICAgaWYgKCFpbmZpbml0ZSkgZmluYWxTbGlkZSA9IHNsaWRlQ291bnQgLSBzbGlkZXNUb1Nob3c7ZWxzZSBpZiAoc2xpZGVDb3VudCAlIHNsaWRlc1RvU2Nyb2xsICE9PSAwKSBmaW5hbFNsaWRlID0gMDtcbiAgICB9XG4gICAgYW5pbWF0aW9uTGVmdCA9IGdldFRyYWNrTGVmdChfZXh0ZW5kcyh7fSwgc3BlYywgeyBzbGlkZUluZGV4OiBhbmltYXRpb25TbGlkZSB9KSk7XG4gICAgZmluYWxMZWZ0ID0gZ2V0VHJhY2tMZWZ0KF9leHRlbmRzKHt9LCBzcGVjLCB7IHNsaWRlSW5kZXg6IGZpbmFsU2xpZGUgfSkpO1xuICAgIGlmICghaW5maW5pdGUpIHtcbiAgICAgIGlmIChhbmltYXRpb25MZWZ0ID09PSBmaW5hbExlZnQpIGFuaW1hdGlvblNsaWRlID0gZmluYWxTbGlkZTtcbiAgICAgIGFuaW1hdGlvbkxlZnQgPSBmaW5hbExlZnQ7XG4gICAgfVxuICAgIGxhenlMb2FkICYmIGxhenlMb2FkZWRMaXN0LmNvbmNhdChnZXRPbkRlbWFuZExhenlTbGlkZXMoX2V4dGVuZHMoe30sIHNwZWMsIHsgY3VycmVudFNsaWRlOiBhbmltYXRpb25TbGlkZSB9KSkpO1xuICAgIGlmICghdXNlQ1NTKSB7XG4gICAgICBzdGF0ZSA9IHtcbiAgICAgICAgY3VycmVudFNsaWRlOiBmaW5hbFNsaWRlLFxuICAgICAgICB0cmFja1N0eWxlOiBnZXRUcmFja0NTUyhfZXh0ZW5kcyh7fSwgc3BlYywgeyBsZWZ0OiBmaW5hbExlZnQgfSkpLFxuICAgICAgICBsYXp5TG9hZGVkTGlzdDogbGF6eUxvYWRlZExpc3RcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlID0ge1xuICAgICAgICBhbmltYXRpbmc6IHRydWUsXG4gICAgICAgIGN1cnJlbnRTbGlkZTogZmluYWxTbGlkZSxcbiAgICAgICAgdHJhY2tTdHlsZTogZ2V0VHJhY2tBbmltYXRlQ1NTKF9leHRlbmRzKHt9LCBzcGVjLCB7IGxlZnQ6IGFuaW1hdGlvbkxlZnQgfSkpLFxuICAgICAgICBsYXp5TG9hZGVkTGlzdDogbGF6eUxvYWRlZExpc3RcbiAgICAgIH07XG4gICAgICBuZXh0U3RhdGUgPSB7XG4gICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRTbGlkZTogZmluYWxTbGlkZSxcbiAgICAgICAgdHJhY2tTdHlsZTogZ2V0VHJhY2tDU1MoX2V4dGVuZHMoe30sIHNwZWMsIHsgbGVmdDogZmluYWxMZWZ0IH0pKSxcbiAgICAgICAgc3dpcGVMZWZ0OiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4geyBzdGF0ZTogc3RhdGUsIG5leHRTdGF0ZTogbmV4dFN0YXRlIH07XG59O1xuXG52YXIgY2hhbmdlU2xpZGUgPSBleHBvcnRzLmNoYW5nZVNsaWRlID0gZnVuY3Rpb24gY2hhbmdlU2xpZGUoc3BlYywgb3B0aW9ucykge1xuICB2YXIgaW5kZXhPZmZzZXQsIHByZXZpb3VzSW50LCBzbGlkZU9mZnNldCwgdW5ldmVuT2Zmc2V0LCB0YXJnZXRTbGlkZTtcbiAgdmFyIHNsaWRlc1RvU2Nyb2xsID0gc3BlYy5zbGlkZXNUb1Njcm9sbCxcbiAgICAgIHNsaWRlc1RvU2hvdyA9IHNwZWMuc2xpZGVzVG9TaG93LFxuICAgICAgc2xpZGVDb3VudCA9IHNwZWMuc2xpZGVDb3VudCxcbiAgICAgIGN1cnJlbnRTbGlkZSA9IHNwZWMuY3VycmVudFNsaWRlLFxuICAgICAgbGF6eUxvYWQgPSBzcGVjLmxhenlMb2FkLFxuICAgICAgaW5maW5pdGUgPSBzcGVjLmluZmluaXRlO1xuXG4gIHVuZXZlbk9mZnNldCA9IHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbCAhPT0gMDtcbiAgaW5kZXhPZmZzZXQgPSB1bmV2ZW5PZmZzZXQgPyAwIDogKHNsaWRlQ291bnQgLSBjdXJyZW50U2xpZGUpICUgc2xpZGVzVG9TY3JvbGw7XG5cbiAgaWYgKG9wdGlvbnMubWVzc2FnZSA9PT0gXCJwcmV2aW91c1wiKSB7XG4gICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IHNsaWRlc1RvU2Nyb2xsIDogc2xpZGVzVG9TaG93IC0gaW5kZXhPZmZzZXQ7XG4gICAgdGFyZ2V0U2xpZGUgPSBjdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldDtcbiAgICBpZiAobGF6eUxvYWQgJiYgIWluZmluaXRlKSB7XG4gICAgICBwcmV2aW91c0ludCA9IGN1cnJlbnRTbGlkZSAtIHNsaWRlT2Zmc2V0O1xuICAgICAgdGFyZ2V0U2xpZGUgPSBwcmV2aW91c0ludCA9PT0gLTEgPyBzbGlkZUNvdW50IC0gMSA6IHByZXZpb3VzSW50O1xuICAgIH1cbiAgfSBlbHNlIGlmIChvcHRpb25zLm1lc3NhZ2UgPT09IFwibmV4dFwiKSB7XG4gICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IHNsaWRlc1RvU2Nyb2xsIDogaW5kZXhPZmZzZXQ7XG4gICAgdGFyZ2V0U2xpZGUgPSBjdXJyZW50U2xpZGUgKyBzbGlkZU9mZnNldDtcbiAgICBpZiAobGF6eUxvYWQgJiYgIWluZmluaXRlKSB7XG4gICAgICB0YXJnZXRTbGlkZSA9IChjdXJyZW50U2xpZGUgKyBzbGlkZXNUb1Njcm9sbCkgJSBzbGlkZUNvdW50ICsgaW5kZXhPZmZzZXQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKG9wdGlvbnMubWVzc2FnZSA9PT0gXCJkb3RzXCIpIHtcbiAgICAvLyBDbGljayBvbiBkb3RzXG4gICAgdGFyZ2V0U2xpZGUgPSBvcHRpb25zLmluZGV4ICogb3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICBpZiAodGFyZ2V0U2xpZGUgPT09IG9wdGlvbnMuY3VycmVudFNsaWRlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5tZXNzYWdlID09PSBcImNoaWxkcmVuXCIpIHtcbiAgICAvLyBDbGljayBvbiB0aGUgc2xpZGVzXG4gICAgdGFyZ2V0U2xpZGUgPSBvcHRpb25zLmluZGV4O1xuICAgIGlmICh0YXJnZXRTbGlkZSA9PT0gb3B0aW9ucy5jdXJyZW50U2xpZGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaW5maW5pdGUpIHtcbiAgICAgIHZhciBkaXJlY3Rpb24gPSBzaWJsaW5nRGlyZWN0aW9uKF9leHRlbmRzKHt9LCBzcGVjLCB7IHRhcmdldFNsaWRlOiB0YXJnZXRTbGlkZSB9KSk7XG4gICAgICBpZiAodGFyZ2V0U2xpZGUgPiBvcHRpb25zLmN1cnJlbnRTbGlkZSAmJiBkaXJlY3Rpb24gPT09IFwibGVmdFwiKSB7XG4gICAgICAgIHRhcmdldFNsaWRlID0gdGFyZ2V0U2xpZGUgLSBzbGlkZUNvdW50O1xuICAgICAgfSBlbHNlIGlmICh0YXJnZXRTbGlkZSA8IG9wdGlvbnMuY3VycmVudFNsaWRlICYmIGRpcmVjdGlvbiA9PT0gXCJyaWdodFwiKSB7XG4gICAgICAgIHRhcmdldFNsaWRlID0gdGFyZ2V0U2xpZGUgKyBzbGlkZUNvdW50O1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChvcHRpb25zLm1lc3NhZ2UgPT09IFwiaW5kZXhcIikge1xuICAgIHRhcmdldFNsaWRlID0gTnVtYmVyKG9wdGlvbnMuaW5kZXgpO1xuICAgIGlmICh0YXJnZXRTbGlkZSA9PT0gb3B0aW9ucy5jdXJyZW50U2xpZGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0U2xpZGU7XG59O1xudmFyIGtleUhhbmRsZXIgPSBleHBvcnRzLmtleUhhbmRsZXIgPSBmdW5jdGlvbiBrZXlIYW5kbGVyKGUsIGFjY2Vzc2liaWxpdHksIHJ0bCkge1xuICBpZiAoZS50YXJnZXQudGFnTmFtZS5tYXRjaChcIlRFWFRBUkVBfElOUFVUfFNFTEVDVFwiKSB8fCAhYWNjZXNzaWJpbGl0eSkgcmV0dXJuIFwiXCI7XG4gIGlmIChlLmtleUNvZGUgPT09IDM3KSByZXR1cm4gcnRsID8gXCJuZXh0XCIgOiBcInByZXZpb3VzXCI7XG4gIGlmIChlLmtleUNvZGUgPT09IDM5KSByZXR1cm4gcnRsID8gXCJwcmV2aW91c1wiIDogXCJuZXh0XCI7XG4gIHJldHVybiBcIlwiO1xufTtcblxudmFyIHN3aXBlU3RhcnQgPSBleHBvcnRzLnN3aXBlU3RhcnQgPSBmdW5jdGlvbiBzd2lwZVN0YXJ0KGUsIHN3aXBlLCBkcmFnZ2FibGUpIHtcbiAgZS50YXJnZXQudGFnTmFtZSA9PT0gXCJJTUdcIiAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGlmICghc3dpcGUgfHwgIWRyYWdnYWJsZSAmJiBlLnR5cGUuaW5kZXhPZihcIm1vdXNlXCIpICE9PSAtMSkgcmV0dXJuIFwiXCI7XG4gIHJldHVybiB7XG4gICAgZHJhZ2dpbmc6IHRydWUsXG4gICAgdG91Y2hPYmplY3Q6IHtcbiAgICAgIHN0YXJ0WDogZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5jbGllbnRYLFxuICAgICAgc3RhcnRZOiBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0ucGFnZVkgOiBlLmNsaWVudFksXG4gICAgICBjdXJYOiBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0ucGFnZVggOiBlLmNsaWVudFgsXG4gICAgICBjdXJZOiBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0ucGFnZVkgOiBlLmNsaWVudFlcbiAgICB9XG4gIH07XG59O1xudmFyIHN3aXBlTW92ZSA9IGV4cG9ydHMuc3dpcGVNb3ZlID0gZnVuY3Rpb24gc3dpcGVNb3ZlKGUsIHNwZWMpIHtcbiAgLy8gc3BlYyBhbHNvIGNvbnRhaW5zLCB0cmFja1JlZiBhbmQgc2xpZGVJbmRleFxuICB2YXIgc2Nyb2xsaW5nID0gc3BlYy5zY3JvbGxpbmcsXG4gICAgICBhbmltYXRpbmcgPSBzcGVjLmFuaW1hdGluZyxcbiAgICAgIHZlcnRpY2FsID0gc3BlYy52ZXJ0aWNhbCxcbiAgICAgIHN3aXBlVG9TbGlkZSA9IHNwZWMuc3dpcGVUb1NsaWRlLFxuICAgICAgdmVydGljYWxTd2lwaW5nID0gc3BlYy52ZXJ0aWNhbFN3aXBpbmcsXG4gICAgICBydGwgPSBzcGVjLnJ0bCxcbiAgICAgIGN1cnJlbnRTbGlkZSA9IHNwZWMuY3VycmVudFNsaWRlLFxuICAgICAgZWRnZUZyaWN0aW9uID0gc3BlYy5lZGdlRnJpY3Rpb24sXG4gICAgICBlZGdlRHJhZ2dlZCA9IHNwZWMuZWRnZURyYWdnZWQsXG4gICAgICBvbkVkZ2UgPSBzcGVjLm9uRWRnZSxcbiAgICAgIHN3aXBlZCA9IHNwZWMuc3dpcGVkLFxuICAgICAgc3dpcGluZyA9IHNwZWMuc3dpcGluZyxcbiAgICAgIHNsaWRlQ291bnQgPSBzcGVjLnNsaWRlQ291bnQsXG4gICAgICBzbGlkZXNUb1Njcm9sbCA9IHNwZWMuc2xpZGVzVG9TY3JvbGwsXG4gICAgICBpbmZpbml0ZSA9IHNwZWMuaW5maW5pdGUsXG4gICAgICB0b3VjaE9iamVjdCA9IHNwZWMudG91Y2hPYmplY3QsXG4gICAgICBzd2lwZUV2ZW50ID0gc3BlYy5zd2lwZUV2ZW50LFxuICAgICAgbGlzdEhlaWdodCA9IHNwZWMubGlzdEhlaWdodCxcbiAgICAgIGxpc3RXaWR0aCA9IHNwZWMubGlzdFdpZHRoO1xuXG4gIGlmIChzY3JvbGxpbmcpIHJldHVybjtcbiAgaWYgKGFuaW1hdGluZykgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgaWYgKHZlcnRpY2FsICYmIHN3aXBlVG9TbGlkZSAmJiB2ZXJ0aWNhbFN3aXBpbmcpIGUucHJldmVudERlZmF1bHQoKTtcbiAgdmFyIHN3aXBlTGVmdCA9IHZvaWQgMCxcbiAgICAgIHN0YXRlID0ge307XG4gIHZhciBjdXJMZWZ0ID0gZ2V0VHJhY2tMZWZ0KHNwZWMpO1xuICB0b3VjaE9iamVjdC5jdXJYID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5jbGllbnRYO1xuICB0b3VjaE9iamVjdC5jdXJZID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLnBhZ2VZIDogZS5jbGllbnRZO1xuICB0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KHRvdWNoT2JqZWN0LmN1clggLSB0b3VjaE9iamVjdC5zdGFydFgsIDIpKSk7XG4gIHZhciB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3codG91Y2hPYmplY3QuY3VyWSAtIHRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcbiAgaWYgKCF2ZXJ0aWNhbFN3aXBpbmcgJiYgIXN3aXBpbmcgJiYgdmVydGljYWxTd2lwZUxlbmd0aCA+IDEwKSB7XG4gICAgcmV0dXJuIHsgc2Nyb2xsaW5nOiB0cnVlIH07XG4gIH1cbiAgaWYgKHZlcnRpY2FsU3dpcGluZykgdG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSB2ZXJ0aWNhbFN3aXBlTGVuZ3RoO1xuICB2YXIgcG9zaXRpb25PZmZzZXQgPSAoIXJ0bCA/IDEgOiAtMSkgKiAodG91Y2hPYmplY3QuY3VyWCA+IHRvdWNoT2JqZWN0LnN0YXJ0WCA/IDEgOiAtMSk7XG4gIGlmICh2ZXJ0aWNhbFN3aXBpbmcpIHBvc2l0aW9uT2Zmc2V0ID0gdG91Y2hPYmplY3QuY3VyWSA+IHRvdWNoT2JqZWN0LnN0YXJ0WSA/IDEgOiAtMTtcblxuICB2YXIgZG90Q291bnQgPSBNYXRoLmNlaWwoc2xpZGVDb3VudCAvIHNsaWRlc1RvU2Nyb2xsKTtcbiAgdmFyIHN3aXBlRGlyZWN0aW9uID0gZ2V0U3dpcGVEaXJlY3Rpb24oc3BlYy50b3VjaE9iamVjdCwgdmVydGljYWxTd2lwaW5nKTtcbiAgdmFyIHRvdWNoU3dpcGVMZW5ndGggPSB0b3VjaE9iamVjdC5zd2lwZUxlbmd0aDtcbiAgaWYgKCFpbmZpbml0ZSkge1xuICAgIGlmIChjdXJyZW50U2xpZGUgPT09IDAgJiYgc3dpcGVEaXJlY3Rpb24gPT09IFwicmlnaHRcIiB8fCBjdXJyZW50U2xpZGUgKyAxID49IGRvdENvdW50ICYmIHN3aXBlRGlyZWN0aW9uID09PSBcImxlZnRcIiB8fCAhY2FuR29OZXh0KHNwZWMpICYmIHN3aXBlRGlyZWN0aW9uID09PSBcImxlZnRcIikge1xuICAgICAgdG91Y2hTd2lwZUxlbmd0aCA9IHRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoICogZWRnZUZyaWN0aW9uO1xuICAgICAgaWYgKGVkZ2VEcmFnZ2VkID09PSBmYWxzZSAmJiBvbkVkZ2UpIHtcbiAgICAgICAgb25FZGdlKHN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgc3RhdGVbXCJlZGdlRHJhZ2dlZFwiXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghc3dpcGVkICYmIHN3aXBlRXZlbnQpIHtcbiAgICBzd2lwZUV2ZW50KHN3aXBlRGlyZWN0aW9uKTtcbiAgICBzdGF0ZVtcInN3aXBlZFwiXSA9IHRydWU7XG4gIH1cbiAgaWYgKCF2ZXJ0aWNhbCkge1xuICAgIGlmICghcnRsKSB7XG4gICAgICBzd2lwZUxlZnQgPSBjdXJMZWZ0ICsgdG91Y2hTd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZUxlZnQgPSBjdXJMZWZ0IC0gdG91Y2hTd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZUxlZnQgPSBjdXJMZWZ0ICsgdG91Y2hTd2lwZUxlbmd0aCAqIChsaXN0SGVpZ2h0IC8gbGlzdFdpZHRoKSAqIHBvc2l0aW9uT2Zmc2V0O1xuICB9XG4gIGlmICh2ZXJ0aWNhbFN3aXBpbmcpIHtcbiAgICBzd2lwZUxlZnQgPSBjdXJMZWZ0ICsgdG91Y2hTd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICB9XG4gIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgdG91Y2hPYmplY3Q6IHRvdWNoT2JqZWN0LFxuICAgIHN3aXBlTGVmdDogc3dpcGVMZWZ0LFxuICAgIHRyYWNrU3R5bGU6IGdldFRyYWNrQ1NTKF9leHRlbmRzKHt9LCBzcGVjLCB7IGxlZnQ6IHN3aXBlTGVmdCB9KSlcbiAgfSk7XG4gIGlmIChNYXRoLmFicyh0b3VjaE9iamVjdC5jdXJYIC0gdG91Y2hPYmplY3Quc3RhcnRYKSA8IE1hdGguYWJzKHRvdWNoT2JqZWN0LmN1clkgLSB0b3VjaE9iamVjdC5zdGFydFkpICogMC44KSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG4gIGlmICh0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDEwKSB7XG4gICAgc3RhdGVbXCJzd2lwaW5nXCJdID0gdHJ1ZTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbnZhciBzd2lwZUVuZCA9IGV4cG9ydHMuc3dpcGVFbmQgPSBmdW5jdGlvbiBzd2lwZUVuZChlLCBzcGVjKSB7XG4gIHZhciBkcmFnZ2luZyA9IHNwZWMuZHJhZ2dpbmcsXG4gICAgICBzd2lwZSA9IHNwZWMuc3dpcGUsXG4gICAgICB0b3VjaE9iamVjdCA9IHNwZWMudG91Y2hPYmplY3QsXG4gICAgICBsaXN0V2lkdGggPSBzcGVjLmxpc3RXaWR0aCxcbiAgICAgIHRvdWNoVGhyZXNob2xkID0gc3BlYy50b3VjaFRocmVzaG9sZCxcbiAgICAgIHZlcnRpY2FsU3dpcGluZyA9IHNwZWMudmVydGljYWxTd2lwaW5nLFxuICAgICAgbGlzdEhlaWdodCA9IHNwZWMubGlzdEhlaWdodCxcbiAgICAgIGN1cnJlbnRTbGlkZSA9IHNwZWMuY3VycmVudFNsaWRlLFxuICAgICAgc3dpcGVUb1NsaWRlID0gc3BlYy5zd2lwZVRvU2xpZGUsXG4gICAgICBzY3JvbGxpbmcgPSBzcGVjLnNjcm9sbGluZyxcbiAgICAgIG9uU3dpcGUgPSBzcGVjLm9uU3dpcGU7XG5cbiAgaWYgKCFkcmFnZ2luZykge1xuICAgIGlmIChzd2lwZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybiB7fTtcbiAgfVxuICB2YXIgbWluU3dpcGUgPSB2ZXJ0aWNhbFN3aXBpbmcgPyBsaXN0SGVpZ2h0IC8gdG91Y2hUaHJlc2hvbGQgOiBsaXN0V2lkdGggLyB0b3VjaFRocmVzaG9sZDtcbiAgdmFyIHN3aXBlRGlyZWN0aW9uID0gZ2V0U3dpcGVEaXJlY3Rpb24odG91Y2hPYmplY3QsIHZlcnRpY2FsU3dpcGluZyk7XG4gIC8vIHJlc2V0IHRoZSBzdGF0ZSBvZiB0b3VjaCByZWxhdGVkIHN0YXRlIHZhcmlhYmxlcy5cbiAgdmFyIHN0YXRlID0ge1xuICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICBlZGdlRHJhZ2dlZDogZmFsc2UsXG4gICAgc2Nyb2xsaW5nOiBmYWxzZSxcbiAgICBzd2lwaW5nOiBmYWxzZSxcbiAgICBzd2lwZWQ6IGZhbHNlLFxuICAgIHN3aXBlTGVmdDogbnVsbCxcbiAgICB0b3VjaE9iamVjdDoge31cbiAgfTtcbiAgaWYgKHNjcm9sbGluZykge1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuICBpZiAoIXRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG4gIGlmICh0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IG1pblN3aXBlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChvblN3aXBlKSB7XG4gICAgICBvblN3aXBlKHN3aXBlRGlyZWN0aW9uKTtcbiAgICB9XG4gICAgdmFyIHNsaWRlQ291bnQgPSB2b2lkIDAsXG4gICAgICAgIG5ld1NsaWRlID0gdm9pZCAwO1xuICAgIHN3aXRjaCAoc3dpcGVEaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICBjYXNlIFwidXBcIjpcbiAgICAgICAgbmV3U2xpZGUgPSBjdXJyZW50U2xpZGUgKyBnZXRTbGlkZUNvdW50KHNwZWMpO1xuICAgICAgICBzbGlkZUNvdW50ID0gc3dpcGVUb1NsaWRlID8gY2hlY2tOYXZpZ2FibGUoc3BlYywgbmV3U2xpZGUpIDogbmV3U2xpZGU7XG4gICAgICAgIHN0YXRlW1wiY3VycmVudERpcmVjdGlvblwiXSA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICBjYXNlIFwiZG93blwiOlxuICAgICAgICBuZXdTbGlkZSA9IGN1cnJlbnRTbGlkZSAtIGdldFNsaWRlQ291bnQoc3BlYyk7XG4gICAgICAgIHNsaWRlQ291bnQgPSBzd2lwZVRvU2xpZGUgPyBjaGVja05hdmlnYWJsZShzcGVjLCBuZXdTbGlkZSkgOiBuZXdTbGlkZTtcbiAgICAgICAgc3RhdGVbXCJjdXJyZW50RGlyZWN0aW9uXCJdID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzbGlkZUNvdW50ID0gY3VycmVudFNsaWRlO1xuICAgIH1cbiAgICBzdGF0ZVtcInRyaWdnZXJTbGlkZUhhbmRsZXJcIl0gPSBzbGlkZUNvdW50O1xuICB9IGVsc2Uge1xuICAgIC8vIEFkanVzdCB0aGUgdHJhY2sgYmFjayB0byBpdCdzIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgIHZhciBjdXJyZW50TGVmdCA9IGdldFRyYWNrTGVmdChzcGVjKTtcbiAgICBzdGF0ZVtcInRyYWNrU3R5bGVcIl0gPSBnZXRUcmFja0FuaW1hdGVDU1MoX2V4dGVuZHMoe30sIHNwZWMsIHsgbGVmdDogY3VycmVudExlZnQgfSkpO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG52YXIgZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGV4cG9ydHMuZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGZ1bmN0aW9uIGdldE5hdmlnYWJsZUluZGV4ZXMoc3BlYykge1xuICB2YXIgbWF4ID0gc3BlYy5pbmZpbml0ZSA/IHNwZWMuc2xpZGVDb3VudCAqIDIgOiBzcGVjLnNsaWRlQ291bnQ7XG4gIHZhciBicmVha3BvaW50ID0gc3BlYy5pbmZpbml0ZSA/IHNwZWMuc2xpZGVzVG9TaG93ICogLTEgOiAwO1xuICB2YXIgY291bnRlciA9IHNwZWMuaW5maW5pdGUgPyBzcGVjLnNsaWRlc1RvU2hvdyAqIC0xIDogMDtcbiAgdmFyIGluZGV4ZXMgPSBbXTtcbiAgd2hpbGUgKGJyZWFrcG9pbnQgPCBtYXgpIHtcbiAgICBpbmRleGVzLnB1c2goYnJlYWtwb2ludCk7XG4gICAgYnJlYWtwb2ludCA9IGNvdW50ZXIgKyBzcGVjLnNsaWRlc1RvU2Nyb2xsO1xuICAgIGNvdW50ZXIgKz0gTWF0aC5taW4oc3BlYy5zbGlkZXNUb1Njcm9sbCwgc3BlYy5zbGlkZXNUb1Nob3cpO1xuICB9XG4gIHJldHVybiBpbmRleGVzO1xufTtcbnZhciBjaGVja05hdmlnYWJsZSA9IGV4cG9ydHMuY2hlY2tOYXZpZ2FibGUgPSBmdW5jdGlvbiBjaGVja05hdmlnYWJsZShzcGVjLCBpbmRleCkge1xuICB2YXIgbmF2aWdhYmxlcyA9IGdldE5hdmlnYWJsZUluZGV4ZXMoc3BlYyk7XG4gIHZhciBwcmV2TmF2aWdhYmxlID0gMDtcbiAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgbiBpbiBuYXZpZ2FibGVzKSB7XG4gICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwcmV2TmF2aWdhYmxlID0gbmF2aWdhYmxlc1tuXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufTtcbnZhciBnZXRTbGlkZUNvdW50ID0gZXhwb3J0cy5nZXRTbGlkZUNvdW50ID0gZnVuY3Rpb24gZ2V0U2xpZGVDb3VudChzcGVjKSB7XG4gIHZhciBjZW50ZXJPZmZzZXQgPSBzcGVjLmNlbnRlck1vZGUgPyBzcGVjLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKHNwZWMuc2xpZGVzVG9TaG93IC8gMikgOiAwO1xuICBpZiAoc3BlYy5zd2lwZVRvU2xpZGUpIHtcbiAgICB2YXIgc3dpcGVkU2xpZGUgPSB2b2lkIDA7XG4gICAgdmFyIHNsaWNrTGlzdCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShzcGVjLmxpc3RSZWYpO1xuICAgIHZhciBzbGlkZXMgPSBzbGlja0xpc3QucXVlcnlTZWxlY3RvckFsbChcIi5zbGljay1zbGlkZVwiKTtcbiAgICBBcnJheS5mcm9tKHNsaWRlcykuZXZlcnkoZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICBpZiAoIXNwZWMudmVydGljYWwpIHtcbiAgICAgICAgaWYgKHNsaWRlLm9mZnNldExlZnQgLSBjZW50ZXJPZmZzZXQgKyBnZXRXaWR0aChzbGlkZSkgLyAyID4gc3BlYy5zd2lwZUxlZnQgKiAtMSkge1xuICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2xpZGUub2Zmc2V0VG9wICsgZ2V0SGVpZ2h0KHNsaWRlKSAvIDIgPiBzcGVjLnN3aXBlTGVmdCAqIC0xKSB7XG4gICAgICAgICAgc3dpcGVkU2xpZGUgPSBzbGlkZTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG5cbiAgICBpZiAoIXN3aXBlZFNsaWRlKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIGN1cnJlbnRJbmRleCA9IHNwZWMucnRsID09PSB0cnVlID8gc3BlYy5zbGlkZUNvdW50IC0gc3BlYy5jdXJyZW50U2xpZGUgOiBzcGVjLmN1cnJlbnRTbGlkZTtcbiAgICB2YXIgc2xpZGVzVHJhdmVyc2VkID0gTWF0aC5hYnMoc3dpcGVkU2xpZGUuZGF0YXNldC5pbmRleCAtIGN1cnJlbnRJbmRleCkgfHwgMTtcbiAgICByZXR1cm4gc2xpZGVzVHJhdmVyc2VkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzcGVjLnNsaWRlc1RvU2Nyb2xsO1xuICB9XG59O1xuXG52YXIgY2hlY2tTcGVjS2V5cyA9IGV4cG9ydHMuY2hlY2tTcGVjS2V5cyA9IGZ1bmN0aW9uIGNoZWNrU3BlY0tleXMoc3BlYywga2V5c0FycmF5KSB7XG4gIHJldHVybiBrZXlzQXJyYXkucmVkdWNlKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHNwZWMuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgfSwgdHJ1ZSkgPyBudWxsIDogY29uc29sZS5lcnJvcihcIktleXMgTWlzc2luZzpcIiwgc3BlYyk7XG59O1xuXG52YXIgZ2V0VHJhY2tDU1MgPSBleHBvcnRzLmdldFRyYWNrQ1NTID0gZnVuY3Rpb24gZ2V0VHJhY2tDU1Moc3BlYykge1xuICBjaGVja1NwZWNLZXlzKHNwZWMsIFtcImxlZnRcIiwgXCJ2YXJpYWJsZVdpZHRoXCIsIFwic2xpZGVDb3VudFwiLCBcInNsaWRlc1RvU2hvd1wiLCBcInNsaWRlV2lkdGhcIl0pO1xuICB2YXIgdHJhY2tXaWR0aCA9IHZvaWQgMCxcbiAgICAgIHRyYWNrSGVpZ2h0ID0gdm9pZCAwO1xuICB2YXIgdHJhY2tDaGlsZHJlbiA9IHNwZWMuc2xpZGVDb3VudCArIDIgKiBzcGVjLnNsaWRlc1RvU2hvdztcbiAgaWYgKCFzcGVjLnZlcnRpY2FsKSB7XG4gICAgdHJhY2tXaWR0aCA9IGdldFRvdGFsU2xpZGVzKHNwZWMpICogc3BlYy5zbGlkZVdpZHRoO1xuICB9IGVsc2Uge1xuICAgIHRyYWNrSGVpZ2h0ID0gdHJhY2tDaGlsZHJlbiAqIHNwZWMuc2xpZGVIZWlnaHQ7XG4gIH1cbiAgdmFyIHN0eWxlID0ge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNpdGlvbjogXCJcIixcbiAgICBXZWJraXRUcmFuc2l0aW9uOiBcIlwiXG4gIH07XG4gIGlmIChzcGVjLnVzZVRyYW5zZm9ybSkge1xuICAgIHZhciBXZWJraXRUcmFuc2Zvcm0gPSAhc3BlYy52ZXJ0aWNhbCA/IFwidHJhbnNsYXRlM2QoXCIgKyBzcGVjLmxlZnQgKyBcInB4LCAwcHgsIDBweClcIiA6IFwidHJhbnNsYXRlM2QoMHB4LCBcIiArIHNwZWMubGVmdCArIFwicHgsIDBweClcIjtcbiAgICB2YXIgdHJhbnNmb3JtID0gIXNwZWMudmVydGljYWwgPyBcInRyYW5zbGF0ZTNkKFwiICsgc3BlYy5sZWZ0ICsgXCJweCwgMHB4LCAwcHgpXCIgOiBcInRyYW5zbGF0ZTNkKDBweCwgXCIgKyBzcGVjLmxlZnQgKyBcInB4LCAwcHgpXCI7XG4gICAgdmFyIG1zVHJhbnNmb3JtID0gIXNwZWMudmVydGljYWwgPyBcInRyYW5zbGF0ZVgoXCIgKyBzcGVjLmxlZnQgKyBcInB4KVwiIDogXCJ0cmFuc2xhdGVZKFwiICsgc3BlYy5sZWZ0ICsgXCJweClcIjtcbiAgICBzdHlsZSA9IF9leHRlbmRzKHt9LCBzdHlsZSwge1xuICAgICAgV2Via2l0VHJhbnNmb3JtOiBXZWJraXRUcmFuc2Zvcm0sXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIG1zVHJhbnNmb3JtOiBtc1RyYW5zZm9ybVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmIChzcGVjLnZlcnRpY2FsKSB7XG4gICAgICBzdHlsZVtcInRvcFwiXSA9IHNwZWMubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVbXCJsZWZ0XCJdID0gc3BlYy5sZWZ0O1xuICAgIH1cbiAgfVxuICBpZiAoc3BlYy5mYWRlKSBzdHlsZSA9IHsgb3BhY2l0eTogMSB9O1xuICBpZiAodHJhY2tXaWR0aCkgc3R5bGUud2lkdGggPSB0cmFja1dpZHRoO1xuICBpZiAodHJhY2tIZWlnaHQpIHN0eWxlLmhlaWdodCA9IHRyYWNrSGVpZ2h0O1xuXG4gIC8vIEZhbGxiYWNrIGZvciBJRThcbiAgaWYgKHdpbmRvdyAmJiAhd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJiYgd2luZG93LmF0dGFjaEV2ZW50KSB7XG4gICAgaWYgKCFzcGVjLnZlcnRpY2FsKSB7XG4gICAgICBzdHlsZS5tYXJnaW5MZWZ0ID0gc3BlYy5sZWZ0ICsgXCJweFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5tYXJnaW5Ub3AgPSBzcGVjLmxlZnQgKyBcInB4XCI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufTtcbnZhciBnZXRUcmFja0FuaW1hdGVDU1MgPSBleHBvcnRzLmdldFRyYWNrQW5pbWF0ZUNTUyA9IGZ1bmN0aW9uIGdldFRyYWNrQW5pbWF0ZUNTUyhzcGVjKSB7XG4gIGNoZWNrU3BlY0tleXMoc3BlYywgW1wibGVmdFwiLCBcInZhcmlhYmxlV2lkdGhcIiwgXCJzbGlkZUNvdW50XCIsIFwic2xpZGVzVG9TaG93XCIsIFwic2xpZGVXaWR0aFwiLCBcInNwZWVkXCIsIFwiY3NzRWFzZVwiXSk7XG4gIHZhciBzdHlsZSA9IGdldFRyYWNrQ1NTKHNwZWMpO1xuICAvLyB1c2VDU1MgaXMgdHJ1ZSBieSBkZWZhdWx0IHNvIGl0IGNhbiBiZSB1bmRlZmluZWRcbiAgaWYgKHNwZWMudXNlVHJhbnNmb3JtKSB7XG4gICAgc3R5bGUuV2Via2l0VHJhbnNpdGlvbiA9IFwiLXdlYmtpdC10cmFuc2Zvcm0gXCIgKyBzcGVjLnNwZWVkICsgXCJtcyBcIiArIHNwZWMuY3NzRWFzZTtcbiAgICBzdHlsZS50cmFuc2l0aW9uID0gXCJ0cmFuc2Zvcm0gXCIgKyBzcGVjLnNwZWVkICsgXCJtcyBcIiArIHNwZWMuY3NzRWFzZTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3BlYy52ZXJ0aWNhbCkge1xuICAgICAgc3R5bGUudHJhbnNpdGlvbiA9IFwidG9wIFwiICsgc3BlYy5zcGVlZCArIFwibXMgXCIgKyBzcGVjLmNzc0Vhc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLnRyYW5zaXRpb24gPSBcImxlZnQgXCIgKyBzcGVjLnNwZWVkICsgXCJtcyBcIiArIHNwZWMuY3NzRWFzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufTtcbnZhciBnZXRUcmFja0xlZnQgPSBleHBvcnRzLmdldFRyYWNrTGVmdCA9IGZ1bmN0aW9uIGdldFRyYWNrTGVmdChzcGVjKSB7XG4gIGlmIChzcGVjLnVuc2xpY2spIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGNoZWNrU3BlY0tleXMoc3BlYywgW1wic2xpZGVJbmRleFwiLCBcInRyYWNrUmVmXCIsIFwiaW5maW5pdGVcIiwgXCJjZW50ZXJNb2RlXCIsIFwic2xpZGVDb3VudFwiLCBcInNsaWRlc1RvU2hvd1wiLCBcInNsaWRlc1RvU2Nyb2xsXCIsIFwic2xpZGVXaWR0aFwiLCBcImxpc3RXaWR0aFwiLCBcInZhcmlhYmxlV2lkdGhcIiwgXCJzbGlkZUhlaWdodFwiXSk7XG5cbiAgdmFyIHNsaWRlSW5kZXggPSBzcGVjLnNsaWRlSW5kZXgsXG4gICAgICB0cmFja1JlZiA9IHNwZWMudHJhY2tSZWYsXG4gICAgICBpbmZpbml0ZSA9IHNwZWMuaW5maW5pdGUsXG4gICAgICBjZW50ZXJNb2RlID0gc3BlYy5jZW50ZXJNb2RlLFxuICAgICAgc2xpZGVDb3VudCA9IHNwZWMuc2xpZGVDb3VudCxcbiAgICAgIHNsaWRlc1RvU2hvdyA9IHNwZWMuc2xpZGVzVG9TaG93LFxuICAgICAgc2xpZGVzVG9TY3JvbGwgPSBzcGVjLnNsaWRlc1RvU2Nyb2xsLFxuICAgICAgc2xpZGVXaWR0aCA9IHNwZWMuc2xpZGVXaWR0aCxcbiAgICAgIGxpc3RXaWR0aCA9IHNwZWMubGlzdFdpZHRoLFxuICAgICAgdmFyaWFibGVXaWR0aCA9IHNwZWMudmFyaWFibGVXaWR0aCxcbiAgICAgIHNsaWRlSGVpZ2h0ID0gc3BlYy5zbGlkZUhlaWdodCxcbiAgICAgIGZhZGUgPSBzcGVjLmZhZGUsXG4gICAgICB2ZXJ0aWNhbCA9IHNwZWMudmVydGljYWw7XG5cblxuICB2YXIgc2xpZGVPZmZzZXQgPSAwO1xuICB2YXIgdGFyZ2V0TGVmdDtcbiAgdmFyIHRhcmdldFNsaWRlO1xuICB2YXIgdmVydGljYWxPZmZzZXQgPSAwO1xuXG4gIGlmIChmYWRlIHx8IHNwZWMuc2xpZGVDb3VudCA9PT0gMSkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIHNsaWRlc1RvT2Zmc2V0ID0gMDtcbiAgaWYgKGluZmluaXRlKSB7XG4gICAgc2xpZGVzVG9PZmZzZXQgPSAtZ2V0UHJlQ2xvbmVzKHNwZWMpOyAvLyBicmluZyBhY3RpdmUgc2xpZGUgdG8gdGhlIGJlZ2lubmluZyBvZiB2aXN1YWwgYXJlYVxuICAgIC8vIGlmIG5leHQgc2Nyb2xsIGRvZXNuJ3QgaGF2ZSBlbm91Z2ggY2hpbGRyZW4sIGp1c3QgcmVhY2ggdGlsbCB0aGUgZW5kIG9mIG9yaWdpbmFsIHNsaWRlcyBpbnN0ZWFkIG9mIHNoaWZ0aW5nIHNsaWRlc1RvU2Nyb2xsIGNoaWxkcmVuXG4gICAgaWYgKHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbCAhPT0gMCAmJiBzbGlkZUluZGV4ICsgc2xpZGVzVG9TY3JvbGwgPiBzbGlkZUNvdW50KSB7XG4gICAgICBzbGlkZXNUb09mZnNldCA9IC0oc2xpZGVJbmRleCA+IHNsaWRlQ291bnQgPyBzbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIHNsaWRlQ291bnQpIDogc2xpZGVDb3VudCAlIHNsaWRlc1RvU2Nyb2xsKTtcbiAgICB9XG4gICAgLy8gc2hpZnQgY3VycmVudCBzbGlkZSB0byBjZW50ZXIgb2YgdGhlIGZyYW1lXG4gICAgaWYgKGNlbnRlck1vZGUpIHtcbiAgICAgIHNsaWRlc1RvT2Zmc2V0ICs9IHBhcnNlSW50KHNsaWRlc1RvU2hvdyAvIDIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoc2xpZGVDb3VudCAlIHNsaWRlc1RvU2Nyb2xsICE9PSAwICYmIHNsaWRlSW5kZXggKyBzbGlkZXNUb1Njcm9sbCA+IHNsaWRlQ291bnQpIHtcbiAgICAgIHNsaWRlc1RvT2Zmc2V0ID0gc2xpZGVzVG9TaG93IC0gc2xpZGVDb3VudCAlIHNsaWRlc1RvU2Nyb2xsO1xuICAgIH1cbiAgICBpZiAoY2VudGVyTW9kZSkge1xuICAgICAgc2xpZGVzVG9PZmZzZXQgPSBwYXJzZUludChzbGlkZXNUb1Nob3cgLyAyKTtcbiAgICB9XG4gIH1cbiAgc2xpZGVPZmZzZXQgPSBzbGlkZXNUb09mZnNldCAqIHNsaWRlV2lkdGg7XG4gIHZlcnRpY2FsT2Zmc2V0ID0gc2xpZGVzVG9PZmZzZXQgKiBzbGlkZUhlaWdodDtcblxuICBpZiAoIXZlcnRpY2FsKSB7XG4gICAgdGFyZ2V0TGVmdCA9IHNsaWRlSW5kZXggKiBzbGlkZVdpZHRoICogLTEgKyBzbGlkZU9mZnNldDtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRMZWZ0ID0gc2xpZGVJbmRleCAqIHNsaWRlSGVpZ2h0ICogLTEgKyB2ZXJ0aWNhbE9mZnNldDtcbiAgfVxuXG4gIGlmICh2YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG4gICAgdmFyIHRhcmdldFNsaWRlSW5kZXg7XG4gICAgdmFyIHRyYWNrRWxlbSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0cmFja1JlZik7XG4gICAgdGFyZ2V0U2xpZGVJbmRleCA9IHNsaWRlSW5kZXggKyBnZXRQcmVDbG9uZXMoc3BlYyk7XG4gICAgdGFyZ2V0U2xpZGUgPSB0cmFja0VsZW0gJiYgdHJhY2tFbGVtLmNoaWxkTm9kZXNbdGFyZ2V0U2xpZGVJbmRleF07XG4gICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlID8gdGFyZ2V0U2xpZGUub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICBpZiAoY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IGluZmluaXRlID8gc2xpZGVJbmRleCArIGdldFByZUNsb25lcyhzcGVjKSA6IHNsaWRlSW5kZXg7XG4gICAgICB0YXJnZXRTbGlkZSA9IHRyYWNrRWxlbSAmJiB0cmFja0VsZW0uY2hpbGRyZW5bdGFyZ2V0U2xpZGVJbmRleF07XG4gICAgICB0YXJnZXRMZWZ0ID0gMDtcbiAgICAgIGZvciAodmFyIHNsaWRlID0gMDsgc2xpZGUgPCB0YXJnZXRTbGlkZUluZGV4OyBzbGlkZSsrKSB7XG4gICAgICAgIHRhcmdldExlZnQgLT0gdHJhY2tFbGVtICYmIHRyYWNrRWxlbS5jaGlsZHJlbltzbGlkZV0gJiYgdHJhY2tFbGVtLmNoaWxkcmVuW3NsaWRlXS5vZmZzZXRXaWR0aDtcbiAgICAgIH1cbiAgICAgIHRhcmdldExlZnQgLT0gcGFyc2VJbnQoc3BlYy5jZW50ZXJQYWRkaW5nKTtcbiAgICAgIHRhcmdldExlZnQgKz0gdGFyZ2V0U2xpZGUgJiYgKGxpc3RXaWR0aCAtIHRhcmdldFNsaWRlLm9mZnNldFdpZHRoKSAvIDI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldExlZnQ7XG59O1xuXG52YXIgZ2V0UHJlQ2xvbmVzID0gZXhwb3J0cy5nZXRQcmVDbG9uZXMgPSBmdW5jdGlvbiBnZXRQcmVDbG9uZXMoc3BlYykge1xuICBpZiAoc3BlYy51bnNsaWNrIHx8ICFzcGVjLmluZmluaXRlKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgaWYgKHNwZWMudmFyaWFibGVXaWR0aCkge1xuICAgIHJldHVybiBzcGVjLnNsaWRlQ291bnQ7XG4gIH1cbiAgcmV0dXJuIHNwZWMuc2xpZGVzVG9TaG93ICsgKHNwZWMuY2VudGVyTW9kZSA/IDEgOiAwKTtcbn07XG5cbnZhciBnZXRQb3N0Q2xvbmVzID0gZXhwb3J0cy5nZXRQb3N0Q2xvbmVzID0gZnVuY3Rpb24gZ2V0UG9zdENsb25lcyhzcGVjKSB7XG4gIGlmIChzcGVjLnVuc2xpY2sgfHwgIXNwZWMuaW5maW5pdGUpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3BlYy5zbGlkZUNvdW50O1xufTtcblxudmFyIGdldFRvdGFsU2xpZGVzID0gZXhwb3J0cy5nZXRUb3RhbFNsaWRlcyA9IGZ1bmN0aW9uIGdldFRvdGFsU2xpZGVzKHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMuc2xpZGVDb3VudCA9PT0gMSA/IDEgOiBnZXRQcmVDbG9uZXMoc3BlYykgKyBzcGVjLnNsaWRlQ291bnQgKyBnZXRQb3N0Q2xvbmVzKHNwZWMpO1xufTtcbnZhciBzaWJsaW5nRGlyZWN0aW9uID0gZXhwb3J0cy5zaWJsaW5nRGlyZWN0aW9uID0gZnVuY3Rpb24gc2libGluZ0RpcmVjdGlvbihzcGVjKSB7XG4gIGlmIChzcGVjLnRhcmdldFNsaWRlID4gc3BlYy5jdXJyZW50U2xpZGUpIHtcbiAgICBpZiAoc3BlYy50YXJnZXRTbGlkZSA+IHNwZWMuY3VycmVudFNsaWRlICsgc2xpZGVzT25SaWdodChzcGVjKSkge1xuICAgICAgcmV0dXJuIFwibGVmdFwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJyaWdodFwiO1xuICB9IGVsc2Uge1xuICAgIGlmIChzcGVjLnRhcmdldFNsaWRlIDwgc3BlYy5jdXJyZW50U2xpZGUgLSBzbGlkZXNPbkxlZnQoc3BlYykpIHtcbiAgICAgIHJldHVybiBcInJpZ2h0XCI7XG4gICAgfVxuICAgIHJldHVybiBcImxlZnRcIjtcbiAgfVxufTtcblxudmFyIHNsaWRlc09uUmlnaHQgPSBleHBvcnRzLnNsaWRlc09uUmlnaHQgPSBmdW5jdGlvbiBzbGlkZXNPblJpZ2h0KF9yZWYpIHtcbiAgdmFyIHNsaWRlc1RvU2hvdyA9IF9yZWYuc2xpZGVzVG9TaG93LFxuICAgICAgY2VudGVyTW9kZSA9IF9yZWYuY2VudGVyTW9kZSxcbiAgICAgIHJ0bCA9IF9yZWYucnRsLFxuICAgICAgY2VudGVyUGFkZGluZyA9IF9yZWYuY2VudGVyUGFkZGluZztcblxuICAvLyByZXR1cm5zIG5vIG9mIHNsaWRlcyBvbiB0aGUgcmlnaHQgb2YgYWN0aXZlIHNsaWRlXG4gIGlmIChjZW50ZXJNb2RlKSB7XG4gICAgdmFyIHJpZ2h0ID0gKHNsaWRlc1RvU2hvdyAtIDEpIC8gMiArIDE7XG4gICAgaWYgKHBhcnNlSW50KGNlbnRlclBhZGRpbmcpID4gMCkgcmlnaHQgKz0gMTtcbiAgICBpZiAocnRsICYmIHNsaWRlc1RvU2hvdyAlIDIgPT09IDApIHJpZ2h0ICs9IDE7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9XG4gIGlmIChydGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc2xpZGVzVG9TaG93IC0gMTtcbn07XG5cbnZhciBzbGlkZXNPbkxlZnQgPSBleHBvcnRzLnNsaWRlc09uTGVmdCA9IGZ1bmN0aW9uIHNsaWRlc09uTGVmdChfcmVmMikge1xuICB2YXIgc2xpZGVzVG9TaG93ID0gX3JlZjIuc2xpZGVzVG9TaG93LFxuICAgICAgY2VudGVyTW9kZSA9IF9yZWYyLmNlbnRlck1vZGUsXG4gICAgICBydGwgPSBfcmVmMi5ydGwsXG4gICAgICBjZW50ZXJQYWRkaW5nID0gX3JlZjIuY2VudGVyUGFkZGluZztcblxuICAvLyByZXR1cm5zIG5vIG9mIHNsaWRlcyBvbiB0aGUgbGVmdCBvZiBhY3RpdmUgc2xpZGVcbiAgaWYgKGNlbnRlck1vZGUpIHtcbiAgICB2YXIgbGVmdCA9IChzbGlkZXNUb1Nob3cgLSAxKSAvIDIgKyAxO1xuICAgIGlmIChwYXJzZUludChjZW50ZXJQYWRkaW5nKSA+IDApIGxlZnQgKz0gMTtcbiAgICBpZiAoIXJ0bCAmJiBzbGlkZXNUb1Nob3cgJSAyID09PSAwKSBsZWZ0ICs9IDE7XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH1cbiAgaWYgKHJ0bCkge1xuICAgIHJldHVybiBzbGlkZXNUb1Nob3cgLSAxO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxudmFyIGNhblVzZURPTSA9IGV4cG9ydHMuY2FuVXNlRE9NID0gZnVuY3Rpb24gY2FuVXNlRE9NKCkge1xuICByZXR1cm4gISEodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xufTsiLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgIGFGdW5jdGlvbih0aGlzKTtcbiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gICAgQSA9IFtdO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGNiID0gY3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5JykgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcbiAgdmFyIGZucyA9IGV4ZWMoZGVmaW5lZCwgU1lNQk9MLCAnJ1tLRVldKTtcbiAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICB2YXIgcnhmbiA9IGZuc1sxXTtcbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSkpIHtcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE4IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvKiFcbiAqIEZvbnQgQXdlc29tZSBGcmVlIDUuMC4xMyBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbVxuICogTGljZW5zZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2xpY2Vuc2UgKEljb25zOiBDQyBCWSA0LjAsIEZvbnRzOiBTSUwgT0ZMIDEuMSwgQ29kZTogTUlUIExpY2Vuc2UpXG4gKi9cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG52YXIgX1dJTkRPVyA9IHt9O1xudmFyIF9ET0NVTUVOVCA9IHt9O1xudmFyIF9NVVRBVElPTl9PQlNFUlZFUiQxID0gbnVsbDtcbnZhciBfUEVSRk9STUFOQ0UgPSB7IG1hcms6IG5vb3AsIG1lYXN1cmU6IG5vb3AgfTtcblxudHJ5IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSBfV0lORE9XID0gd2luZG93O1xuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykgX0RPQ1VNRU5UID0gZG9jdW1lbnQ7XG4gIGlmICh0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIF9NVVRBVElPTl9PQlNFUlZFUiQxID0gTXV0YXRpb25PYnNlcnZlcjtcbiAgaWYgKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gJ3VuZGVmaW5lZCcpIF9QRVJGT1JNQU5DRSA9IHBlcmZvcm1hbmNlO1xufSBjYXRjaCAoZSkge31cblxudmFyIF9yZWYgPSBfV0lORE9XLm5hdmlnYXRvciB8fCB7fTtcbnZhciBfcmVmJHVzZXJBZ2VudCA9IF9yZWYudXNlckFnZW50O1xudmFyIHVzZXJBZ2VudCA9IF9yZWYkdXNlckFnZW50ID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYkdXNlckFnZW50O1xuXG52YXIgV0lORE9XID0gX1dJTkRPVztcbnZhciBET0NVTUVOVCA9IF9ET0NVTUVOVDtcbnZhciBNVVRBVElPTl9PQlNFUlZFUiA9IF9NVVRBVElPTl9PQlNFUlZFUiQxO1xudmFyIFBFUkZPUk1BTkNFID0gX1BFUkZPUk1BTkNFO1xudmFyIElTX0JST1dTRVIgPSAhIVdJTkRPVy5kb2N1bWVudDtcbnZhciBJU19ET00gPSAhIURPQ1VNRU5ULmRvY3VtZW50RWxlbWVudCAmJiAhIURPQ1VNRU5ULmhlYWQgJiYgdHlwZW9mIERPQ1VNRU5ULmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnQgPT09ICdmdW5jdGlvbic7XG52YXIgSVNfSUUgPSB+dXNlckFnZW50LmluZGV4T2YoJ01TSUUnKSB8fCB+dXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQvJyk7XG5cbnZhciBOQU1FU1BBQ0VfSURFTlRJRklFUiA9ICdfX19GT05UX0FXRVNPTUVfX18nO1xudmFyIFVOSVRTX0lOX0dSSUQgPSAxNjtcbnZhciBERUZBVUxUX0ZBTUlMWV9QUkVGSVggPSAnZmEnO1xudmFyIERFRkFVTFRfUkVQTEFDRU1FTlRfQ0xBU1MgPSAnc3ZnLWlubGluZS0tZmEnO1xudmFyIERBVEFfRkFfSTJTVkcgPSAnZGF0YS1mYS1pMnN2Zyc7XG52YXIgREFUQV9GQV9QU0VVRE9fRUxFTUVOVCA9ICdkYXRhLWZhLXBzZXVkby1lbGVtZW50JztcbnZhciBIVE1MX0NMQVNTX0kyU1ZHX0JBU0VfQ0xBU1MgPSAnZm9udGF3ZXNvbWUtaTJzdmcnO1xuXG52YXIgUFJPRFVDVElPTiA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSgpO1xuXG52YXIgb25lVG9UZW4gPSBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xudmFyIG9uZVRvVHdlbnR5ID0gb25lVG9UZW4uY29uY2F0KFsxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMF0pO1xuXG52YXIgQVRUUklCVVRFU19XQVRDSEVEX0ZPUl9NVVRBVElPTiA9IFsnY2xhc3MnLCAnZGF0YS1wcmVmaXgnLCAnZGF0YS1pY29uJywgJ2RhdGEtZmEtdHJhbnNmb3JtJywgJ2RhdGEtZmEtbWFzayddO1xuXG52YXIgUkVTRVJWRURfQ0xBU1NFUyA9IFsneHMnLCAnc20nLCAnbGcnLCAnZncnLCAndWwnLCAnbGknLCAnYm9yZGVyJywgJ3B1bGwtbGVmdCcsICdwdWxsLXJpZ2h0JywgJ3NwaW4nLCAncHVsc2UnLCAncm90YXRlLTkwJywgJ3JvdGF0ZS0xODAnLCAncm90YXRlLTI3MCcsICdmbGlwLWhvcml6b250YWwnLCAnZmxpcC12ZXJ0aWNhbCcsICdzdGFjaycsICdzdGFjay0xeCcsICdzdGFjay0yeCcsICdpbnZlcnNlJywgJ2xheWVycycsICdsYXllcnMtdGV4dCcsICdsYXllcnMtY291bnRlciddLmNvbmNhdChvbmVUb1Rlbi5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAneCc7XG59KSkuY29uY2F0KG9uZVRvVHdlbnR5Lm1hcChmdW5jdGlvbiAobikge1xuICByZXR1cm4gJ3ctJyArIG47XG59KSk7XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuXG5cbnZhciB0b0NvbnN1bWFibGVBcnJheSA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShhcnIpO1xuICB9XG59O1xuXG52YXIgaW5pdGlhbCA9IFdJTkRPVy5Gb250QXdlc29tZUNvbmZpZyB8fCB7fTtcbnZhciBpbml0aWFsS2V5cyA9IE9iamVjdC5rZXlzKGluaXRpYWwpO1xuXG52YXIgX2RlZmF1bHQgPSBfZXh0ZW5kcyh7XG4gIGZhbWlseVByZWZpeDogREVGQVVMVF9GQU1JTFlfUFJFRklYLFxuICByZXBsYWNlbWVudENsYXNzOiBERUZBVUxUX1JFUExBQ0VNRU5UX0NMQVNTLFxuICBhdXRvUmVwbGFjZVN2ZzogdHJ1ZSxcbiAgYXV0b0FkZENzczogdHJ1ZSxcbiAgYXV0b0ExMXk6IHRydWUsXG4gIHNlYXJjaFBzZXVkb0VsZW1lbnRzOiBmYWxzZSxcbiAgb2JzZXJ2ZU11dGF0aW9uczogdHJ1ZSxcbiAga2VlcE9yaWdpbmFsU291cmNlOiB0cnVlLFxuICBtZWFzdXJlUGVyZm9ybWFuY2U6IGZhbHNlLFxuICBzaG93TWlzc2luZ0ljb25zOiB0cnVlXG59LCBpbml0aWFsKTtcblxuaWYgKCFfZGVmYXVsdC5hdXRvUmVwbGFjZVN2ZykgX2RlZmF1bHQub2JzZXJ2ZU11dGF0aW9ucyA9IGZhbHNlO1xuXG52YXIgY29uZmlnJDEgPSBfZXh0ZW5kcyh7fSwgX2RlZmF1bHQpO1xuXG5XSU5ET1cuRm9udEF3ZXNvbWVDb25maWcgPSBjb25maWckMTtcblxuZnVuY3Rpb24gdXBkYXRlKG5ld0NvbmZpZykge1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIF9wYXJhbXMkYXNOZXdEZWZhdWx0ID0gcGFyYW1zLmFzTmV3RGVmYXVsdCxcbiAgICAgIGFzTmV3RGVmYXVsdCA9IF9wYXJhbXMkYXNOZXdEZWZhdWx0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wYXJhbXMkYXNOZXdEZWZhdWx0O1xuXG4gIHZhciB2YWxpZEtleXMgPSBPYmplY3Qua2V5cyhjb25maWckMSk7XG4gIHZhciBvayA9IGFzTmV3RGVmYXVsdCA/IGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIH52YWxpZEtleXMuaW5kZXhPZihrKSAmJiAhfmluaXRpYWxLZXlzLmluZGV4T2Yoayk7XG4gIH0gOiBmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiB+dmFsaWRLZXlzLmluZGV4T2Yoayk7XG4gIH07XG5cbiAgT2JqZWN0LmtleXMobmV3Q29uZmlnKS5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWdLZXkpIHtcbiAgICBpZiAob2soY29uZmlnS2V5KSkgY29uZmlnJDFbY29uZmlnS2V5XSA9IG5ld0NvbmZpZ1tjb25maWdLZXldO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYXV0byh2YWx1ZSkge1xuICB1cGRhdGUoe1xuICAgIGF1dG9SZXBsYWNlU3ZnOiB2YWx1ZSxcbiAgICBvYnNlcnZlTXV0YXRpb25zOiB2YWx1ZVxuICB9KTtcbn1cblxudmFyIHcgPSBXSU5ET1cgfHwge307XG5cbmlmICghd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0pIHdbTkFNRVNQQUNFX0lERU5USUZJRVJdID0ge307XG5pZiAoIXdbTkFNRVNQQUNFX0lERU5USUZJRVJdLnN0eWxlcykgd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0uc3R5bGVzID0ge307XG5pZiAoIXdbTkFNRVNQQUNFX0lERU5USUZJRVJdLmhvb2tzKSB3W05BTUVTUEFDRV9JREVOVElGSUVSXS5ob29rcyA9IHt9O1xuaWYgKCF3W05BTUVTUEFDRV9JREVOVElGSUVSXS5zaGltcykgd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0uc2hpbXMgPSBbXTtcblxudmFyIG5hbWVzcGFjZSA9IHdbTkFNRVNQQUNFX0lERU5USUZJRVJdO1xuXG52YXIgZnVuY3Rpb25zID0gW107XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgRE9DVU1FTlQucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGxpc3RlbmVyKTtcbiAgbG9hZGVkID0gMTtcbiAgZnVuY3Rpb25zLm1hcChmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gZm4oKTtcbiAgfSk7XG59O1xuXG52YXIgbG9hZGVkID0gZmFsc2U7XG5cbmlmIChJU19ET00pIHtcbiAgbG9hZGVkID0gKERPQ1VNRU5ULmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCA/IC9ebG9hZGVkfF5jLyA6IC9ebG9hZGVkfF5pfF5jLykudGVzdChET0NVTUVOVC5yZWFkeVN0YXRlKTtcblxuICBpZiAoIWxvYWRlZCkgRE9DVU1FTlQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGxpc3RlbmVyKTtcbn1cblxudmFyIGRvbXJlYWR5ID0gZnVuY3Rpb24gKGZuKSB7XG4gIGlmICghSVNfRE9NKSByZXR1cm47XG4gIGxvYWRlZCA/IHNldFRpbWVvdXQoZm4sIDApIDogZnVuY3Rpb25zLnB1c2goZm4pO1xufTtcblxudmFyIGQgPSBVTklUU19JTl9HUklEO1xuXG52YXIgbWVhbmluZ2xlc3NUcmFuc2Zvcm0gPSB7XG4gIHNpemU6IDE2LFxuICB4OiAwLFxuICB5OiAwLFxuICByb3RhdGU6IDAsXG4gIGZsaXBYOiBmYWxzZSxcbiAgZmxpcFk6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBpc1Jlc2VydmVkKG5hbWUpIHtcbiAgcmV0dXJuIH5SRVNFUlZFRF9DTEFTU0VTLmluZGV4T2YobmFtZSk7XG59XG5cbmZ1bmN0aW9uIGJ1bmtlcihmbikge1xuICB0cnkge1xuICAgIGZuKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIVBST0RVQ1RJT04pIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydENzcyhjc3MpIHtcbiAgaWYgKCFjc3MgfHwgIUlTX0RPTSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICBzdHlsZS5pbm5lckhUTUwgPSBjc3M7XG5cbiAgdmFyIGhlYWRDaGlsZHJlbiA9IERPQ1VNRU5ULmhlYWQuY2hpbGROb2RlcztcbiAgdmFyIGJlZm9yZUNoaWxkID0gbnVsbDtcblxuICBmb3IgKHZhciBpID0gaGVhZENoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgdmFyIGNoaWxkID0gaGVhZENoaWxkcmVuW2ldO1xuICAgIHZhciB0YWdOYW1lID0gKGNoaWxkLnRhZ05hbWUgfHwgJycpLnRvVXBwZXJDYXNlKCk7XG4gICAgaWYgKFsnU1RZTEUnLCAnTElOSyddLmluZGV4T2YodGFnTmFtZSkgPiAtMSkge1xuICAgICAgYmVmb3JlQ2hpbGQgPSBjaGlsZDtcbiAgICB9XG4gIH1cblxuICBET0NVTUVOVC5oZWFkLmluc2VydEJlZm9yZShzdHlsZSwgYmVmb3JlQ2hpbGQpO1xuXG4gIHJldHVybiBjc3M7XG59XG5cbnZhciBfdW5pcXVlSWQgPSAwO1xuXG5mdW5jdGlvbiBuZXh0VW5pcXVlSWQoKSB7XG4gIF91bmlxdWVJZCsrO1xuXG4gIHJldHVybiBfdW5pcXVlSWQ7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAob2JqIHx8IFtdKS5sZW5ndGggPj4+IDA7IGktLTspIHtcbiAgICBhcnJheVtpXSA9IG9ialtpXTtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gY2xhc3NBcnJheShub2RlKSB7XG4gIGlmIChub2RlLmNsYXNzTGlzdCkge1xuICAgIHJldHVybiB0b0FycmF5KG5vZGUuY2xhc3NMaXN0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SWNvbk5hbWUoZmFtaWx5UHJlZml4LCBjbHMpIHtcbiAgdmFyIHBhcnRzID0gY2xzLnNwbGl0KCctJyk7XG4gIHZhciBwcmVmaXggPSBwYXJ0c1swXTtcbiAgdmFyIGljb25OYW1lID0gcGFydHMuc2xpY2UoMSkuam9pbignLScpO1xuXG4gIGlmIChwcmVmaXggPT09IGZhbWlseVByZWZpeCAmJiBpY29uTmFtZSAhPT0gJycgJiYgIWlzUmVzZXJ2ZWQoaWNvbk5hbWUpKSB7XG4gICAgcmV0dXJuIGljb25OYW1lO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGh0bWxFc2NhcGUoc3RyKSB7XG4gIHJldHVybiAoJycgKyBzdHIpLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpLnJlcGxhY2UoLycvZywgJyYjMzk7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcbn1cblxuZnVuY3Rpb24gam9pbkF0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcyB8fCB7fSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gYWNjICsgKGF0dHJpYnV0ZU5hbWUgKyAnPVwiJyArIGh0bWxFc2NhcGUoYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkgKyAnXCIgJyk7XG4gIH0sICcnKS50cmltKCk7XG59XG5cbmZ1bmN0aW9uIGpvaW5TdHlsZXMoc3R5bGVzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZXMgfHwge30pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZU5hbWUpIHtcbiAgICByZXR1cm4gYWNjICsgKHN0eWxlTmFtZSArICc6ICcgKyBzdHlsZXNbc3R5bGVOYW1lXSArICc7Jyk7XG4gIH0sICcnKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtSXNNZWFuaW5nZnVsKHRyYW5zZm9ybSkge1xuICByZXR1cm4gdHJhbnNmb3JtLnNpemUgIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnNpemUgfHwgdHJhbnNmb3JtLnggIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnggfHwgdHJhbnNmb3JtLnkgIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnkgfHwgdHJhbnNmb3JtLnJvdGF0ZSAhPT0gbWVhbmluZ2xlc3NUcmFuc2Zvcm0ucm90YXRlIHx8IHRyYW5zZm9ybS5mbGlwWCB8fCB0cmFuc2Zvcm0uZmxpcFk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUZvclN2ZyhfcmVmKSB7XG4gIHZhciB0cmFuc2Zvcm0gPSBfcmVmLnRyYW5zZm9ybSxcbiAgICAgIGNvbnRhaW5lcldpZHRoID0gX3JlZi5jb250YWluZXJXaWR0aCxcbiAgICAgIGljb25XaWR0aCA9IF9yZWYuaWNvbldpZHRoO1xuXG4gIHZhciBvdXRlciA9IHtcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoJyArIGNvbnRhaW5lcldpZHRoIC8gMiArICcgMjU2KSdcbiAgfTtcbiAgdmFyIGlubmVyVHJhbnNsYXRlID0gJ3RyYW5zbGF0ZSgnICsgdHJhbnNmb3JtLnggKiAzMiArICcsICcgKyB0cmFuc2Zvcm0ueSAqIDMyICsgJykgJztcbiAgdmFyIGlubmVyU2NhbGUgPSAnc2NhbGUoJyArIHRyYW5zZm9ybS5zaXplIC8gMTYgKiAodHJhbnNmb3JtLmZsaXBYID8gLTEgOiAxKSArICcsICcgKyB0cmFuc2Zvcm0uc2l6ZSAvIDE2ICogKHRyYW5zZm9ybS5mbGlwWSA/IC0xIDogMSkgKyAnKSAnO1xuICB2YXIgaW5uZXJSb3RhdGUgPSAncm90YXRlKCcgKyB0cmFuc2Zvcm0ucm90YXRlICsgJyAwIDApJztcbiAgdmFyIGlubmVyID0ge1xuICAgIHRyYW5zZm9ybTogaW5uZXJUcmFuc2xhdGUgKyAnICcgKyBpbm5lclNjYWxlICsgJyAnICsgaW5uZXJSb3RhdGVcbiAgfTtcbiAgdmFyIHBhdGggPSB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKCcgKyBpY29uV2lkdGggLyAyICogLTEgKyAnIC0yNTYpJ1xuICB9O1xuICByZXR1cm4ge1xuICAgIG91dGVyOiBvdXRlcixcbiAgICBpbm5lcjogaW5uZXIsXG4gICAgcGF0aDogcGF0aFxuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Gb3JDc3MoX3JlZjIpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IF9yZWYyLnRyYW5zZm9ybSxcbiAgICAgIF9yZWYyJHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICB3aWR0aCA9IF9yZWYyJHdpZHRoID09PSB1bmRlZmluZWQgPyBVTklUU19JTl9HUklEIDogX3JlZjIkd2lkdGgsXG4gICAgICBfcmVmMiRoZWlnaHQgPSBfcmVmMi5oZWlnaHQsXG4gICAgICBoZWlnaHQgPSBfcmVmMiRoZWlnaHQgPT09IHVuZGVmaW5lZCA/IFVOSVRTX0lOX0dSSUQgOiBfcmVmMiRoZWlnaHQsXG4gICAgICBfcmVmMiRzdGFydENlbnRlcmVkID0gX3JlZjIuc3RhcnRDZW50ZXJlZCxcbiAgICAgIHN0YXJ0Q2VudGVyZWQgPSBfcmVmMiRzdGFydENlbnRlcmVkID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYyJHN0YXJ0Q2VudGVyZWQ7XG5cbiAgdmFyIHZhbCA9ICcnO1xuXG4gIGlmIChzdGFydENlbnRlcmVkICYmIElTX0lFKSB7XG4gICAgdmFsICs9ICd0cmFuc2xhdGUoJyArICh0cmFuc2Zvcm0ueCAvIGQgLSB3aWR0aCAvIDIpICsgJ2VtLCAnICsgKHRyYW5zZm9ybS55IC8gZCAtIGhlaWdodCAvIDIpICsgJ2VtKSAnO1xuICB9IGVsc2UgaWYgKHN0YXJ0Q2VudGVyZWQpIHtcbiAgICB2YWwgKz0gJ3RyYW5zbGF0ZShjYWxjKC01MCUgKyAnICsgdHJhbnNmb3JtLnggLyBkICsgJ2VtKSwgY2FsYygtNTAlICsgJyArIHRyYW5zZm9ybS55IC8gZCArICdlbSkpICc7XG4gIH0gZWxzZSB7XG4gICAgdmFsICs9ICd0cmFuc2xhdGUoJyArIHRyYW5zZm9ybS54IC8gZCArICdlbSwgJyArIHRyYW5zZm9ybS55IC8gZCArICdlbSkgJztcbiAgfVxuXG4gIHZhbCArPSAnc2NhbGUoJyArIHRyYW5zZm9ybS5zaXplIC8gZCAqICh0cmFuc2Zvcm0uZmxpcFggPyAtMSA6IDEpICsgJywgJyArIHRyYW5zZm9ybS5zaXplIC8gZCAqICh0cmFuc2Zvcm0uZmxpcFkgPyAtMSA6IDEpICsgJykgJztcbiAgdmFsICs9ICdyb3RhdGUoJyArIHRyYW5zZm9ybS5yb3RhdGUgKyAnZGVnKSAnO1xuXG4gIHJldHVybiB2YWw7XG59XG5cbnZhciBBTExfU1BBQ0UgPSB7XG4gIHg6IDAsXG4gIHk6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnXG59O1xuXG52YXIgbWFrZUljb25NYXNraW5nID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmLmF0dHJpYnV0ZXMsXG4gICAgICBtYWluID0gX3JlZi5tYWluLFxuICAgICAgbWFzayA9IF9yZWYubWFzayxcbiAgICAgIHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtO1xuICB2YXIgbWFpbldpZHRoID0gbWFpbi53aWR0aCxcbiAgICAgIG1haW5QYXRoID0gbWFpbi5pY29uO1xuICB2YXIgbWFza1dpZHRoID0gbWFzay53aWR0aCxcbiAgICAgIG1hc2tQYXRoID0gbWFzay5pY29uO1xuXG5cbiAgdmFyIHRyYW5zID0gdHJhbnNmb3JtRm9yU3ZnKHsgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sIGNvbnRhaW5lcldpZHRoOiBtYXNrV2lkdGgsIGljb25XaWR0aDogbWFpbldpZHRoIH0pO1xuXG4gIHZhciBtYXNrUmVjdCA9IHtcbiAgICB0YWc6ICdyZWN0JyxcbiAgICBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgQUxMX1NQQUNFLCB7XG4gICAgICBmaWxsOiAnd2hpdGUnXG4gICAgfSlcbiAgfTtcbiAgdmFyIG1hc2tJbm5lckdyb3VwID0ge1xuICAgIHRhZzogJ2cnLFxuICAgIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCB0cmFucy5pbm5lciksXG4gICAgY2hpbGRyZW46IFt7IHRhZzogJ3BhdGgnLCBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgbWFpblBhdGguYXR0cmlidXRlcywgdHJhbnMucGF0aCwgeyBmaWxsOiAnYmxhY2snIH0pIH1dXG4gIH07XG4gIHZhciBtYXNrT3V0ZXJHcm91cCA9IHtcbiAgICB0YWc6ICdnJyxcbiAgICBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgdHJhbnMub3V0ZXIpLFxuICAgIGNoaWxkcmVuOiBbbWFza0lubmVyR3JvdXBdXG4gIH07XG4gIHZhciBtYXNrSWQgPSAnbWFzay0nICsgbmV4dFVuaXF1ZUlkKCk7XG4gIHZhciBjbGlwSWQgPSAnY2xpcC0nICsgbmV4dFVuaXF1ZUlkKCk7XG4gIHZhciBtYXNrVGFnID0ge1xuICAgIHRhZzogJ21hc2snLFxuICAgIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCBBTExfU1BBQ0UsIHtcbiAgICAgIGlkOiBtYXNrSWQsXG4gICAgICBtYXNrVW5pdHM6ICd1c2VyU3BhY2VPblVzZScsXG4gICAgICBtYXNrQ29udGVudFVuaXRzOiAndXNlclNwYWNlT25Vc2UnXG4gICAgfSksXG4gICAgY2hpbGRyZW46IFttYXNrUmVjdCwgbWFza091dGVyR3JvdXBdXG4gIH07XG4gIHZhciBkZWZzID0ge1xuICAgIHRhZzogJ2RlZnMnLFxuICAgIGNoaWxkcmVuOiBbeyB0YWc6ICdjbGlwUGF0aCcsIGF0dHJpYnV0ZXM6IHsgaWQ6IGNsaXBJZCB9LCBjaGlsZHJlbjogW21hc2tQYXRoXSB9LCBtYXNrVGFnXVxuICB9O1xuXG4gIGNoaWxkcmVuLnB1c2goZGVmcywgeyB0YWc6ICdyZWN0JywgYXR0cmlidXRlczogX2V4dGVuZHMoeyBmaWxsOiAnY3VycmVudENvbG9yJywgJ2NsaXAtcGF0aCc6ICd1cmwoIycgKyBjbGlwSWQgKyAnKScsIG1hc2s6ICd1cmwoIycgKyBtYXNrSWQgKyAnKScgfSwgQUxMX1NQQUNFKSB9KTtcblxuICByZXR1cm4ge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzXG4gIH07XG59O1xuXG52YXIgbWFrZUljb25TdGFuZGFyZCA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBhdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzLFxuICAgICAgbWFpbiA9IF9yZWYubWFpbixcbiAgICAgIHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtLFxuICAgICAgc3R5bGVzID0gX3JlZi5zdHlsZXM7XG5cbiAgdmFyIHN0eWxlU3RyaW5nID0gam9pblN0eWxlcyhzdHlsZXMpO1xuXG4gIGlmIChzdHlsZVN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgYXR0cmlidXRlc1snc3R5bGUnXSA9IHN0eWxlU3RyaW5nO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybUlzTWVhbmluZ2Z1bCh0cmFuc2Zvcm0pKSB7XG4gICAgdmFyIHRyYW5zID0gdHJhbnNmb3JtRm9yU3ZnKHsgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sIGNvbnRhaW5lcldpZHRoOiBtYWluLndpZHRoLCBpY29uV2lkdGg6IG1haW4ud2lkdGggfSk7XG4gICAgY2hpbGRyZW4ucHVzaCh7XG4gICAgICB0YWc6ICdnJyxcbiAgICAgIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCB0cmFucy5vdXRlciksXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdGFnOiAnZycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCB0cmFucy5pbm5lciksXG4gICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgIHRhZzogbWFpbi5pY29uLnRhZyxcbiAgICAgICAgICBjaGlsZHJlbjogbWFpbi5pY29uLmNoaWxkcmVuLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCBtYWluLmljb24uYXR0cmlidXRlcywgdHJhbnMucGF0aClcbiAgICAgICAgfV1cbiAgICAgIH1dXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY2hpbGRyZW4ucHVzaChtYWluLmljb24pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICB9O1xufTtcblxudmFyIGFzSWNvbiA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBtYWluID0gX3JlZi5tYWluLFxuICAgICAgbWFzayA9IF9yZWYubWFzayxcbiAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmLmF0dHJpYnV0ZXMsXG4gICAgICBzdHlsZXMgPSBfcmVmLnN0eWxlcyxcbiAgICAgIHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtO1xuXG4gIGlmICh0cmFuc2Zvcm1Jc01lYW5pbmdmdWwodHJhbnNmb3JtKSAmJiBtYWluLmZvdW5kICYmICFtYXNrLmZvdW5kKSB7XG4gICAgdmFyIHdpZHRoID0gbWFpbi53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gbWFpbi5oZWlnaHQ7XG5cbiAgICB2YXIgb2Zmc2V0ID0ge1xuICAgICAgeDogd2lkdGggLyBoZWlnaHQgLyAyLFxuICAgICAgeTogMC41XG4gICAgfTtcbiAgICBhdHRyaWJ1dGVzWydzdHlsZSddID0gam9pblN0eWxlcyhfZXh0ZW5kcyh7fSwgc3R5bGVzLCB7XG4gICAgICAndHJhbnNmb3JtLW9yaWdpbic6IG9mZnNldC54ICsgdHJhbnNmb3JtLnggLyAxNiArICdlbSAnICsgKG9mZnNldC55ICsgdHJhbnNmb3JtLnkgLyAxNikgKyAnZW0nXG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuIFt7XG4gICAgdGFnOiAnc3ZnJyxcbiAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9XTtcbn07XG5cbnZhciBhc1N5bWJvbCA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwcmVmaXggPSBfcmVmLnByZWZpeCxcbiAgICAgIGljb25OYW1lID0gX3JlZi5pY29uTmFtZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmLmF0dHJpYnV0ZXMsXG4gICAgICBzeW1ib2wgPSBfcmVmLnN5bWJvbDtcblxuICB2YXIgaWQgPSBzeW1ib2wgPT09IHRydWUgPyBwcmVmaXggKyAnLScgKyBjb25maWckMS5mYW1pbHlQcmVmaXggKyAnLScgKyBpY29uTmFtZSA6IHN5bWJvbDtcblxuICByZXR1cm4gW3tcbiAgICB0YWc6ICdzdmcnLFxuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIHN0eWxlOiAnZGlzcGxheTogbm9uZTsnXG4gICAgfSxcbiAgICBjaGlsZHJlbjogW3tcbiAgICAgIHRhZzogJ3N5bWJvbCcsXG4gICAgICBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgeyBpZDogaWQgfSksXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9XVxuICB9XTtcbn07XG5cbmZ1bmN0aW9uIG1ha2VJbmxpbmVTdmdBYnN0cmFjdChwYXJhbXMpIHtcbiAgdmFyIF9wYXJhbXMkaWNvbnMgPSBwYXJhbXMuaWNvbnMsXG4gICAgICBtYWluID0gX3BhcmFtcyRpY29ucy5tYWluLFxuICAgICAgbWFzayA9IF9wYXJhbXMkaWNvbnMubWFzayxcbiAgICAgIHByZWZpeCA9IHBhcmFtcy5wcmVmaXgsXG4gICAgICBpY29uTmFtZSA9IHBhcmFtcy5pY29uTmFtZSxcbiAgICAgIHRyYW5zZm9ybSA9IHBhcmFtcy50cmFuc2Zvcm0sXG4gICAgICBzeW1ib2wgPSBwYXJhbXMuc3ltYm9sLFxuICAgICAgdGl0bGUgPSBwYXJhbXMudGl0bGUsXG4gICAgICBleHRyYSA9IHBhcmFtcy5leHRyYSxcbiAgICAgIF9wYXJhbXMkd2F0Y2hhYmxlID0gcGFyYW1zLndhdGNoYWJsZSxcbiAgICAgIHdhdGNoYWJsZSA9IF9wYXJhbXMkd2F0Y2hhYmxlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wYXJhbXMkd2F0Y2hhYmxlO1xuXG4gIHZhciBfcmVmID0gbWFzay5mb3VuZCA/IG1hc2sgOiBtYWluLFxuICAgICAgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgdmFyIHdpZHRoQ2xhc3MgPSAnZmEtdy0nICsgTWF0aC5jZWlsKHdpZHRoIC8gaGVpZ2h0ICogMTYpO1xuICB2YXIgYXR0ckNsYXNzID0gW2NvbmZpZyQxLnJlcGxhY2VtZW50Q2xhc3MsIGljb25OYW1lID8gY29uZmlnJDEuZmFtaWx5UHJlZml4ICsgJy0nICsgaWNvbk5hbWUgOiAnJywgd2lkdGhDbGFzc10uY29uY2F0KGV4dHJhLmNsYXNzZXMpLmpvaW4oJyAnKTtcblxuICB2YXIgY29udGVudCA9IHtcbiAgICBjaGlsZHJlbjogW10sXG4gICAgYXR0cmlidXRlczogX2V4dGVuZHMoe30sIGV4dHJhLmF0dHJpYnV0ZXMsIHtcbiAgICAgICdkYXRhLXByZWZpeCc6IHByZWZpeCxcbiAgICAgICdkYXRhLWljb24nOiBpY29uTmFtZSxcbiAgICAgICdjbGFzcyc6IGF0dHJDbGFzcyxcbiAgICAgICdyb2xlJzogJ2ltZycsXG4gICAgICAneG1sbnMnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICAgICAgJ3ZpZXdCb3gnOiAnMCAwICcgKyB3aWR0aCArICcgJyArIGhlaWdodFxuICAgIH0pXG4gIH07XG5cbiAgaWYgKHdhdGNoYWJsZSkge1xuICAgIGNvbnRlbnQuYXR0cmlidXRlc1tEQVRBX0ZBX0kyU1ZHXSA9ICcnO1xuICB9XG5cbiAgaWYgKHRpdGxlKSBjb250ZW50LmNoaWxkcmVuLnB1c2goeyB0YWc6ICd0aXRsZScsIGF0dHJpYnV0ZXM6IHsgaWQ6IGNvbnRlbnQuYXR0cmlidXRlc1snYXJpYS1sYWJlbGxlZGJ5J10gfHwgJ3RpdGxlLScgKyBuZXh0VW5pcXVlSWQoKSB9LCBjaGlsZHJlbjogW3RpdGxlXSB9KTtcblxuICB2YXIgYXJncyA9IF9leHRlbmRzKHt9LCBjb250ZW50LCB7XG4gICAgcHJlZml4OiBwcmVmaXgsXG4gICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgIG1haW46IG1haW4sXG4gICAgbWFzazogbWFzayxcbiAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICBzeW1ib2w6IHN5bWJvbCxcbiAgICBzdHlsZXM6IGV4dHJhLnN0eWxlc1xuICB9KTtcblxuICB2YXIgX3JlZjIgPSBtYXNrLmZvdW5kICYmIG1haW4uZm91bmQgPyBtYWtlSWNvbk1hc2tpbmcoYXJncykgOiBtYWtlSWNvblN0YW5kYXJkKGFyZ3MpLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmMi5jaGlsZHJlbixcbiAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmMi5hdHRyaWJ1dGVzO1xuXG4gIGFyZ3MuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgYXJncy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcblxuICBpZiAoc3ltYm9sKSB7XG4gICAgcmV0dXJuIGFzU3ltYm9sKGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhc0ljb24oYXJncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUxheWVyc1RleHRBYnN0cmFjdChwYXJhbXMpIHtcbiAgdmFyIGNvbnRlbnQgPSBwYXJhbXMuY29udGVudCxcbiAgICAgIHdpZHRoID0gcGFyYW1zLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gcGFyYW1zLmhlaWdodCxcbiAgICAgIHRyYW5zZm9ybSA9IHBhcmFtcy50cmFuc2Zvcm0sXG4gICAgICB0aXRsZSA9IHBhcmFtcy50aXRsZSxcbiAgICAgIGV4dHJhID0gcGFyYW1zLmV4dHJhLFxuICAgICAgX3BhcmFtcyR3YXRjaGFibGUyID0gcGFyYW1zLndhdGNoYWJsZSxcbiAgICAgIHdhdGNoYWJsZSA9IF9wYXJhbXMkd2F0Y2hhYmxlMiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcGFyYW1zJHdhdGNoYWJsZTI7XG5cblxuICB2YXIgYXR0cmlidXRlcyA9IF9leHRlbmRzKHt9LCBleHRyYS5hdHRyaWJ1dGVzLCB0aXRsZSA/IHsgJ3RpdGxlJzogdGl0bGUgfSA6IHt9LCB7XG4gICAgJ2NsYXNzJzogZXh0cmEuY2xhc3Nlcy5qb2luKCcgJylcbiAgfSk7XG5cbiAgaWYgKHdhdGNoYWJsZSkge1xuICAgIGF0dHJpYnV0ZXNbREFUQV9GQV9JMlNWR10gPSAnJztcbiAgfVxuXG4gIHZhciBzdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZXh0cmEuc3R5bGVzKTtcblxuICBpZiAodHJhbnNmb3JtSXNNZWFuaW5nZnVsKHRyYW5zZm9ybSkpIHtcbiAgICBzdHlsZXNbJ3RyYW5zZm9ybSddID0gdHJhbnNmb3JtRm9yQ3NzKHsgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sIHN0YXJ0Q2VudGVyZWQ6IHRydWUsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSk7XG4gICAgc3R5bGVzWyctd2Via2l0LXRyYW5zZm9ybSddID0gc3R5bGVzWyd0cmFuc2Zvcm0nXTtcbiAgfVxuXG4gIHZhciBzdHlsZVN0cmluZyA9IGpvaW5TdHlsZXMoc3R5bGVzKTtcblxuICBpZiAoc3R5bGVTdHJpbmcubGVuZ3RoID4gMCkge1xuICAgIGF0dHJpYnV0ZXNbJ3N0eWxlJ10gPSBzdHlsZVN0cmluZztcbiAgfVxuXG4gIHZhciB2YWwgPSBbXTtcblxuICB2YWwucHVzaCh7XG4gICAgdGFnOiAnc3BhbicsXG4gICAgYXR0cmlidXRlczogYXR0cmlidXRlcyxcbiAgICBjaGlsZHJlbjogW2NvbnRlbnRdXG4gIH0pO1xuXG4gIGlmICh0aXRsZSkge1xuICAgIHZhbC5wdXNoKHsgdGFnOiAnc3BhbicsIGF0dHJpYnV0ZXM6IHsgY2xhc3M6ICdzci1vbmx5JyB9LCBjaGlsZHJlbjogW3RpdGxlXSB9KTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cbnZhciBub29wJDIgPSBmdW5jdGlvbiBub29wKCkge307XG52YXIgcCA9IGNvbmZpZyQxLm1lYXN1cmVQZXJmb3JtYW5jZSAmJiBQRVJGT1JNQU5DRSAmJiBQRVJGT1JNQU5DRS5tYXJrICYmIFBFUkZPUk1BTkNFLm1lYXN1cmUgPyBQRVJGT1JNQU5DRSA6IHsgbWFyazogbm9vcCQyLCBtZWFzdXJlOiBub29wJDIgfTtcbnZhciBwcmVhbWJsZSA9ICdGQSBcIjUuMC4xM1wiJztcblxudmFyIGJlZ2luID0gZnVuY3Rpb24gYmVnaW4obmFtZSkge1xuICBwLm1hcmsocHJlYW1ibGUgKyAnICcgKyBuYW1lICsgJyBiZWdpbnMnKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZW5kKG5hbWUpO1xuICB9O1xufTtcblxudmFyIGVuZCA9IGZ1bmN0aW9uIGVuZChuYW1lKSB7XG4gIHAubWFyayhwcmVhbWJsZSArICcgJyArIG5hbWUgKyAnIGVuZHMnKTtcbiAgcC5tZWFzdXJlKHByZWFtYmxlICsgJyAnICsgbmFtZSwgcHJlYW1ibGUgKyAnICcgKyBuYW1lICsgJyBiZWdpbnMnLCBwcmVhbWJsZSArICcgJyArIG5hbWUgKyAnIGVuZHMnKTtcbn07XG5cbnZhciBwZXJmID0geyBiZWdpbjogYmVnaW4sIGVuZDogZW5kIH07XG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBoZWxwZXIgdG8gYmluZCBhIGZ1bmN0aW9uIGtub3duIHRvIGhhdmUgNCBhcmd1bWVudHNcbiAqIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqL1xudmFyIGJpbmRJbnRlcm5hbDQgPSBmdW5jdGlvbiBiaW5kSW50ZXJuYWw0IChmdW5jLCB0aGlzQ29udGV4dCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNDb250ZXh0LCBhLCBiLCBjLCBkKTtcbiAgfTtcbn07XG5cbid1c2Ugc3RyaWN0JztcblxuXG5cbi8qKlxuICogIyBSZWR1Y2VcbiAqXG4gKiBBIGZhc3Qgb2JqZWN0IGAucmVkdWNlKClgIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gICBzdWJqZWN0ICAgICAgVGhlIG9iamVjdCB0byByZWR1Y2Ugb3Zlci5cbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgICAgICAgICAgVGhlIHJlZHVjZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0gIHttaXhlZH0gICAgaW5pdGlhbFZhbHVlIFRoZSBpbml0aWFsIHZhbHVlIGZvciB0aGUgcmVkdWNlciwgZGVmYXVsdHMgdG8gc3ViamVjdFswXS5cbiAqIEBwYXJhbSAge09iamVjdH0gICB0aGlzQ29udGV4dCAgVGhlIGNvbnRleHQgZm9yIHRoZSByZWR1Y2VyLlxuICogQHJldHVybiB7bWl4ZWR9ICAgICAgICAgICAgICAgICBUaGUgZmluYWwgcmVzdWx0LlxuICovXG52YXIgcmVkdWNlID0gZnVuY3Rpb24gZmFzdFJlZHVjZU9iamVjdCAoc3ViamVjdCwgZm4sIGluaXRpYWxWYWx1ZSwgdGhpc0NvbnRleHQpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzdWJqZWN0KSxcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoLFxuICAgICAgaXRlcmF0b3IgPSB0aGlzQ29udGV4dCAhPT0gdW5kZWZpbmVkID8gYmluZEludGVybmFsNChmbiwgdGhpc0NvbnRleHQpIDogZm4sXG4gICAgICBpLCBrZXksIHJlc3VsdDtcblxuICBpZiAoaW5pdGlhbFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICBpID0gMTtcbiAgICByZXN1bHQgPSBzdWJqZWN0W2tleXNbMF1dO1xuICB9XG4gIGVsc2Uge1xuICAgIGkgPSAwO1xuICAgIHJlc3VsdCA9IGluaXRpYWxWYWx1ZTtcbiAgfVxuXG4gIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIHJlc3VsdCA9IGl0ZXJhdG9yKHJlc3VsdCwgc3ViamVjdFtrZXldLCBrZXksIHN1YmplY3QpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBzdHlsZXMkMiA9IG5hbWVzcGFjZS5zdHlsZXM7XG52YXIgc2hpbXMgPSBuYW1lc3BhY2Uuc2hpbXM7XG5cblxudmFyIF9ieVVuaWNvZGUgPSB7fTtcbnZhciBfYnlMaWdhdHVyZSA9IHt9O1xudmFyIF9ieU9sZE5hbWUgPSB7fTtcblxudmFyIGJ1aWxkID0gZnVuY3Rpb24gYnVpbGQoKSB7XG4gIHZhciBsb29rdXAgPSBmdW5jdGlvbiBsb29rdXAocmVkdWNlcikge1xuICAgIHJldHVybiByZWR1Y2Uoc3R5bGVzJDIsIGZ1bmN0aW9uIChvLCBzdHlsZSwgcHJlZml4KSB7XG4gICAgICBvW3ByZWZpeF0gPSByZWR1Y2Uoc3R5bGUsIHJlZHVjZXIsIHt9KTtcbiAgICAgIHJldHVybiBvO1xuICAgIH0sIHt9KTtcbiAgfTtcblxuICBfYnlVbmljb2RlID0gbG9va3VwKGZ1bmN0aW9uIChhY2MsIGljb24sIGljb25OYW1lKSB7XG4gICAgYWNjW2ljb25bM11dID0gaWNvbk5hbWU7XG5cbiAgICByZXR1cm4gYWNjO1xuICB9KTtcblxuICBfYnlMaWdhdHVyZSA9IGxvb2t1cChmdW5jdGlvbiAoYWNjLCBpY29uLCBpY29uTmFtZSkge1xuICAgIHZhciBsaWdhdHVyZXMgPSBpY29uWzJdO1xuXG4gICAgYWNjW2ljb25OYW1lXSA9IGljb25OYW1lO1xuXG4gICAgbGlnYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGxpZ2F0dXJlKSB7XG4gICAgICBhY2NbbGlnYXR1cmVdID0gaWNvbk5hbWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYWNjO1xuICB9KTtcblxuICB2YXIgaGFzUmVndWxhciA9ICdmYXInIGluIHN0eWxlcyQyO1xuXG4gIF9ieU9sZE5hbWUgPSByZWR1Y2Uoc2hpbXMsIGZ1bmN0aW9uIChhY2MsIHNoaW0pIHtcbiAgICB2YXIgb2xkTmFtZSA9IHNoaW1bMF07XG4gICAgdmFyIHByZWZpeCA9IHNoaW1bMV07XG4gICAgdmFyIGljb25OYW1lID0gc2hpbVsyXTtcblxuICAgIGlmIChwcmVmaXggPT09ICdmYXInICYmICFoYXNSZWd1bGFyKSB7XG4gICAgICBwcmVmaXggPSAnZmFzJztcbiAgICB9XG5cbiAgICBhY2Nbb2xkTmFtZV0gPSB7IHByZWZpeDogcHJlZml4LCBpY29uTmFtZTogaWNvbk5hbWUgfTtcblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn07XG5cbmJ1aWxkKCk7XG5cbmZ1bmN0aW9uIGJ5VW5pY29kZShwcmVmaXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIF9ieVVuaWNvZGVbcHJlZml4XVt1bmljb2RlXTtcbn1cblxuZnVuY3Rpb24gYnlMaWdhdHVyZShwcmVmaXgsIGxpZ2F0dXJlKSB7XG4gIHJldHVybiBfYnlMaWdhdHVyZVtwcmVmaXhdW2xpZ2F0dXJlXTtcbn1cblxuZnVuY3Rpb24gYnlPbGROYW1lKG5hbWUpIHtcbiAgcmV0dXJuIF9ieU9sZE5hbWVbbmFtZV0gfHwgeyBwcmVmaXg6IG51bGwsIGljb25OYW1lOiBudWxsIH07XG59XG5cbnZhciBzdHlsZXMkMSA9IG5hbWVzcGFjZS5zdHlsZXM7XG5cblxudmFyIGVtcHR5Q2Fub25pY2FsSWNvbiA9IGZ1bmN0aW9uIGVtcHR5Q2Fub25pY2FsSWNvbigpIHtcbiAgcmV0dXJuIHsgcHJlZml4OiBudWxsLCBpY29uTmFtZTogbnVsbCwgcmVzdDogW10gfTtcbn07XG5cbmZ1bmN0aW9uIGdldENhbm9uaWNhbEljb24odmFsdWVzKSB7XG4gIHJldHVybiB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGNscykge1xuICAgIHZhciBpY29uTmFtZSA9IGdldEljb25OYW1lKGNvbmZpZyQxLmZhbWlseVByZWZpeCwgY2xzKTtcblxuICAgIGlmIChzdHlsZXMkMVtjbHNdKSB7XG4gICAgICBhY2MucHJlZml4ID0gY2xzO1xuICAgIH0gZWxzZSBpZiAoaWNvbk5hbWUpIHtcbiAgICAgIHZhciBzaGltID0gYWNjLnByZWZpeCA9PT0gJ2ZhJyA/IGJ5T2xkTmFtZShpY29uTmFtZSkgOiB7fTtcblxuICAgICAgYWNjLmljb25OYW1lID0gc2hpbS5pY29uTmFtZSB8fCBpY29uTmFtZTtcbiAgICAgIGFjYy5wcmVmaXggPSBzaGltLnByZWZpeCB8fCBhY2MucHJlZml4O1xuICAgIH0gZWxzZSBpZiAoY2xzICE9PSBjb25maWckMS5yZXBsYWNlbWVudENsYXNzICYmIGNscy5pbmRleE9mKCdmYS13LScpICE9PSAwKSB7XG4gICAgICBhY2MucmVzdC5wdXNoKGNscyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwgZW1wdHlDYW5vbmljYWxJY29uKCkpO1xufVxuXG5mdW5jdGlvbiBpY29uRnJvbU1hcHBpbmcobWFwcGluZywgcHJlZml4LCBpY29uTmFtZSkge1xuICBpZiAobWFwcGluZyAmJiBtYXBwaW5nW3ByZWZpeF0gJiYgbWFwcGluZ1twcmVmaXhdW2ljb25OYW1lXSkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgIGljb25OYW1lOiBpY29uTmFtZSxcbiAgICAgIGljb246IG1hcHBpbmdbcHJlZml4XVtpY29uTmFtZV1cbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvSHRtbChhYnN0cmFjdE5vZGVzKSB7XG4gIHZhciB0YWcgPSBhYnN0cmFjdE5vZGVzLnRhZyxcbiAgICAgIF9hYnN0cmFjdE5vZGVzJGF0dHJpYiA9IGFic3RyYWN0Tm9kZXMuYXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZXMgPSBfYWJzdHJhY3ROb2RlcyRhdHRyaWIgPT09IHVuZGVmaW5lZCA/IHt9IDogX2Fic3RyYWN0Tm9kZXMkYXR0cmliLFxuICAgICAgX2Fic3RyYWN0Tm9kZXMkY2hpbGRyID0gYWJzdHJhY3ROb2Rlcy5jaGlsZHJlbixcbiAgICAgIGNoaWxkcmVuID0gX2Fic3RyYWN0Tm9kZXMkY2hpbGRyID09PSB1bmRlZmluZWQgPyBbXSA6IF9hYnN0cmFjdE5vZGVzJGNoaWxkcjtcblxuXG4gIGlmICh0eXBlb2YgYWJzdHJhY3ROb2RlcyA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gaHRtbEVzY2FwZShhYnN0cmFjdE5vZGVzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJzwnICsgdGFnICsgJyAnICsgam9pbkF0dHJpYnV0ZXMoYXR0cmlidXRlcykgKyAnPicgKyBjaGlsZHJlbi5tYXAodG9IdG1sKS5qb2luKCcnKSArICc8LycgKyB0YWcgKyAnPic7XG4gIH1cbn1cblxudmFyIG5vb3AkMSA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuZnVuY3Rpb24gaXNXYXRjaGVkKG5vZGUpIHtcbiAgdmFyIGkyc3ZnID0gbm9kZS5nZXRBdHRyaWJ1dGUgPyBub2RlLmdldEF0dHJpYnV0ZShEQVRBX0ZBX0kyU1ZHKSA6IG51bGw7XG5cbiAgcmV0dXJuIHR5cGVvZiBpMnN2ZyA9PT0gJ3N0cmluZyc7XG59XG5cbmZ1bmN0aW9uIGdldE11dGF0b3IoKSB7XG4gIGlmIChjb25maWckMS5hdXRvUmVwbGFjZVN2ZyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBtdXRhdG9ycy5yZXBsYWNlO1xuICB9XG5cbiAgdmFyIG11dGF0b3IgPSBtdXRhdG9yc1tjb25maWckMS5hdXRvUmVwbGFjZVN2Z107XG5cbiAgcmV0dXJuIG11dGF0b3IgfHwgbXV0YXRvcnMucmVwbGFjZTtcbn1cblxudmFyIG11dGF0b3JzID0ge1xuICByZXBsYWNlOiBmdW5jdGlvbiByZXBsYWNlKG11dGF0aW9uKSB7XG4gICAgdmFyIG5vZGUgPSBtdXRhdGlvblswXTtcbiAgICB2YXIgYWJzdHJhY3QgPSBtdXRhdGlvblsxXTtcbiAgICB2YXIgbmV3T3V0ZXJIVE1MID0gYWJzdHJhY3QubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gdG9IdG1sKGEpO1xuICAgIH0pLmpvaW4oJ1xcbicpO1xuXG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSAmJiBub2RlLm91dGVySFRNTCkge1xuICAgICAgbm9kZS5vdXRlckhUTUwgPSBuZXdPdXRlckhUTUwgKyAoY29uZmlnJDEua2VlcE9yaWdpbmFsU291cmNlICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnc3ZnJyA/ICc8IS0tICcgKyBub2RlLm91dGVySFRNTCArICcgLS0+JyA6ICcnKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgdmFyIG5ld05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld05vZGUsIG5vZGUpO1xuICAgICAgbmV3Tm9kZS5vdXRlckhUTUwgPSBuZXdPdXRlckhUTUw7XG4gICAgfVxuICB9LFxuICBuZXN0OiBmdW5jdGlvbiBuZXN0KG11dGF0aW9uKSB7XG4gICAgdmFyIG5vZGUgPSBtdXRhdGlvblswXTtcbiAgICB2YXIgYWJzdHJhY3QgPSBtdXRhdGlvblsxXTtcblxuICAgIC8vIElmIHdlIGFscmVhZHkgaGF2ZSBhIHJlcGxhY2VkIG5vZGUgd2UgZG8gbm90IHdhbnQgdG8gY29udGludWUgbmVzdGluZyB3aXRoaW4gaXQuXG4gICAgLy8gU2hvcnQtY2lyY3VpdCB0byB0aGUgc3RhbmRhcmQgcmVwbGFjZW1lbnRcbiAgICBpZiAofmNsYXNzQXJyYXkobm9kZSkuaW5kZXhPZihjb25maWckMS5yZXBsYWNlbWVudENsYXNzKSkge1xuICAgICAgcmV0dXJuIG11dGF0b3JzLnJlcGxhY2UobXV0YXRpb24pO1xuICAgIH1cblxuICAgIHZhciBmb3JTdmcgPSBuZXcgUmVnRXhwKGNvbmZpZyQxLmZhbWlseVByZWZpeCArICctLionKTtcblxuICAgIGRlbGV0ZSBhYnN0cmFjdFswXS5hdHRyaWJ1dGVzLnN0eWxlO1xuXG4gICAgdmFyIHNwbGl0Q2xhc3NlcyA9IGFic3RyYWN0WzBdLmF0dHJpYnV0ZXMuY2xhc3Muc3BsaXQoJyAnKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY2xzKSB7XG4gICAgICBpZiAoY2xzID09PSBjb25maWckMS5yZXBsYWNlbWVudENsYXNzIHx8IGNscy5tYXRjaChmb3JTdmcpKSB7XG4gICAgICAgIGFjYy50b1N2Zy5wdXNoKGNscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2MudG9Ob2RlLnB1c2goY2xzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7IHRvTm9kZTogW10sIHRvU3ZnOiBbXSB9KTtcblxuICAgIGFic3RyYWN0WzBdLmF0dHJpYnV0ZXMuY2xhc3MgPSBzcGxpdENsYXNzZXMudG9Tdmcuam9pbignICcpO1xuXG4gICAgdmFyIG5ld0lubmVySFRNTCA9IGFic3RyYWN0Lm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIHRvSHRtbChhKTtcbiAgICB9KS5qb2luKCdcXG4nKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBzcGxpdENsYXNzZXMudG9Ob2RlLmpvaW4oJyAnKSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoREFUQV9GQV9JMlNWRywgJycpO1xuICAgIG5vZGUuaW5uZXJIVE1MID0gbmV3SW5uZXJIVE1MO1xuICB9XG59O1xuXG5mdW5jdGlvbiBwZXJmb3JtKG11dGF0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIGNhbGxiYWNrRnVuY3Rpb24gPSB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyBjYWxsYmFjayA6IG5vb3AkMTtcblxuICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgIGNhbGxiYWNrRnVuY3Rpb24oKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZnJhbWUgPSBXSU5ET1cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IGZ1bmN0aW9uIChvcCkge1xuICAgICAgcmV0dXJuIG9wKCk7XG4gICAgfTtcblxuICAgIGZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtdXRhdG9yID0gZ2V0TXV0YXRvcigpO1xuICAgICAgdmFyIG1hcmsgPSBwZXJmLmJlZ2luKCdtdXRhdGUnKTtcblxuICAgICAgbXV0YXRpb25zLm1hcChtdXRhdG9yKTtcblxuICAgICAgbWFyaygpO1xuXG4gICAgICBjYWxsYmFja0Z1bmN0aW9uKCk7XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIGRpc2FibGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGRpc2FibGVPYnNlcnZhdGlvbihvcGVyYXRpb24pIHtcbiAgZGlzYWJsZWQgPSB0cnVlO1xuICBvcGVyYXRpb24oKTtcbiAgZGlzYWJsZWQgPSBmYWxzZTtcbn1cblxudmFyIG1vID0gbnVsbDtcblxuZnVuY3Rpb24gb2JzZXJ2ZShvcHRpb25zKSB7XG4gIGlmICghTVVUQVRJT05fT0JTRVJWRVIpIHJldHVybjtcblxuICB2YXIgdHJlZUNhbGxiYWNrID0gb3B0aW9ucy50cmVlQ2FsbGJhY2ssXG4gICAgICBub2RlQ2FsbGJhY2sgPSBvcHRpb25zLm5vZGVDYWxsYmFjayxcbiAgICAgIHBzZXVkb0VsZW1lbnRzQ2FsbGJhY2sgPSBvcHRpb25zLnBzZXVkb0VsZW1lbnRzQ2FsbGJhY2s7XG5cblxuICBtbyA9IG5ldyBNVVRBVElPTl9PQlNFUlZFUihmdW5jdGlvbiAob2JqZWN0cykge1xuICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgdG9BcnJheShvYmplY3RzKS5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvblJlY29yZCkge1xuICAgICAgaWYgKG11dGF0aW9uUmVjb3JkLnR5cGUgPT09ICdjaGlsZExpc3QnICYmIG11dGF0aW9uUmVjb3JkLmFkZGVkTm9kZXMubGVuZ3RoID4gMCAmJiAhaXNXYXRjaGVkKG11dGF0aW9uUmVjb3JkLmFkZGVkTm9kZXNbMF0pKSB7XG4gICAgICAgIGlmIChjb25maWckMS5zZWFyY2hQc2V1ZG9FbGVtZW50cykge1xuICAgICAgICAgIHBzZXVkb0VsZW1lbnRzQ2FsbGJhY2sobXV0YXRpb25SZWNvcmQudGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyZWVDYWxsYmFjayhtdXRhdGlvblJlY29yZC50YXJnZXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAobXV0YXRpb25SZWNvcmQudHlwZSA9PT0gJ2F0dHJpYnV0ZXMnICYmIG11dGF0aW9uUmVjb3JkLnRhcmdldC5wYXJlbnROb2RlICYmIGNvbmZpZyQxLnNlYXJjaFBzZXVkb0VsZW1lbnRzKSB7XG4gICAgICAgIHBzZXVkb0VsZW1lbnRzQ2FsbGJhY2sobXV0YXRpb25SZWNvcmQudGFyZ2V0LnBhcmVudE5vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAobXV0YXRpb25SZWNvcmQudHlwZSA9PT0gJ2F0dHJpYnV0ZXMnICYmIGlzV2F0Y2hlZChtdXRhdGlvblJlY29yZC50YXJnZXQpICYmIH5BVFRSSUJVVEVTX1dBVENIRURfRk9SX01VVEFUSU9OLmluZGV4T2YobXV0YXRpb25SZWNvcmQuYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgaWYgKG11dGF0aW9uUmVjb3JkLmF0dHJpYnV0ZU5hbWUgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICB2YXIgX2dldENhbm9uaWNhbEljb24gPSBnZXRDYW5vbmljYWxJY29uKGNsYXNzQXJyYXkobXV0YXRpb25SZWNvcmQudGFyZ2V0KSksXG4gICAgICAgICAgICAgIHByZWZpeCA9IF9nZXRDYW5vbmljYWxJY29uLnByZWZpeCxcbiAgICAgICAgICAgICAgaWNvbk5hbWUgPSBfZ2V0Q2Fub25pY2FsSWNvbi5pY29uTmFtZTtcblxuICAgICAgICAgIGlmIChwcmVmaXgpIG11dGF0aW9uUmVjb3JkLnRhcmdldC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJlZml4JywgcHJlZml4KTtcbiAgICAgICAgICBpZiAoaWNvbk5hbWUpIG11dGF0aW9uUmVjb3JkLnRhcmdldC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWNvbicsIGljb25OYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlQ2FsbGJhY2sobXV0YXRpb25SZWNvcmQudGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBpZiAoIUlTX0RPTSkgcmV0dXJuO1xuXG4gIG1vLm9ic2VydmUoRE9DVU1FTlQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXSwge1xuICAgIGNoaWxkTGlzdDogdHJ1ZSwgYXR0cmlidXRlczogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogdHJ1ZSwgc3VidHJlZTogdHJ1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZGlzY29ubmVjdCgpIHtcbiAgaWYgKCFtbykgcmV0dXJuO1xuXG4gIG1vLmRpc2Nvbm5lY3QoKTtcbn1cblxudmFyIHN0eWxlUGFyc2VyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgdmFyIHN0eWxlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7XG5cbiAgdmFyIHZhbCA9IFtdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHZhbCA9IHN0eWxlLnNwbGl0KCc7JykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHN0eWxlKSB7XG4gICAgICB2YXIgc3R5bGVzID0gc3R5bGUuc3BsaXQoJzonKTtcbiAgICAgIHZhciBwcm9wID0gc3R5bGVzWzBdO1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVzLnNsaWNlKDEpO1xuXG4gICAgICBpZiAocHJvcCAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFjY1twcm9wXSA9IHZhbHVlLmpvaW4oJzonKS50cmltKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn07XG5cbmZ1bmN0aW9uIHRvSGV4KHVuaWNvZGUpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdW5pY29kZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBoZXggPSB1bmljb2RlLmNoYXJDb2RlQXQoaSkudG9TdHJpbmcoMTYpO1xuICAgIHJlc3VsdCArPSAoJzAwMCcgKyBoZXgpLnNsaWNlKC00KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBjbGFzc1BhcnNlciA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIHZhciBleGlzdGluZ1ByZWZpeCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXByZWZpeCcpO1xuICB2YXIgZXhpc3RpbmdJY29uTmFtZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWljb24nKTtcbiAgdmFyIGlubmVyVGV4dCA9IG5vZGUuaW5uZXJUZXh0ICE9PSB1bmRlZmluZWQgPyBub2RlLmlubmVyVGV4dC50cmltKCkgOiAnJztcblxuICB2YXIgdmFsID0gZ2V0Q2Fub25pY2FsSWNvbihjbGFzc0FycmF5KG5vZGUpKTtcblxuICBpZiAoZXhpc3RpbmdQcmVmaXggJiYgZXhpc3RpbmdJY29uTmFtZSkge1xuICAgIHZhbC5wcmVmaXggPSBleGlzdGluZ1ByZWZpeDtcbiAgICB2YWwuaWNvbk5hbWUgPSBleGlzdGluZ0ljb25OYW1lO1xuICB9XG5cbiAgaWYgKHZhbC5wcmVmaXggJiYgaW5uZXJUZXh0Lmxlbmd0aCA+IDEpIHtcbiAgICB2YWwuaWNvbk5hbWUgPSBieUxpZ2F0dXJlKHZhbC5wcmVmaXgsIG5vZGUuaW5uZXJUZXh0KTtcbiAgfSBlbHNlIGlmICh2YWwucHJlZml4ICYmIGlubmVyVGV4dC5sZW5ndGggPT09IDEpIHtcbiAgICB2YWwuaWNvbk5hbWUgPSBieVVuaWNvZGUodmFsLnByZWZpeCwgdG9IZXgobm9kZS5pbm5lclRleHQpKTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59O1xuXG52YXIgcGFyc2VUcmFuc2Zvcm1TdHJpbmcgPSBmdW5jdGlvbiBwYXJzZVRyYW5zZm9ybVN0cmluZyh0cmFuc2Zvcm1TdHJpbmcpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IHtcbiAgICBzaXplOiAxNixcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgZmxpcFg6IGZhbHNlLFxuICAgIGZsaXBZOiBmYWxzZSxcbiAgICByb3RhdGU6IDBcbiAgfTtcblxuICBpZiAoIXRyYW5zZm9ybVN0cmluZykge1xuICAgIHJldHVybiB0cmFuc2Zvcm07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVN0cmluZy50b0xvd2VyQ2FzZSgpLnNwbGl0KCcgJykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG4pIHtcbiAgICAgIHZhciBwYXJ0cyA9IG4udG9Mb3dlckNhc2UoKS5zcGxpdCgnLScpO1xuICAgICAgdmFyIGZpcnN0ID0gcGFydHNbMF07XG4gICAgICB2YXIgcmVzdCA9IHBhcnRzLnNsaWNlKDEpLmpvaW4oJy0nKTtcblxuICAgICAgaWYgKGZpcnN0ICYmIHJlc3QgPT09ICdoJykge1xuICAgICAgICBhY2MuZmxpcFggPSB0cnVlO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmlyc3QgJiYgcmVzdCA9PT0gJ3YnKSB7XG4gICAgICAgIGFjYy5mbGlwWSA9IHRydWU7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG5cbiAgICAgIHJlc3QgPSBwYXJzZUZsb2F0KHJlc3QpO1xuXG4gICAgICBpZiAoaXNOYU4ocmVzdCkpIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChmaXJzdCkge1xuICAgICAgICBjYXNlICdncm93JzpcbiAgICAgICAgICBhY2Muc2l6ZSA9IGFjYy5zaXplICsgcmVzdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2hyaW5rJzpcbiAgICAgICAgICBhY2Muc2l6ZSA9IGFjYy5zaXplIC0gcmVzdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgYWNjLnggPSBhY2MueCAtIHJlc3Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICBhY2MueCA9IGFjYy54ICsgcmVzdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndXAnOlxuICAgICAgICAgIGFjYy55ID0gYWNjLnkgLSByZXN0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgICBhY2MueSA9IGFjYy55ICsgcmVzdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncm90YXRlJzpcbiAgICAgICAgICBhY2Mucm90YXRlID0gYWNjLnJvdGF0ZSArIHJlc3Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgdHJhbnNmb3JtKTtcbiAgfVxufTtcblxudmFyIHRyYW5zZm9ybVBhcnNlciA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIHJldHVybiBwYXJzZVRyYW5zZm9ybVN0cmluZyhub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1mYS10cmFuc2Zvcm0nKSk7XG59O1xuXG52YXIgc3ltYm9sUGFyc2VyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgdmFyIHN5bWJvbCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWZhLXN5bWJvbCcpO1xuXG4gIHJldHVybiBzeW1ib2wgPT09IG51bGwgPyBmYWxzZSA6IHN5bWJvbCA9PT0gJycgPyB0cnVlIDogc3ltYm9sO1xufTtcblxudmFyIGF0dHJpYnV0ZXNQYXJzZXIgPSBmdW5jdGlvbiAobm9kZSkge1xuICB2YXIgZXh0cmFBdHRyaWJ1dGVzID0gdG9BcnJheShub2RlLmF0dHJpYnV0ZXMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBhdHRyKSB7XG4gICAgaWYgKGFjYy5uYW1lICE9PSAnY2xhc3MnICYmIGFjYy5uYW1lICE9PSAnc3R5bGUnKSB7XG4gICAgICBhY2NbYXR0ci5uYW1lXSA9IGF0dHIudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICB2YXIgdGl0bGUgPSBub2RlLmdldEF0dHJpYnV0ZSgndGl0bGUnKTtcblxuICBpZiAoY29uZmlnJDEuYXV0b0ExMXkpIHtcbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIGV4dHJhQXR0cmlidXRlc1snYXJpYS1sYWJlbGxlZGJ5J10gPSBjb25maWckMS5yZXBsYWNlbWVudENsYXNzICsgJy10aXRsZS0nICsgbmV4dFVuaXF1ZUlkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4dHJhQXR0cmlidXRlc1snYXJpYS1oaWRkZW4nXSA9ICd0cnVlJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXh0cmFBdHRyaWJ1dGVzO1xufTtcblxudmFyIG1hc2tQYXJzZXIgPSBmdW5jdGlvbiAobm9kZSkge1xuICB2YXIgbWFzayA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWZhLW1hc2snKTtcblxuICBpZiAoIW1hc2spIHtcbiAgICByZXR1cm4gZW1wdHlDYW5vbmljYWxJY29uKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldENhbm9uaWNhbEljb24obWFzay5zcGxpdCgnICcpLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIGkudHJpbSgpO1xuICAgIH0pKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcGFyc2VNZXRhKG5vZGUpIHtcbiAgdmFyIF9jbGFzc1BhcnNlciA9IGNsYXNzUGFyc2VyKG5vZGUpLFxuICAgICAgaWNvbk5hbWUgPSBfY2xhc3NQYXJzZXIuaWNvbk5hbWUsXG4gICAgICBwcmVmaXggPSBfY2xhc3NQYXJzZXIucHJlZml4LFxuICAgICAgZXh0cmFDbGFzc2VzID0gX2NsYXNzUGFyc2VyLnJlc3Q7XG5cbiAgdmFyIGV4dHJhU3R5bGVzID0gc3R5bGVQYXJzZXIobm9kZSk7XG4gIHZhciB0cmFuc2Zvcm0gPSB0cmFuc2Zvcm1QYXJzZXIobm9kZSk7XG4gIHZhciBzeW1ib2wgPSBzeW1ib2xQYXJzZXIobm9kZSk7XG4gIHZhciBleHRyYUF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzUGFyc2VyKG5vZGUpO1xuICB2YXIgbWFzayA9IG1hc2tQYXJzZXIobm9kZSk7XG5cbiAgcmV0dXJuIHtcbiAgICBpY29uTmFtZTogaWNvbk5hbWUsXG4gICAgdGl0bGU6IG5vZGUuZ2V0QXR0cmlidXRlKCd0aXRsZScpLFxuICAgIHByZWZpeDogcHJlZml4LFxuICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgIHN5bWJvbDogc3ltYm9sLFxuICAgIG1hc2s6IG1hc2ssXG4gICAgZXh0cmE6IHtcbiAgICAgIGNsYXNzZXM6IGV4dHJhQ2xhc3NlcyxcbiAgICAgIHN0eWxlczogZXh0cmFTdHlsZXMsXG4gICAgICBhdHRyaWJ1dGVzOiBleHRyYUF0dHJpYnV0ZXNcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIE1pc3NpbmdJY29uKGVycm9yKSB7XG4gIHRoaXMubmFtZSA9ICdNaXNzaW5nSWNvbic7XG4gIHRoaXMubWVzc2FnZSA9IGVycm9yIHx8ICdJY29uIHVuYXZhaWxhYmxlJztcbiAgdGhpcy5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xufVxuXG5NaXNzaW5nSWNvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5NaXNzaW5nSWNvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNaXNzaW5nSWNvbjtcblxudmFyIEZJTEwgPSB7IGZpbGw6ICdjdXJyZW50Q29sb3InIH07XG52YXIgQU5JTUFUSU9OX0JBU0UgPSB7XG4gIGF0dHJpYnV0ZVR5cGU6ICdYTUwnLFxuICByZXBlYXRDb3VudDogJ2luZGVmaW5pdGUnLFxuICBkdXI6ICcycydcbn07XG52YXIgUklORyA9IHtcbiAgdGFnOiAncGF0aCcsXG4gIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCBGSUxMLCB7XG4gICAgZDogJ00xNTYuNSw0NDcuN2wtMTIuNiwyOS41Yy0xOC43LTkuNS0zNS45LTIxLjItNTEuNS0zNC45bDIyLjctMjIuN0MxMjcuNiw0MzAuNSwxNDEuNSw0NDAsMTU2LjUsNDQ3Ljd6IE00MC42LDI3Mkg4LjUgYzEuNCwyMS4yLDUuNCw0MS43LDExLjcsNjEuMUw1MCwzMjEuMkM0NS4xLDMwNS41LDQxLjgsMjg5LDQwLjYsMjcyeiBNNDAuNiwyNDBjMS40LTE4LjgsNS4yLTM3LDExLjEtNTQuMWwtMjkuNS0xMi42IEMxNC43LDE5NC4zLDEwLDIxNi43LDguNSwyNDBINDAuNnogTTY0LjMsMTU2LjVjNy44LTE0LjksMTcuMi0yOC44LDI4LjEtNDEuNUw2OS43LDkyLjNjLTEzLjcsMTUuNi0yNS41LDMyLjgtMzQuOSw1MS41IEw2NC4zLDE1Ni41eiBNMzk3LDQxOS42Yy0xMy45LDEyLTI5LjQsMjIuMy00Ni4xLDMwLjRsMTEuOSwyOS44YzIwLjctOS45LDM5LjgtMjIuNiw1Ni45LTM3LjZMMzk3LDQxOS42eiBNMTE1LDkyLjQgYzEzLjktMTIsMjkuNC0yMi4zLDQ2LjEtMzAuNGwtMTEuOS0yOS44Yy0yMC43LDkuOS0zOS44LDIyLjYtNTYuOCwzNy42TDExNSw5Mi40eiBNNDQ3LjcsMzU1LjVjLTcuOCwxNC45LTE3LjIsMjguOC0yOC4xLDQxLjUgbDIyLjcsMjIuN2MxMy43LTE1LjYsMjUuNS0zMi45LDM0LjktNTEuNUw0NDcuNywzNTUuNXogTTQ3MS40LDI3MmMtMS40LDE4LjgtNS4yLDM3LTExLjEsNTQuMWwyOS41LDEyLjYgYzcuNS0yMS4xLDEyLjItNDMuNSwxMy42LTY2LjhINDcxLjR6IE0zMjEuMiw0NjJjLTE1LjcsNS0zMi4yLDguMi00OS4yLDkuNHYzMi4xYzIxLjItMS40LDQxLjctNS40LDYxLjEtMTEuN0wzMjEuMiw0NjJ6IE0yNDAsNDcxLjRjLTE4LjgtMS40LTM3LTUuMi01NC4xLTExLjFsLTEyLjYsMjkuNWMyMS4xLDcuNSw0My41LDEyLjIsNjYuOCwxMy42VjQ3MS40eiBNNDYyLDE5MC44YzUsMTUuNyw4LjIsMzIuMiw5LjQsNDkuMmgzMi4xIGMtMS40LTIxLjItNS40LTQxLjctMTEuNy02MS4xTDQ2MiwxOTAuOHogTTkyLjQsMzk3Yy0xMi0xMy45LTIyLjMtMjkuNC0zMC40LTQ2LjFsLTI5LjgsMTEuOWM5LjksMjAuNywyMi42LDM5LjgsMzcuNiw1Ni45IEw5Mi40LDM5N3ogTTI3Miw0MC42YzE4LjgsMS40LDM2LjksNS4yLDU0LjEsMTEuMWwxMi42LTI5LjVDMzE3LjcsMTQuNywyOTUuMywxMCwyNzIsOC41VjQwLjZ6IE0xOTAuOCw1MCBjMTUuNy01LDMyLjItOC4yLDQ5LjItOS40VjguNWMtMjEuMiwxLjQtNDEuNyw1LjQtNjEuMSwxMS43TDE5MC44LDUweiBNNDQyLjMsOTIuM0w0MTkuNiwxMTVjMTIsMTMuOSwyMi4zLDI5LjQsMzAuNSw0Ni4xIGwyOS44LTExLjlDNDcwLDEyOC41LDQ1Ny4zLDEwOS40LDQ0Mi4zLDkyLjN6IE0zOTcsOTIuNGwyMi43LTIyLjdjLTE1LjYtMTMuNy0zMi44LTI1LjUtNTEuNS0zNC45bC0xMi42LDI5LjUgQzM3MC40LDcyLjEsMzg0LjQsODEuNSwzOTcsOTIuNHonXG4gIH0pXG59O1xudmFyIE9QQUNJVFlfQU5JTUFURSA9IF9leHRlbmRzKHt9LCBBTklNQVRJT05fQkFTRSwge1xuICBhdHRyaWJ1dGVOYW1lOiAnb3BhY2l0eSdcbn0pO1xudmFyIERPVCA9IHtcbiAgdGFnOiAnY2lyY2xlJyxcbiAgYXR0cmlidXRlczogX2V4dGVuZHMoe30sIEZJTEwsIHtcbiAgICBjeDogJzI1NicsXG4gICAgY3k6ICczNjQnLFxuICAgIHI6ICcyOCdcbiAgfSksXG4gIGNoaWxkcmVuOiBbeyB0YWc6ICdhbmltYXRlJywgYXR0cmlidXRlczogX2V4dGVuZHMoe30sIEFOSU1BVElPTl9CQVNFLCB7IGF0dHJpYnV0ZU5hbWU6ICdyJywgdmFsdWVzOiAnMjg7MTQ7Mjg7Mjg7MTQ7Mjg7JyB9KSB9LCB7IHRhZzogJ2FuaW1hdGUnLCBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgT1BBQ0lUWV9BTklNQVRFLCB7IHZhbHVlczogJzE7MDsxOzE7MDsxOycgfSkgfV1cbn07XG52YXIgUVVFU1RJT04gPSB7XG4gIHRhZzogJ3BhdGgnLFxuICBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgRklMTCwge1xuICAgIG9wYWNpdHk6ICcxJyxcbiAgICBkOiAnTTI2My43LDMxMmgtMTZjLTYuNiwwLTEyLTUuNC0xMi0xMmMwLTcxLDc3LjQtNjMuOSw3Ny40LTEwNy44YzAtMjAtMTcuOC00MC4yLTU3LjQtNDAuMmMtMjkuMSwwLTQ0LjMsOS42LTU5LjIsMjguNyBjLTMuOSw1LTExLjEsNi0xNi4yLDIuNGwtMTMuMS05LjJjLTUuNi0zLjktNi45LTExLjgtMi42LTE3LjJjMjEuMi0yNy4yLDQ2LjQtNDQuNyw5MS4yLTQ0LjdjNTIuMywwLDk3LjQsMjkuOCw5Ny40LDgwLjIgYzAsNjcuNi03Ny40LDYzLjUtNzcuNCwxMDcuOEMyNzUuNywzMDYuNiwyNzAuMywzMTIsMjYzLjcsMzEyeidcbiAgfSksXG4gIGNoaWxkcmVuOiBbeyB0YWc6ICdhbmltYXRlJywgYXR0cmlidXRlczogX2V4dGVuZHMoe30sIE9QQUNJVFlfQU5JTUFURSwgeyB2YWx1ZXM6ICcxOzA7MDswOzA7MTsnIH0pIH1dXG59O1xudmFyIEVYQ0xBTUFUSU9OID0ge1xuICB0YWc6ICdwYXRoJyxcbiAgYXR0cmlidXRlczogX2V4dGVuZHMoe30sIEZJTEwsIHtcbiAgICBvcGFjaXR5OiAnMCcsXG4gICAgZDogJ00yMzIuNSwxMzQuNWw3LDE2OGMwLjMsNi40LDUuNiwxMS41LDEyLDExLjVoOWM2LjQsMCwxMS43LTUuMSwxMi0xMS41bDctMTY4YzAuMy02LjgtNS4yLTEyLjUtMTItMTIuNWgtMjMgQzIzNy43LDEyMiwyMzIuMiwxMjcuNywyMzIuNSwxMzQuNXonXG4gIH0pLFxuICBjaGlsZHJlbjogW3sgdGFnOiAnYW5pbWF0ZScsIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCBPUEFDSVRZX0FOSU1BVEUsIHsgdmFsdWVzOiAnMDswOzE7MTswOzA7JyB9KSB9XVxufTtcblxudmFyIG1pc3NpbmcgPSB7IHRhZzogJ2cnLCBjaGlsZHJlbjogW1JJTkcsIERPVCwgUVVFU1RJT04sIEVYQ0xBTUFUSU9OXSB9O1xuXG52YXIgc3R5bGVzID0gbmFtZXNwYWNlLnN0eWxlcztcblxudmFyIExBWUVSU19URVhUX0NMQVNTTkFNRSA9ICdmYS1sYXllcnMtdGV4dCc7XG52YXIgRk9OVF9GQU1JTFlfUEFUVEVSTiA9IC9Gb250IEF3ZXNvbWUgNSAoU29saWR8UmVndWxhcnxMaWdodHxCcmFuZHMpLztcbnZhciBTVFlMRV9UT19QUkVGSVggPSB7XG4gICdTb2xpZCc6ICdmYXMnLFxuICAnUmVndWxhcic6ICdmYXInLFxuICAnTGlnaHQnOiAnZmFsJyxcbiAgJ0JyYW5kcyc6ICdmYWInXG59O1xuXG5mdW5jdGlvbiBmaW5kSWNvbihpY29uTmFtZSwgcHJlZml4KSB7XG4gIHZhciB2YWwgPSB7XG4gICAgZm91bmQ6IGZhbHNlLFxuICAgIHdpZHRoOiA1MTIsXG4gICAgaGVpZ2h0OiA1MTIsXG4gICAgaWNvbjogbWlzc2luZ1xuICB9O1xuXG4gIGlmIChpY29uTmFtZSAmJiBwcmVmaXggJiYgc3R5bGVzW3ByZWZpeF0gJiYgc3R5bGVzW3ByZWZpeF1baWNvbk5hbWVdKSB7XG4gICAgdmFyIGljb24gPSBzdHlsZXNbcHJlZml4XVtpY29uTmFtZV07XG4gICAgdmFyIHdpZHRoID0gaWNvblswXTtcbiAgICB2YXIgaGVpZ2h0ID0gaWNvblsxXTtcbiAgICB2YXIgdmVjdG9yRGF0YSA9IGljb24uc2xpY2UoNCk7XG5cbiAgICB2YWwgPSB7XG4gICAgICBmb3VuZDogdHJ1ZSxcbiAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgaWNvbjogeyB0YWc6ICdwYXRoJywgYXR0cmlidXRlczogeyBmaWxsOiAnY3VycmVudENvbG9yJywgZDogdmVjdG9yRGF0YVswXSB9IH1cbiAgICB9O1xuICB9IGVsc2UgaWYgKGljb25OYW1lICYmIHByZWZpeCAmJiAhY29uZmlnJDEuc2hvd01pc3NpbmdJY29ucykge1xuICAgIHRocm93IG5ldyBNaXNzaW5nSWNvbignSWNvbiBpcyBtaXNzaW5nIGZvciBwcmVmaXggJyArIHByZWZpeCArICcgd2l0aCBpY29uIG5hbWUgJyArIGljb25OYW1lKTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3ZnUmVwbGFjZW1lbnRNdXRhdGlvbihub2RlLCBub2RlTWV0YSkge1xuICB2YXIgaWNvbk5hbWUgPSBub2RlTWV0YS5pY29uTmFtZSxcbiAgICAgIHRpdGxlID0gbm9kZU1ldGEudGl0bGUsXG4gICAgICBwcmVmaXggPSBub2RlTWV0YS5wcmVmaXgsXG4gICAgICB0cmFuc2Zvcm0gPSBub2RlTWV0YS50cmFuc2Zvcm0sXG4gICAgICBzeW1ib2wgPSBub2RlTWV0YS5zeW1ib2wsXG4gICAgICBtYXNrID0gbm9kZU1ldGEubWFzayxcbiAgICAgIGV4dHJhID0gbm9kZU1ldGEuZXh0cmE7XG5cblxuICByZXR1cm4gW25vZGUsIG1ha2VJbmxpbmVTdmdBYnN0cmFjdCh7XG4gICAgaWNvbnM6IHtcbiAgICAgIG1haW46IGZpbmRJY29uKGljb25OYW1lLCBwcmVmaXgpLFxuICAgICAgbWFzazogZmluZEljb24obWFzay5pY29uTmFtZSwgbWFzay5wcmVmaXgpXG4gICAgfSxcbiAgICBwcmVmaXg6IHByZWZpeCxcbiAgICBpY29uTmFtZTogaWNvbk5hbWUsXG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgc3ltYm9sOiBzeW1ib2wsXG4gICAgbWFzazogbWFzayxcbiAgICB0aXRsZTogdGl0bGUsXG4gICAgZXh0cmE6IGV4dHJhLFxuICAgIHdhdGNoYWJsZTogdHJ1ZVxuICB9KV07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlTGF5ZXJzVGV4dChub2RlLCBub2RlTWV0YSkge1xuICB2YXIgdGl0bGUgPSBub2RlTWV0YS50aXRsZSxcbiAgICAgIHRyYW5zZm9ybSA9IG5vZGVNZXRhLnRyYW5zZm9ybSxcbiAgICAgIGV4dHJhID0gbm9kZU1ldGEuZXh0cmE7XG5cblxuICB2YXIgd2lkdGggPSBudWxsO1xuICB2YXIgaGVpZ2h0ID0gbnVsbDtcblxuICBpZiAoSVNfSUUpIHtcbiAgICB2YXIgY29tcHV0ZWRGb250U2l6ZSA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUobm9kZSkuZm9udFNpemUsIDEwKTtcbiAgICB2YXIgYm91bmRpbmdDbGllbnRSZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB3aWR0aCA9IGJvdW5kaW5nQ2xpZW50UmVjdC53aWR0aCAvIGNvbXB1dGVkRm9udFNpemU7XG4gICAgaGVpZ2h0ID0gYm91bmRpbmdDbGllbnRSZWN0LmhlaWdodCAvIGNvbXB1dGVkRm9udFNpemU7XG4gIH1cblxuICBpZiAoY29uZmlnJDEuYXV0b0ExMXkgJiYgIXRpdGxlKSB7XG4gICAgZXh0cmEuYXR0cmlidXRlc1snYXJpYS1oaWRkZW4nXSA9ICd0cnVlJztcbiAgfVxuXG4gIHJldHVybiBbbm9kZSwgbWFrZUxheWVyc1RleHRBYnN0cmFjdCh7XG4gICAgY29udGVudDogbm9kZS5pbm5lckhUTUwsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgIHRpdGxlOiB0aXRsZSxcbiAgICBleHRyYTogZXh0cmEsXG4gICAgd2F0Y2hhYmxlOiB0cnVlXG4gIH0pXTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVNdXRhdGlvbihub2RlKSB7XG4gIHZhciBub2RlTWV0YSA9IHBhcnNlTWV0YShub2RlKTtcblxuICBpZiAofm5vZGVNZXRhLmV4dHJhLmNsYXNzZXMuaW5kZXhPZihMQVlFUlNfVEVYVF9DTEFTU05BTUUpKSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlTGF5ZXJzVGV4dChub2RlLCBub2RlTWV0YSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlU3ZnUmVwbGFjZW1lbnRNdXRhdGlvbihub2RlLCBub2RlTWV0YSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlKG5vZGUpIHtcbiAgaWYgKHR5cGVvZiBub2RlLnJlbW92ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG5vZGUucmVtb3ZlKCk7XG4gIH0gZWxzZSBpZiAobm9kZSAmJiBub2RlLnBhcmVudE5vZGUpIHtcbiAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2VhcmNoUHNldWRvRWxlbWVudHMocm9vdCkge1xuICBpZiAoIUlTX0RPTSkgcmV0dXJuO1xuXG4gIHZhciBlbmQgPSBwZXJmLmJlZ2luKCdzZWFyY2hQc2V1ZG9FbGVtZW50cycpO1xuXG4gIGRpc2FibGVPYnNlcnZhdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgdG9BcnJheShyb290LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgWyc6YmVmb3JlJywgJzphZnRlciddLmZvckVhY2goZnVuY3Rpb24gKHBvcykge1xuICAgICAgICB2YXIgc3R5bGVzID0gV0lORE9XLmdldENvbXB1dGVkU3R5bGUobm9kZSwgcG9zKTtcbiAgICAgICAgdmFyIGZvbnRGYW1pbHkgPSBzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC1mYW1pbHknKS5tYXRjaChGT05UX0ZBTUlMWV9QQVRURVJOKTtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdG9BcnJheShub2RlLmNoaWxkcmVuKTtcbiAgICAgICAgdmFyIHBzZXVkb0VsZW1lbnQgPSBjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICByZXR1cm4gYy5nZXRBdHRyaWJ1dGUoREFUQV9GQV9QU0VVRE9fRUxFTUVOVCkgPT09IHBvcztcbiAgICAgICAgfSlbMF07XG5cbiAgICAgICAgaWYgKHBzZXVkb0VsZW1lbnQpIHtcbiAgICAgICAgICBpZiAocHNldWRvRWxlbWVudC5uZXh0U2libGluZyAmJiBwc2V1ZG9FbGVtZW50Lm5leHRTaWJsaW5nLnRleHRDb250ZW50LmluZGV4T2YoREFUQV9GQV9QU0VVRE9fRUxFTUVOVCkgPiAtMSkge1xuICAgICAgICAgICAgcmVtb3ZlKHBzZXVkb0VsZW1lbnQubmV4dFNpYmxpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZW1vdmUocHNldWRvRWxlbWVudCk7XG4gICAgICAgICAgcHNldWRvRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm9udEZhbWlseSAmJiAhcHNldWRvRWxlbWVudCkge1xuICAgICAgICAgIHZhciBjb250ZW50ID0gc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2NvbnRlbnQnKTtcbiAgICAgICAgICB2YXIgaSA9IERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgICAgICBpLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnJyArIFNUWUxFX1RPX1BSRUZJWFtmb250RmFtaWx5WzFdXSk7XG4gICAgICAgICAgaS5zZXRBdHRyaWJ1dGUoREFUQV9GQV9QU0VVRE9fRUxFTUVOVCwgcG9zKTtcbiAgICAgICAgICBpLmlubmVyVGV4dCA9IGNvbnRlbnQubGVuZ3RoID09PSAzID8gY29udGVudC5zdWJzdHIoMSwgMSkgOiBjb250ZW50O1xuICAgICAgICAgIGlmIChwb3MgPT09ICc6YmVmb3JlJykge1xuICAgICAgICAgICAgbm9kZS5pbnNlcnRCZWZvcmUoaSwgbm9kZS5maXJzdENoaWxkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBlbmQoKTtcbn1cblxuZnVuY3Rpb24gb25UcmVlKHJvb3QpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gIGlmICghSVNfRE9NKSByZXR1cm47XG5cbiAgdmFyIGh0bWxDbGFzc0xpc3QgPSBET0NVTUVOVC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0O1xuICB2YXIgaGNsQWRkID0gZnVuY3Rpb24gaGNsQWRkKHN1ZmZpeCkge1xuICAgIHJldHVybiBodG1sQ2xhc3NMaXN0LmFkZChIVE1MX0NMQVNTX0kyU1ZHX0JBU0VfQ0xBU1MgKyAnLScgKyBzdWZmaXgpO1xuICB9O1xuICB2YXIgaGNsUmVtb3ZlID0gZnVuY3Rpb24gaGNsUmVtb3ZlKHN1ZmZpeCkge1xuICAgIHJldHVybiBodG1sQ2xhc3NMaXN0LnJlbW92ZShIVE1MX0NMQVNTX0kyU1ZHX0JBU0VfQ0xBU1MgKyAnLScgKyBzdWZmaXgpO1xuICB9O1xuICB2YXIgcHJlZml4ZXMgPSBPYmplY3Qua2V5cyhzdHlsZXMpO1xuICB2YXIgcHJlZml4ZXNEb21RdWVyeSA9IFsnLicgKyBMQVlFUlNfVEVYVF9DTEFTU05BTUUgKyAnOm5vdChbJyArIERBVEFfRkFfSTJTVkcgKyAnXSknXS5jb25jYXQocHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuICcuJyArIHAgKyAnOm5vdChbJyArIERBVEFfRkFfSTJTVkcgKyAnXSknO1xuICB9KSkuam9pbignLCAnKTtcblxuICBpZiAocHJlZml4ZXNEb21RdWVyeS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2FuZGlkYXRlcyA9IHRvQXJyYXkocm9vdC5xdWVyeVNlbGVjdG9yQWxsKHByZWZpeGVzRG9tUXVlcnkpKTtcblxuICBpZiAoY2FuZGlkYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgaGNsQWRkKCdwZW5kaW5nJyk7XG4gICAgaGNsUmVtb3ZlKCdjb21wbGV0ZScpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtYXJrID0gcGVyZi5iZWdpbignb25UcmVlJyk7XG5cbiAgdmFyIG11dGF0aW9ucyA9IGNhbmRpZGF0ZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5vZGUpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIG11dGF0aW9uID0gZ2VuZXJhdGVNdXRhdGlvbihub2RlKTtcblxuICAgICAgaWYgKG11dGF0aW9uKSB7XG4gICAgICAgIGFjYy5wdXNoKG11dGF0aW9uKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoIVBST0RVQ1RJT04pIHtcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBNaXNzaW5nSWNvbikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSk7XG5cbiAgbWFyaygpO1xuXG4gIHBlcmZvcm0obXV0YXRpb25zLCBmdW5jdGlvbiAoKSB7XG4gICAgaGNsQWRkKCdhY3RpdmUnKTtcbiAgICBoY2xBZGQoJ2NvbXBsZXRlJyk7XG4gICAgaGNsUmVtb3ZlKCdwZW5kaW5nJyk7XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25Ob2RlKG5vZGUpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gIHZhciBtdXRhdGlvbiA9IGdlbmVyYXRlTXV0YXRpb24obm9kZSk7XG5cbiAgaWYgKG11dGF0aW9uKSB7XG4gICAgcGVyZm9ybShbbXV0YXRpb25dLCBjYWxsYmFjayk7XG4gIH1cbn1cblxudmFyIGJhc2VTdHlsZXMgPSBcInN2Zzpub3QoOnJvb3QpLnN2Zy1pbmxpbmUtLWZhIHtcXG4gIG92ZXJmbG93OiB2aXNpYmxlOyB9XFxuXFxuLnN2Zy1pbmxpbmUtLWZhIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIGhlaWdodDogMWVtO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogLS4xMjVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLWxnIHtcXG4gICAgdmVydGljYWwtYWxpZ246IC0uMjI1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTEge1xcbiAgICB3aWR0aDogMC4wNjI1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTIge1xcbiAgICB3aWR0aDogMC4xMjVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctMyB7XFxuICAgIHdpZHRoOiAwLjE4NzVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctNCB7XFxuICAgIHdpZHRoOiAwLjI1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTUge1xcbiAgICB3aWR0aDogMC4zMTI1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTYge1xcbiAgICB3aWR0aDogMC4zNzVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctNyB7XFxuICAgIHdpZHRoOiAwLjQzNzVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctOCB7XFxuICAgIHdpZHRoOiAwLjVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctOSB7XFxuICAgIHdpZHRoOiAwLjU2MjVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctMTAge1xcbiAgICB3aWR0aDogMC42MjVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctMTEge1xcbiAgICB3aWR0aDogMC42ODc1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTEyIHtcXG4gICAgd2lkdGg6IDAuNzVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctMTMge1xcbiAgICB3aWR0aDogMC44MTI1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTE0IHtcXG4gICAgd2lkdGg6IDAuODc1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTE1IHtcXG4gICAgd2lkdGg6IDAuOTM3NWVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtdy0xNiB7XFxuICAgIHdpZHRoOiAxZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTE3IHtcXG4gICAgd2lkdGg6IDEuMDYyNWVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtdy0xOCB7XFxuICAgIHdpZHRoOiAxLjEyNWVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtdy0xOSB7XFxuICAgIHdpZHRoOiAxLjE4NzVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctMjAge1xcbiAgICB3aWR0aDogMS4yNWVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtcHVsbC1sZWZ0IHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAuM2VtO1xcbiAgICB3aWR0aDogYXV0bzsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXB1bGwtcmlnaHQge1xcbiAgICBtYXJnaW4tbGVmdDogLjNlbTtcXG4gICAgd2lkdGg6IGF1dG87IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS1ib3JkZXIge1xcbiAgICBoZWlnaHQ6IDEuNWVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtbGkge1xcbiAgICB3aWR0aDogMmVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtZncge1xcbiAgICB3aWR0aDogMS4yNWVtOyB9XFxuXFxuLmZhLWxheWVycyBzdmcuc3ZnLWlubGluZS0tZmEge1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIG1hcmdpbjogYXV0bztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwOyB9XFxuXFxuLmZhLWxheWVycyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBoZWlnaHQ6IDFlbTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHZlcnRpY2FsLWFsaWduOiAtLjEyNWVtO1xcbiAgd2lkdGg6IDFlbTsgfVxcbiAgLmZhLWxheWVycyBzdmcuc3ZnLWlubGluZS0tZmEge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XFxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGNlbnRlcjsgfVxcblxcbi5mYS1sYXllcnMtdGV4dCwgLmZhLWxheWVycy1jb3VudGVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxcblxcbi5mYS1sYXllcnMtdGV4dCB7XFxuICBsZWZ0OiA1MCU7XFxuICB0b3A6IDUwJTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyOyB9XFxuXFxuLmZhLWxheWVycy1jb3VudGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjI1M2E7XFxuICBib3JkZXItcmFkaXVzOiAxZW07XFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGhlaWdodDogMS41ZW07XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIG1heC13aWR0aDogNWVtO1xcbiAgbWluLXdpZHRoOiAxLjVlbTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwYWRkaW5nOiAuMjVlbTtcXG4gIHJpZ2h0OiAwO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB0b3A6IDA7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHRvcCByaWdodDtcXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIHJpZ2h0OyB9XFxuXFxuLmZhLWxheWVycy1ib3R0b20tcmlnaHQge1xcbiAgYm90dG9tOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB0b3A6IGF1dG87XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbSByaWdodDtcXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tIHJpZ2h0OyB9XFxuXFxuLmZhLWxheWVycy1ib3R0b20tbGVmdCB7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IGF1dG87XFxuICB0b3A6IGF1dG87XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbSBsZWZ0O1xcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gbGVmdDsgfVxcblxcbi5mYS1sYXllcnMtdG9wLXJpZ2h0IHtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiB0b3AgcmlnaHQ7XFxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCByaWdodDsgfVxcblxcbi5mYS1sYXllcnMtdG9wLWxlZnQge1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiBhdXRvO1xcbiAgdG9wOiAwO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7IH1cXG5cXG4uZmEtbGcge1xcbiAgZm9udC1zaXplOiAxLjMzMzMzZW07XFxuICBsaW5lLWhlaWdodDogMC43NWVtO1xcbiAgdmVydGljYWwtYWxpZ246IC0uMDY2N2VtOyB9XFxuXFxuLmZhLXhzIHtcXG4gIGZvbnQtc2l6ZTogLjc1ZW07IH1cXG5cXG4uZmEtc20ge1xcbiAgZm9udC1zaXplOiAuODc1ZW07IH1cXG5cXG4uZmEtMXgge1xcbiAgZm9udC1zaXplOiAxZW07IH1cXG5cXG4uZmEtMngge1xcbiAgZm9udC1zaXplOiAyZW07IH1cXG5cXG4uZmEtM3gge1xcbiAgZm9udC1zaXplOiAzZW07IH1cXG5cXG4uZmEtNHgge1xcbiAgZm9udC1zaXplOiA0ZW07IH1cXG5cXG4uZmEtNXgge1xcbiAgZm9udC1zaXplOiA1ZW07IH1cXG5cXG4uZmEtNngge1xcbiAgZm9udC1zaXplOiA2ZW07IH1cXG5cXG4uZmEtN3gge1xcbiAgZm9udC1zaXplOiA3ZW07IH1cXG5cXG4uZmEtOHgge1xcbiAgZm9udC1zaXplOiA4ZW07IH1cXG5cXG4uZmEtOXgge1xcbiAgZm9udC1zaXplOiA5ZW07IH1cXG5cXG4uZmEtMTB4IHtcXG4gIGZvbnQtc2l6ZTogMTBlbTsgfVxcblxcbi5mYS1mdyB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aWR0aDogMS4yNWVtOyB9XFxuXFxuLmZhLXVsIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIG1hcmdpbi1sZWZ0OiAyLjVlbTtcXG4gIHBhZGRpbmctbGVmdDogMDsgfVxcbiAgLmZhLXVsID4gbGkge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG5cXG4uZmEtbGkge1xcbiAgbGVmdDogLTJlbTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdpZHRoOiAyZW07XFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDsgfVxcblxcbi5mYS1ib3JkZXIge1xcbiAgYm9yZGVyOiBzb2xpZCAwLjA4ZW0gI2VlZTtcXG4gIGJvcmRlci1yYWRpdXM6IC4xZW07XFxuICBwYWRkaW5nOiAuMmVtIC4yNWVtIC4xNWVtOyB9XFxuXFxuLmZhLXB1bGwtbGVmdCB7XFxuICBmbG9hdDogbGVmdDsgfVxcblxcbi5mYS1wdWxsLXJpZ2h0IHtcXG4gIGZsb2F0OiByaWdodDsgfVxcblxcbi5mYS5mYS1wdWxsLWxlZnQsXFxuLmZhcy5mYS1wdWxsLWxlZnQsXFxuLmZhci5mYS1wdWxsLWxlZnQsXFxuLmZhbC5mYS1wdWxsLWxlZnQsXFxuLmZhYi5mYS1wdWxsLWxlZnQge1xcbiAgbWFyZ2luLXJpZ2h0OiAuM2VtOyB9XFxuXFxuLmZhLmZhLXB1bGwtcmlnaHQsXFxuLmZhcy5mYS1wdWxsLXJpZ2h0LFxcbi5mYXIuZmEtcHVsbC1yaWdodCxcXG4uZmFsLmZhLXB1bGwtcmlnaHQsXFxuLmZhYi5mYS1wdWxsLXJpZ2h0IHtcXG4gIG1hcmdpbi1sZWZ0OiAuM2VtOyB9XFxuXFxuLmZhLXNwaW4ge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IGZhLXNwaW4gMnMgaW5maW5pdGUgbGluZWFyO1xcbiAgICAgICAgICBhbmltYXRpb246IGZhLXNwaW4gMnMgaW5maW5pdGUgbGluZWFyOyB9XFxuXFxuLmZhLXB1bHNlIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBmYS1zcGluIDFzIGluZmluaXRlIHN0ZXBzKDgpO1xcbiAgICAgICAgICBhbmltYXRpb246IGZhLXNwaW4gMXMgaW5maW5pdGUgc3RlcHMoOCk7IH1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgZmEtc3BpbiB7XFxuICAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfSB9XFxuXFxuQGtleWZyYW1lcyBmYS1zcGluIHtcXG4gIDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfVxcbiAgMTAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9IH1cXG5cXG4uZmEtcm90YXRlLTkwIHtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmFzaWNJbWFnZShyb3RhdGlvbj0xKVxcXCI7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpOyB9XFxuXFxuLmZhLXJvdGF0ZS0xODAge1xcbiAgLW1zLWZpbHRlcjogXFxcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5CYXNpY0ltYWdlKHJvdGF0aW9uPTIpXFxcIjtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTsgfVxcblxcbi5mYS1yb3RhdGUtMjcwIHtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmFzaWNJbWFnZShyb3RhdGlvbj0zKVxcXCI7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDI3MGRlZyk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDI3MGRlZyk7IH1cXG5cXG4uZmEtZmxpcC1ob3Jpem9udGFsIHtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmFzaWNJbWFnZShyb3RhdGlvbj0wLCBtaXJyb3I9MSlcXFwiO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKC0xLCAxKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgtMSwgMSk7IH1cXG5cXG4uZmEtZmxpcC12ZXJ0aWNhbCB7XFxuICAtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkJhc2ljSW1hZ2Uocm90YXRpb249MiwgbWlycm9yPTEpXFxcIjtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAtMSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgLTEpOyB9XFxuXFxuLmZhLWZsaXAtaG9yaXpvbnRhbC5mYS1mbGlwLXZlcnRpY2FsIHtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmFzaWNJbWFnZShyb3RhdGlvbj0yLCBtaXJyb3I9MSlcXFwiO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKC0xLCAtMSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoLTEsIC0xKTsgfVxcblxcbjpyb290IC5mYS1yb3RhdGUtOTAsXFxuOnJvb3QgLmZhLXJvdGF0ZS0xODAsXFxuOnJvb3QgLmZhLXJvdGF0ZS0yNzAsXFxuOnJvb3QgLmZhLWZsaXAtaG9yaXpvbnRhbCxcXG46cm9vdCAuZmEtZmxpcC12ZXJ0aWNhbCB7XFxuICAtd2Via2l0LWZpbHRlcjogbm9uZTtcXG4gICAgICAgICAgZmlsdGVyOiBub25lOyB9XFxuXFxuLmZhLXN0YWNrIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGhlaWdodDogMmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDJlbTsgfVxcblxcbi5mYS1zdGFjay0xeCxcXG4uZmEtc3RhY2stMngge1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIG1hcmdpbjogYXV0bztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwOyB9XFxuXFxuLnN2Zy1pbmxpbmUtLWZhLmZhLXN0YWNrLTF4IHtcXG4gIGhlaWdodDogMWVtO1xcbiAgd2lkdGg6IDFlbTsgfVxcblxcbi5zdmctaW5saW5lLS1mYS5mYS1zdGFjay0yeCB7XFxuICBoZWlnaHQ6IDJlbTtcXG4gIHdpZHRoOiAyZW07IH1cXG5cXG4uZmEtaW52ZXJzZSB7XFxuICBjb2xvcjogI2ZmZjsgfVxcblxcbi5zci1vbmx5IHtcXG4gIGJvcmRlcjogMDtcXG4gIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7XFxuICBoZWlnaHQ6IDFweDtcXG4gIG1hcmdpbjogLTFweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwYWRkaW5nOiAwO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDFweDsgfVxcblxcbi5zci1vbmx5LWZvY3VzYWJsZTphY3RpdmUsIC5zci1vbmx5LWZvY3VzYWJsZTpmb2N1cyB7XFxuICBjbGlwOiBhdXRvO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgbWFyZ2luOiAwO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICBwb3NpdGlvbjogc3RhdGljO1xcbiAgd2lkdGg6IGF1dG87IH1cXG5cIjtcblxudmFyIGNzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRmcCA9IERFRkFVTFRfRkFNSUxZX1BSRUZJWDtcbiAgdmFyIGRyYyA9IERFRkFVTFRfUkVQTEFDRU1FTlRfQ0xBU1M7XG4gIHZhciBmcCA9IGNvbmZpZyQxLmZhbWlseVByZWZpeDtcbiAgdmFyIHJjID0gY29uZmlnJDEucmVwbGFjZW1lbnRDbGFzcztcbiAgdmFyIHMgPSBiYXNlU3R5bGVzO1xuXG4gIGlmIChmcCAhPT0gZGZwIHx8IHJjICE9PSBkcmMpIHtcbiAgICB2YXIgZFBhdHQgPSBuZXcgUmVnRXhwKCdcXFxcLicgKyBkZnAgKyAnXFxcXC0nLCAnZycpO1xuICAgIHZhciByUGF0dCA9IG5ldyBSZWdFeHAoJ1xcXFwuJyArIGRyYywgJ2cnKTtcblxuICAgIHMgPSBzLnJlcGxhY2UoZFBhdHQsICcuJyArIGZwICsgJy0nKS5yZXBsYWNlKHJQYXR0LCAnLicgKyByYyk7XG4gIH1cblxuICByZXR1cm4gcztcbn07XG5cbmZ1bmN0aW9uIGRlZmluZShwcmVmaXgsIGljb25zKSB7XG4gIHZhciBub3JtYWxpemVkID0gT2JqZWN0LmtleXMoaWNvbnMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBpY29uTmFtZSkge1xuICAgIHZhciBpY29uID0gaWNvbnNbaWNvbk5hbWVdO1xuICAgIHZhciBleHBhbmRlZCA9ICEhaWNvbi5pY29uO1xuXG4gICAgaWYgKGV4cGFuZGVkKSB7XG4gICAgICBhY2NbaWNvbi5pY29uTmFtZV0gPSBpY29uLmljb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1tpY29uTmFtZV0gPSBpY29uO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgaWYgKHR5cGVvZiBuYW1lc3BhY2UuaG9va3MuYWRkUGFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hbWVzcGFjZS5ob29rcy5hZGRQYWNrKHByZWZpeCwgbm9ybWFsaXplZCk7XG4gIH0gZWxzZSB7XG4gICAgbmFtZXNwYWNlLnN0eWxlc1twcmVmaXhdID0gX2V4dGVuZHMoe30sIG5hbWVzcGFjZS5zdHlsZXNbcHJlZml4XSB8fCB7fSwgbm9ybWFsaXplZCk7XG4gIH1cblxuICAvKipcbiAgICogRm9udCBBd2Vzb21lIDQgdXNlZCB0aGUgcHJlZml4IG9mIGBmYWAgZm9yIGFsbCBpY29ucy4gV2l0aCB0aGUgaW50cm9kdWN0aW9uXG4gICAqIG9mIG5ldyBzdHlsZXMgd2UgbmVlZGVkIHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlbiB0aGVtLiBQcmVmaXggYGZhYCBpcyBub3cgYW4gYWxpYXNcbiAgICogZm9yIGBmYXNgIHNvIHdlJ2xsIGVhc3kgdGhlIHVwZ3JhZGUgcHJvY2VzcyBmb3Igb3VyIHVzZXJzIGJ5IGF1dG9tYXRpY2FsbHkgZGVmaW5pbmdcbiAgICogdGhpcyBhcyB3ZWxsLlxuICAgKi9cbiAgaWYgKHByZWZpeCA9PT0gJ2ZhcycpIHtcbiAgICBkZWZpbmUoJ2ZhJywgaWNvbnMpO1xuICB9XG59XG5cbnZhciBMaWJyYXJ5ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMaWJyYXJ5KCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIExpYnJhcnkpO1xuXG4gICAgdGhpcy5kZWZpbml0aW9ucyA9IHt9O1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoTGlicmFyeSwgW3tcbiAgICBrZXk6ICdhZGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZGVmaW5pdGlvbnMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgZGVmaW5pdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHZhciBhZGRpdGlvbnMgPSBkZWZpbml0aW9ucy5yZWR1Y2UodGhpcy5fcHVsbERlZmluaXRpb25zLCB7fSk7XG5cbiAgICAgIE9iamVjdC5rZXlzKGFkZGl0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF90aGlzLmRlZmluaXRpb25zW2tleV0gPSBfZXh0ZW5kcyh7fSwgX3RoaXMuZGVmaW5pdGlvbnNba2V5XSB8fCB7fSwgYWRkaXRpb25zW2tleV0pO1xuICAgICAgICBkZWZpbmUoa2V5LCBhZGRpdGlvbnNba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5kZWZpbml0aW9ucyA9IHt9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19wdWxsRGVmaW5pdGlvbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcHVsbERlZmluaXRpb25zKGFkZGl0aW9ucywgZGVmaW5pdGlvbikge1xuICAgICAgdmFyIG5vcm1hbGl6ZWQgPSBkZWZpbml0aW9uLnByZWZpeCAmJiBkZWZpbml0aW9uLmljb25OYW1lICYmIGRlZmluaXRpb24uaWNvbiA/IHsgMDogZGVmaW5pdGlvbiB9IDogZGVmaW5pdGlvbjtcblxuICAgICAgT2JqZWN0LmtleXMobm9ybWFsaXplZCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9ub3JtYWxpemVkJGtleSA9IG5vcm1hbGl6ZWRba2V5XSxcbiAgICAgICAgICAgIHByZWZpeCA9IF9ub3JtYWxpemVkJGtleS5wcmVmaXgsXG4gICAgICAgICAgICBpY29uTmFtZSA9IF9ub3JtYWxpemVkJGtleS5pY29uTmFtZSxcbiAgICAgICAgICAgIGljb24gPSBfbm9ybWFsaXplZCRrZXkuaWNvbjtcblxuXG4gICAgICAgIGlmICghYWRkaXRpb25zW3ByZWZpeF0pIGFkZGl0aW9uc1twcmVmaXhdID0ge307XG5cbiAgICAgICAgYWRkaXRpb25zW3ByZWZpeF1baWNvbk5hbWVdID0gaWNvbjtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYWRkaXRpb25zO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTGlicmFyeTtcbn0oKTtcblxuZnVuY3Rpb24gcHJlcEljb24oaWNvbikge1xuICB2YXIgd2lkdGggPSBpY29uWzBdO1xuICB2YXIgaGVpZ2h0ID0gaWNvblsxXTtcbiAgdmFyIHZlY3RvckRhdGEgPSBpY29uLnNsaWNlKDQpO1xuXG4gIHJldHVybiB7XG4gICAgZm91bmQ6IHRydWUsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIGljb246IHsgdGFnOiAncGF0aCcsIGF0dHJpYnV0ZXM6IHsgZmlsbDogJ2N1cnJlbnRDb2xvcicsIGQ6IHZlY3RvckRhdGFbMF0gfSB9XG4gIH07XG59XG5cbnZhciBfY3NzSW5zZXJ0ZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gZW5zdXJlQ3NzKCkge1xuICBpZiAoIWNvbmZpZyQxLmF1dG9BZGRDc3MpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIV9jc3NJbnNlcnRlZCkge1xuICAgIGluc2VydENzcyhjc3MoKSk7XG4gIH1cblxuICBfY3NzSW5zZXJ0ZWQgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBhcGlPYmplY3QodmFsLCBhYnN0cmFjdENyZWF0b3IpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbCwgJ2Fic3RyYWN0Jywge1xuICAgIGdldDogYWJzdHJhY3RDcmVhdG9yXG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWwsICdodG1sJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbC5hYnN0cmFjdC5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIHRvSHRtbChhKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbCwgJ25vZGUnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAoIUlTX0RPTSkgcmV0dXJuO1xuXG4gICAgICB2YXIgY29udGFpbmVyID0gRE9DVU1FTlQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gdmFsLmh0bWw7XG4gICAgICByZXR1cm4gY29udGFpbmVyLmNoaWxkcmVuO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZmluZEljb25EZWZpbml0aW9uKHBhcmFtcykge1xuICB2YXIgX3BhcmFtcyRwcmVmaXggPSBwYXJhbXMucHJlZml4LFxuICAgICAgcHJlZml4ID0gX3BhcmFtcyRwcmVmaXggPT09IHVuZGVmaW5lZCA/ICdmYScgOiBfcGFyYW1zJHByZWZpeCxcbiAgICAgIGljb25OYW1lID0gcGFyYW1zLmljb25OYW1lO1xuXG5cbiAgaWYgKCFpY29uTmFtZSkgcmV0dXJuO1xuXG4gIHJldHVybiBpY29uRnJvbU1hcHBpbmcobGlicmFyeS5kZWZpbml0aW9ucywgcHJlZml4LCBpY29uTmFtZSkgfHwgaWNvbkZyb21NYXBwaW5nKG5hbWVzcGFjZS5zdHlsZXMsIHByZWZpeCwgaWNvbk5hbWUpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlSWNvbnMobmV4dCkge1xuICByZXR1cm4gZnVuY3Rpb24gKG1heWJlSWNvbkRlZmluaXRpb24pIHtcbiAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBpY29uRGVmaW5pdGlvbiA9IChtYXliZUljb25EZWZpbml0aW9uIHx8IHt9KS5pY29uID8gbWF5YmVJY29uRGVmaW5pdGlvbiA6IGZpbmRJY29uRGVmaW5pdGlvbihtYXliZUljb25EZWZpbml0aW9uIHx8IHt9KTtcblxuICAgIHZhciBtYXNrID0gcGFyYW1zLm1hc2s7XG5cblxuICAgIGlmIChtYXNrKSB7XG4gICAgICBtYXNrID0gKG1hc2sgfHwge30pLmljb24gPyBtYXNrIDogZmluZEljb25EZWZpbml0aW9uKG1hc2sgfHwge30pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0KGljb25EZWZpbml0aW9uLCBfZXh0ZW5kcyh7fSwgcGFyYW1zLCB7IG1hc2s6IG1hc2sgfSkpO1xuICB9O1xufVxuXG52YXIgbGlicmFyeSA9IG5ldyBMaWJyYXJ5KCk7XG5cbnZhciBub0F1dG8gPSBmdW5jdGlvbiBub0F1dG8oKSB7XG4gIGF1dG8oZmFsc2UpO1xuICBkaXNjb25uZWN0KCk7XG59O1xuXG52YXIgZG9tID0ge1xuICBpMnN2ZzogZnVuY3Rpb24gaTJzdmcoKSB7XG4gICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBpZiAoSVNfRE9NKSB7XG4gICAgICBlbnN1cmVDc3MoKTtcblxuICAgICAgdmFyIF9wYXJhbXMkbm9kZSA9IHBhcmFtcy5ub2RlLFxuICAgICAgICAgIG5vZGUgPSBfcGFyYW1zJG5vZGUgPT09IHVuZGVmaW5lZCA/IERPQ1VNRU5UIDogX3BhcmFtcyRub2RlLFxuICAgICAgICAgIF9wYXJhbXMkY2FsbGJhY2sgPSBwYXJhbXMuY2FsbGJhY2ssXG4gICAgICAgICAgY2FsbGJhY2sgPSBfcGFyYW1zJGNhbGxiYWNrID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7fSA6IF9wYXJhbXMkY2FsbGJhY2s7XG5cblxuICAgICAgaWYgKGNvbmZpZyQxLnNlYXJjaFBzZXVkb0VsZW1lbnRzKSB7XG4gICAgICAgIHNlYXJjaFBzZXVkb0VsZW1lbnRzKG5vZGUpO1xuICAgICAgfVxuXG4gICAgICBvblRyZWUobm9kZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICBjc3M6IGNzcyxcblxuICBpbnNlcnRDc3M6IGZ1bmN0aW9uIGluc2VydENzcyQkMSgpIHtcbiAgICBpbnNlcnRDc3MoY3NzKCkpO1xuICB9XG59O1xuXG52YXIgcGFyc2UgPSB7XG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybVN0cmluZykge1xuICAgIHJldHVybiBwYXJzZVRyYW5zZm9ybVN0cmluZyh0cmFuc2Zvcm1TdHJpbmcpO1xuICB9XG59O1xuXG52YXIgaWNvbiA9IHJlc29sdmVJY29ucyhmdW5jdGlvbiAoaWNvbkRlZmluaXRpb24pIHtcbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBfcGFyYW1zJHRyYW5zZm9ybSA9IHBhcmFtcy50cmFuc2Zvcm0sXG4gICAgICB0cmFuc2Zvcm0gPSBfcGFyYW1zJHRyYW5zZm9ybSA9PT0gdW5kZWZpbmVkID8gbWVhbmluZ2xlc3NUcmFuc2Zvcm0gOiBfcGFyYW1zJHRyYW5zZm9ybSxcbiAgICAgIF9wYXJhbXMkc3ltYm9sID0gcGFyYW1zLnN5bWJvbCxcbiAgICAgIHN5bWJvbCA9IF9wYXJhbXMkc3ltYm9sID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wYXJhbXMkc3ltYm9sLFxuICAgICAgX3BhcmFtcyRtYXNrID0gcGFyYW1zLm1hc2ssXG4gICAgICBtYXNrID0gX3BhcmFtcyRtYXNrID09PSB1bmRlZmluZWQgPyBudWxsIDogX3BhcmFtcyRtYXNrLFxuICAgICAgX3BhcmFtcyR0aXRsZSA9IHBhcmFtcy50aXRsZSxcbiAgICAgIHRpdGxlID0gX3BhcmFtcyR0aXRsZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IF9wYXJhbXMkdGl0bGUsXG4gICAgICBfcGFyYW1zJGNsYXNzZXMgPSBwYXJhbXMuY2xhc3NlcyxcbiAgICAgIGNsYXNzZXMgPSBfcGFyYW1zJGNsYXNzZXMgPT09IHVuZGVmaW5lZCA/IFtdIDogX3BhcmFtcyRjbGFzc2VzLFxuICAgICAgX3BhcmFtcyRhdHRyaWJ1dGVzID0gcGFyYW1zLmF0dHJpYnV0ZXMsXG4gICAgICBhdHRyaWJ1dGVzID0gX3BhcmFtcyRhdHRyaWJ1dGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9wYXJhbXMkYXR0cmlidXRlcyxcbiAgICAgIF9wYXJhbXMkc3R5bGVzID0gcGFyYW1zLnN0eWxlcyxcbiAgICAgIHN0eWxlcyA9IF9wYXJhbXMkc3R5bGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9wYXJhbXMkc3R5bGVzO1xuXG5cbiAgaWYgKCFpY29uRGVmaW5pdGlvbikgcmV0dXJuO1xuXG4gIHZhciBwcmVmaXggPSBpY29uRGVmaW5pdGlvbi5wcmVmaXgsXG4gICAgICBpY29uTmFtZSA9IGljb25EZWZpbml0aW9uLmljb25OYW1lLFxuICAgICAgaWNvbiA9IGljb25EZWZpbml0aW9uLmljb247XG5cblxuICByZXR1cm4gYXBpT2JqZWN0KF9leHRlbmRzKHsgdHlwZTogJ2ljb24nIH0sIGljb25EZWZpbml0aW9uKSwgZnVuY3Rpb24gKCkge1xuICAgIGVuc3VyZUNzcygpO1xuXG4gICAgaWYgKGNvbmZpZyQxLmF1dG9BMTF5KSB7XG4gICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgYXR0cmlidXRlc1snYXJpYS1sYWJlbGxlZGJ5J10gPSBjb25maWckMS5yZXBsYWNlbWVudENsYXNzICsgJy10aXRsZS0nICsgbmV4dFVuaXF1ZUlkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdHRyaWJ1dGVzWydhcmlhLWhpZGRlbiddID0gJ3RydWUnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYWtlSW5saW5lU3ZnQWJzdHJhY3Qoe1xuICAgICAgaWNvbnM6IHtcbiAgICAgICAgbWFpbjogcHJlcEljb24oaWNvbiksXG4gICAgICAgIG1hc2s6IG1hc2sgPyBwcmVwSWNvbihtYXNrLmljb24pIDogeyBmb3VuZDogZmFsc2UsIHdpZHRoOiBudWxsLCBoZWlnaHQ6IG51bGwsIGljb246IHt9IH1cbiAgICAgIH0sXG4gICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgIGljb25OYW1lOiBpY29uTmFtZSxcbiAgICAgIHRyYW5zZm9ybTogX2V4dGVuZHMoe30sIG1lYW5pbmdsZXNzVHJhbnNmb3JtLCB0cmFuc2Zvcm0pLFxuICAgICAgc3ltYm9sOiBzeW1ib2wsXG4gICAgICB0aXRsZTogdGl0bGUsXG4gICAgICBleHRyYToge1xuICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG52YXIgdGV4dCA9IGZ1bmN0aW9uIHRleHQoY29udGVudCkge1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIF9wYXJhbXMkdHJhbnNmb3JtMiA9IHBhcmFtcy50cmFuc2Zvcm0sXG4gICAgICB0cmFuc2Zvcm0gPSBfcGFyYW1zJHRyYW5zZm9ybTIgPT09IHVuZGVmaW5lZCA/IG1lYW5pbmdsZXNzVHJhbnNmb3JtIDogX3BhcmFtcyR0cmFuc2Zvcm0yLFxuICAgICAgX3BhcmFtcyR0aXRsZTIgPSBwYXJhbXMudGl0bGUsXG4gICAgICB0aXRsZSA9IF9wYXJhbXMkdGl0bGUyID09PSB1bmRlZmluZWQgPyBudWxsIDogX3BhcmFtcyR0aXRsZTIsXG4gICAgICBfcGFyYW1zJGNsYXNzZXMyID0gcGFyYW1zLmNsYXNzZXMsXG4gICAgICBjbGFzc2VzID0gX3BhcmFtcyRjbGFzc2VzMiA9PT0gdW5kZWZpbmVkID8gW10gOiBfcGFyYW1zJGNsYXNzZXMyLFxuICAgICAgX3BhcmFtcyRhdHRyaWJ1dGVzMiA9IHBhcmFtcy5hdHRyaWJ1dGVzLFxuICAgICAgYXR0cmlidXRlcyA9IF9wYXJhbXMkYXR0cmlidXRlczIgPT09IHVuZGVmaW5lZCA/IHt9IDogX3BhcmFtcyRhdHRyaWJ1dGVzMixcbiAgICAgIF9wYXJhbXMkc3R5bGVzMiA9IHBhcmFtcy5zdHlsZXMsXG4gICAgICBzdHlsZXMgPSBfcGFyYW1zJHN0eWxlczIgPT09IHVuZGVmaW5lZCA/IHt9IDogX3BhcmFtcyRzdHlsZXMyO1xuXG5cbiAgcmV0dXJuIGFwaU9iamVjdCh7IHR5cGU6ICd0ZXh0JywgY29udGVudDogY29udGVudCB9LCBmdW5jdGlvbiAoKSB7XG4gICAgZW5zdXJlQ3NzKCk7XG5cbiAgICByZXR1cm4gbWFrZUxheWVyc1RleHRBYnN0cmFjdCh7XG4gICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgdHJhbnNmb3JtOiBfZXh0ZW5kcyh7fSwgbWVhbmluZ2xlc3NUcmFuc2Zvcm0sIHRyYW5zZm9ybSksXG4gICAgICB0aXRsZTogdGl0bGUsXG4gICAgICBleHRyYToge1xuICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICAgICAgY2xhc3NlczogW2NvbmZpZyQxLmZhbWlseVByZWZpeCArICctbGF5ZXJzLXRleHQnXS5jb25jYXQodG9Db25zdW1hYmxlQXJyYXkoY2xhc3NlcykpXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxudmFyIGxheWVyID0gZnVuY3Rpb24gbGF5ZXIoYXNzZW1ibGVyKSB7XG4gIHJldHVybiBhcGlPYmplY3QoeyB0eXBlOiAnbGF5ZXInIH0sIGZ1bmN0aW9uICgpIHtcbiAgICBlbnN1cmVDc3MoKTtcblxuICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuXG4gICAgYXNzZW1ibGVyKGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICBBcnJheS5pc0FycmF5KGFyZ3MpID8gYXJncy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoYS5hYnN0cmFjdCk7XG4gICAgICB9KSA6IGNoaWxkcmVuID0gY2hpbGRyZW4uY29uY2F0KGFyZ3MuYWJzdHJhY3QpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFt7XG4gICAgICB0YWc6ICdzcGFuJyxcbiAgICAgIGF0dHJpYnV0ZXM6IHsgY2xhc3M6IGNvbmZpZyQxLmZhbWlseVByZWZpeCArICctbGF5ZXJzJyB9LFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfV07XG4gIH0pO1xufTtcblxudmFyIGFwaSQxID0ge1xuICBub0F1dG86IG5vQXV0byxcbiAgZG9tOiBkb20sXG4gIGxpYnJhcnk6IGxpYnJhcnksXG4gIHBhcnNlOiBwYXJzZSxcbiAgZmluZEljb25EZWZpbml0aW9uOiBmaW5kSWNvbkRlZmluaXRpb24sXG4gIGljb246IGljb24sXG4gIHRleHQ6IHRleHQsXG4gIGxheWVyOiBsYXllclxufTtcblxudmFyIGF1dG9SZXBsYWNlID0gZnVuY3Rpb24gYXV0b1JlcGxhY2UoKSB7XG4gIGlmIChJU19ET00gJiYgY29uZmlnJDEuYXV0b1JlcGxhY2VTdmcpIGFwaSQxLmRvbS5pMnN2Zyh7IG5vZGU6IERPQ1VNRU5UIH0pO1xufTtcblxuZnVuY3Rpb24gYm9vdHN0cmFwKCkge1xuICBpZiAoSVNfQlJPV1NFUikge1xuICAgIGlmICghV0lORE9XLkZvbnRBd2Vzb21lKSB7XG4gICAgICBXSU5ET1cuRm9udEF3ZXNvbWUgPSBhcGkkMTtcbiAgICB9XG5cbiAgICBkb21yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMobmFtZXNwYWNlLnN0eWxlcykubGVuZ3RoID4gMCkge1xuICAgICAgICBhdXRvUmVwbGFjZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnJDEub2JzZXJ2ZU11dGF0aW9ucyAmJiB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvYnNlcnZlKHtcbiAgICAgICAgICB0cmVlQ2FsbGJhY2s6IG9uVHJlZSxcbiAgICAgICAgICBub2RlQ2FsbGJhY2s6IG9uTm9kZSxcbiAgICAgICAgICBwc2V1ZG9FbGVtZW50c0NhbGxiYWNrOiBzZWFyY2hQc2V1ZG9FbGVtZW50c1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5hbWVzcGFjZS5ob29rcyA9IF9leHRlbmRzKHt9LCBuYW1lc3BhY2UuaG9va3MsIHtcblxuICAgIGFkZFBhY2s6IGZ1bmN0aW9uIGFkZFBhY2socHJlZml4LCBpY29ucykge1xuICAgICAgbmFtZXNwYWNlLnN0eWxlc1twcmVmaXhdID0gX2V4dGVuZHMoe30sIG5hbWVzcGFjZS5zdHlsZXNbcHJlZml4XSB8fCB7fSwgaWNvbnMpO1xuXG4gICAgICBidWlsZCgpO1xuICAgICAgYXV0b1JlcGxhY2UoKTtcbiAgICB9LFxuXG4gICAgYWRkU2hpbXM6IGZ1bmN0aW9uIGFkZFNoaW1zKHNoaW1zKSB7XG4gICAgICB2YXIgX25hbWVzcGFjZSRzaGltcztcblxuICAgICAgKF9uYW1lc3BhY2Ukc2hpbXMgPSBuYW1lc3BhY2Uuc2hpbXMpLnB1c2guYXBwbHkoX25hbWVzcGFjZSRzaGltcywgdG9Db25zdW1hYmxlQXJyYXkoc2hpbXMpKTtcblxuICAgICAgYnVpbGQoKTtcbiAgICAgIGF1dG9SZXBsYWNlKCk7XG4gICAgfVxuICB9KTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwaSQxLCAnY29uZmlnJywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gY29uZmlnJDE7XG4gIH0sXG5cbiAgc2V0OiBmdW5jdGlvbiBzZXQobmV3Q29uZmlnKSB7XG4gICAgdXBkYXRlKG5ld0NvbmZpZyk7XG4gIH1cbn0pO1xuXG5pZiAoSVNfRE9NKSBidW5rZXIoYm9vdHN0cmFwKTtcblxudmFyIGNvbmZpZyA9IGFwaSQxLmNvbmZpZztcblxuZXhwb3J0IHsgY29uZmlnLCBpY29uLCBub0F1dG8sIGxheWVyLCB0ZXh0LCBsaWJyYXJ5LCBkb20sIHBhcnNlLCBmaW5kSWNvbkRlZmluaXRpb24gfTtcbmV4cG9ydCBkZWZhdWx0IGFwaSQxO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IFwiLi4vQnV0dG9uL19CdXR0b25TdHlsZXNoZWV0LnNjc3NcIjtcclxuaW1wb3J0IHsgTW91c2VFdmVudCwgTW91c2VFdmVudEhhbmRsZXIsIFJlYWN0RWxlbWVudCwgQ1NTUHJvcGVydGllcywgU3R5bGVIVE1MQXR0cmlidXRlcyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBCYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSB9IGZyb20gXCJjc3N0eXBlXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElCdXR0b25Qcm9wcyB7XHJcbiAgICBUZXh0OiBzdHJpbmc7XHJcbiAgICBDb2xvcjogc3RyaW5nO1xyXG59XHJcbmV4cG9ydCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SUJ1dHRvblByb3BzLCAge30+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJQnV0dG9uUHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcmVuZGVyKCk6IFJlYWN0RWxlbWVudDxJQnV0dG9uUHJvcHM+IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImN1c3RvbS1idXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiB0aGlzLnByb3BzLkNvbG9yIH19PlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+e3RoaXMucHJvcHMuVGV4dH08L3NwYW4+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIGZvciBpdGVyYXRpbmcgb3ZlciBhIGNvbGxlY3Rpb25cbiAqXG4gKiBAcGFyYW0gY29sbGVjdGlvblxuICogQHBhcmFtIGZuXG4gKi9cbmZ1bmN0aW9uIGVhY2goY29sbGVjdGlvbiwgZm4pIHtcbiAgICB2YXIgaSAgICAgID0gMCxcbiAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgIGNvbnQ7XG5cbiAgICBmb3IoaTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnQgPSBmbihjb2xsZWN0aW9uW2ldLCBpKTtcbiAgICAgICAgaWYoY29udCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrOyAvL2FsbG93IGVhcmx5IGV4aXRcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGRldGVybWluaW5nIHdoZXRoZXIgdGFyZ2V0IG9iamVjdCBpcyBhbiBhcnJheVxuICpcbiAqIEBwYXJhbSB0YXJnZXQgdGhlIG9iamVjdCB1bmRlciB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGFycmF5LCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh0YXJnZXQpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciB0YXJnZXQgb2JqZWN0IGlzIGEgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IHRoZSBvYmplY3QgdW5kZXIgdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBmdW5jdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbic7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGlzRnVuY3Rpb24gOiBpc0Z1bmN0aW9uLFxuICAgIGlzQXJyYXkgOiBpc0FycmF5LFxuICAgIGVhY2ggOiBlYWNoXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcbiIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICBpZiAoY2xhc3NvZih0aGlzKSAhPSBOQU1FKSB0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTtcbiIsInZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgdG1wID0ge307XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3OyB9KSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcbmltcG9ydCBcIi4uL0NvbXBhbnlEZXRhaWxzL19Db21wYW55RGV0YWlsc1N0eWxlc2hlZXQuc2Nzc1wiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi9CdXR0b24vQnV0dG9uXCI7XHJcbmltcG9ydCB7IE1vdXNlRXZlbnQsIE1vdXNlRXZlbnRIYW5kbGVyLCBSZWFjdEVsZW1lbnQgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNvbXBhbnlEZXRhaWxzUHJvcHMge1xyXG4gICAgVGl0bGU6IHN0cmluZztcclxuICAgIERlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgICBCdXR0b25UZXh0OiBzdHJpbmc7XHJcbiAgICBCdXR0b25Db2xvcjogc3RyaW5nO1xyXG4gICAgSW1hZ2VQYXRoOiBzdHJpbmc7XHJcbiAgICBJY29uUGF0aDogc3RyaW5nO1xyXG4gICAgUmV2ZXJzZWQ6IGJvb2xlYW47XHJcbn1cclxuZXhwb3J0IGNsYXNzIENvbXBhbnlEZXRhaWxzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElDb21wYW55RGV0YWlsc1Byb3BzLCAge30+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcmVuZGVyKCk6IFJlYWN0RWxlbWVudDxJQ29tcGFueURldGFpbHNQcm9wcz4ge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXt0aGlzLnByb3BzLlJldmVyc2VkID8gKFwicmV2ZXJzZWQgY29tcGFueS1kZXRhaWxcIikgOiAoXCJjb21wYW55LWRldGFpbFwiKX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbXBhbnktZGV0YWlsX19jb250YWluZXItZGVzY3JpcHRpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwiY29tcGFueS1kZXRhaWxfX3RpdGxlXCI+e3RoaXMucHJvcHMuVGl0bGV9PC9oNT5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJjb21wYW55LWRldGFpbF9fZGVzY3JpcHRpb25cIj57dGhpcy5wcm9wcy5EZXNjcmlwdGlvbn08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBUZXh0PXt0aGlzLnByb3BzLkJ1dHRvblRleHR9IENvbG9yPXt0aGlzLnByb3BzLkJ1dHRvbkNvbG9yfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbXBhbnktZGV0YWlsX19pbWFnZXNcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17dGhpcy5wcm9wcy5JbWFnZVBhdGh9IC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCBDb21wYW55RGV0YWlscztcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IFwiLi4vUm9ja2V0L19Sb2NrZXRTdHlsZXNoZWV0LnNjc3NcIjtcclxuaW1wb3J0IHsgTW91c2VFdmVudCwgTW91c2VFdmVudEhhbmRsZXIsIFJlYWN0RWxlbWVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUm9ja2V0U3RhdGUge1xyXG4gICAgcm9ja2V0SWduaXRlZDogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJvY2tldCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7fSwgIElSb2NrZXRTdGF0ZT4ge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHJvY2tldElnbml0ZWQ6IGZhbHNlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5pZ25pdGVSb2NrZXQgPSB0aGlzLmlnbml0ZVJvY2tldC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlUm9ja2V0Q2xpY2sgPSB0aGlzLmhhbmRsZVJvY2tldENsaWNrLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAuLi50aGlzLnN0YXRlLFxyXG4gICAgICAgICAgICByb2NrZXRJZ25pdGVkOiBmYWxzZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBpZD1cInJvY2tldFwiPlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUucm9ja2V0SWduaXRlZCA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImlnbml0aW9uXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICApIDogbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cInRocnVzdGVyXCIgb25DbGljaz17dGhpcy5oYW5kbGVSb2NrZXRDbGlja30+XHJcblxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwidGhydXN0ZXJDb25uZWN0b3JcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZVJvY2tldENsaWNrfT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBpZ25pdGVSb2NrZXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUsXHJcbiAgICAgICAgICAgIHJvY2tldElnbml0ZWQ6IHRydWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGhhbmRsZVJvY2tldENsaWNrKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaWduaXRlUm9ja2V0KCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgUm9ja2V0O1xyXG4iLCIvKipcbiAqIERlbGVnYXRlIHRvIGhhbmRsZSBhIG1lZGlhIHF1ZXJ5IGJlaW5nIG1hdGNoZWQgYW5kIHVubWF0Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gb3B0aW9ucy5tYXRjaCBjYWxsYmFjayBmb3Igd2hlbiB0aGUgbWVkaWEgcXVlcnkgaXMgbWF0Y2hlZFxuICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMudW5tYXRjaF0gY2FsbGJhY2sgZm9yIHdoZW4gdGhlIG1lZGlhIHF1ZXJ5IGlzIHVubWF0Y2hlZFxuICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMuc2V0dXBdIG9uZS10aW1lIGNhbGxiYWNrIHRyaWdnZXJlZCB0aGUgZmlyc3QgdGltZSBhIHF1ZXJ5IGlzIG1hdGNoZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZGVmZXJTZXR1cD1mYWxzZV0gc2hvdWxkIHRoZSBzZXR1cCBjYWxsYmFjayBiZSBydW4gaW1tZWRpYXRlbHksIHJhdGhlciB0aGFuIGZpcnN0IHRpbWUgcXVlcnkgaXMgbWF0Y2hlZD9cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBRdWVyeUhhbmRsZXIob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgIW9wdGlvbnMuZGVmZXJTZXR1cCAmJiB0aGlzLnNldHVwKCk7XG59XG5cblF1ZXJ5SGFuZGxlci5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvciA6IFF1ZXJ5SGFuZGxlcixcblxuICAgIC8qKlxuICAgICAqIGNvb3JkaW5hdGVzIHNldHVwIG9mIHRoZSBoYW5kbGVyXG4gICAgICpcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cbiAgICBzZXR1cCA6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZih0aGlzLm9wdGlvbnMuc2V0dXApIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZXR1cCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdGlhbGlzZWQgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjb29yZGluYXRlcyBzZXR1cCBhbmQgdHJpZ2dlcmluZyBvZiB0aGUgaGFuZGxlclxuICAgICAqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG4gICAgb24gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgIXRoaXMuaW5pdGlhbGlzZWQgJiYgdGhpcy5zZXR1cCgpO1xuICAgICAgICB0aGlzLm9wdGlvbnMubWF0Y2ggJiYgdGhpcy5vcHRpb25zLm1hdGNoKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNvb3JkaW5hdGVzIHRoZSB1bm1hdGNoIGV2ZW50IGZvciB0aGUgaGFuZGxlclxuICAgICAqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG4gICAgb2ZmIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy51bm1hdGNoICYmIHRoaXMub3B0aW9ucy51bm1hdGNoKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbGxlZCB3aGVuIGEgaGFuZGxlciBpcyB0byBiZSBkZXN0cm95ZWQuXG4gICAgICogZGVsZWdhdGVzIHRvIHRoZSBkZXN0cm95IG9yIHVubWF0Y2ggY2FsbGJhY2tzLCBkZXBlbmRpbmcgb24gYXZhaWxhYmlsaXR5LlxuICAgICAqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG4gICAgZGVzdHJveSA6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZGVzdHJveSA/IHRoaXMub3B0aW9ucy5kZXN0cm95KCkgOiB0aGlzLm9mZigpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkZXRlcm1pbmVzIGVxdWFsaXR5IGJ5IHJlZmVyZW5jZS5cbiAgICAgKiBpZiBvYmplY3QgaXMgc3VwcGxpZWQgY29tcGFyZSBvcHRpb25zLCBpZiBmdW5jdGlvbiwgY29tcGFyZSBtYXRjaCBjYWxsYmFja1xuICAgICAqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtvYmplY3QgfHwgZnVuY3Rpb259IFt0YXJnZXRdIHRoZSB0YXJnZXQgZm9yIGNvbXBhcmlzb25cbiAgICAgKi9cbiAgICBlcXVhbHMgOiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucyA9PT0gdGFyZ2V0IHx8IHRoaXMub3B0aW9ucy5tYXRjaCA9PT0gdGFyZ2V0O1xuICAgIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBRdWVyeUhhbmRsZXI7XG4iLCJ2YXIgUXVlcnlIYW5kbGVyID0gcmVxdWlyZSgnLi9RdWVyeUhhbmRsZXInKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9VdGlsJykuZWFjaDtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc2luZ2xlIG1lZGlhIHF1ZXJ5LCBtYW5hZ2VzIGl0J3Mgc3RhdGUgYW5kIHJlZ2lzdGVyZWQgaGFuZGxlcnMgZm9yIHRoaXMgcXVlcnlcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSB0aGUgbWVkaWEgcXVlcnkgc3RyaW5nXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1VuY29uZGl0aW9uYWw9ZmFsc2VdIHdoZXRoZXIgdGhlIG1lZGlhIHF1ZXJ5IHNob3VsZCBydW4gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBjb25kaXRpb25zIGFyZSBtZXQuIFByaW1hcmlseSBmb3IgaGVscGluZyBvbGRlciBicm93c2VycyBkZWFsIHdpdGggbW9iaWxlLWZpcnN0IGRlc2lnblxuICovXG5mdW5jdGlvbiBNZWRpYVF1ZXJ5KHF1ZXJ5LCBpc1VuY29uZGl0aW9uYWwpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgdGhpcy5pc1VuY29uZGl0aW9uYWwgPSBpc1VuY29uZGl0aW9uYWw7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIHRoaXMubXFsID0gd2luZG93Lm1hdGNoTWVkaWEocXVlcnkpO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMubGlzdGVuZXIgPSBmdW5jdGlvbihtcWwpIHtcbiAgICAgICAgLy8gQ2hyb21lIHBhc3NlcyBhbiBNZWRpYVF1ZXJ5TGlzdEV2ZW50IG9iamVjdCwgd2hpbGUgb3RoZXIgYnJvd3NlcnMgcGFzcyBNZWRpYVF1ZXJ5TGlzdCBkaXJlY3RseVxuICAgICAgICBzZWxmLm1xbCA9IG1xbC5jdXJyZW50VGFyZ2V0IHx8IG1xbDtcbiAgICAgICAgc2VsZi5hc3Nlc3MoKTtcbiAgICB9O1xuICAgIHRoaXMubXFsLmFkZExpc3RlbmVyKHRoaXMubGlzdGVuZXIpO1xufVxuXG5NZWRpYVF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuICAgIGNvbnN0dWN0b3IgOiBNZWRpYVF1ZXJ5LFxuXG4gICAgLyoqXG4gICAgICogYWRkIGEgaGFuZGxlciBmb3IgdGhpcyBxdWVyeSwgdHJpZ2dlcmluZyBpZiBhbHJlYWR5IGFjdGl2ZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVyLm1hdGNoIGNhbGxiYWNrIGZvciB3aGVuIHF1ZXJ5IGlzIGFjdGl2YXRlZFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtoYW5kbGVyLnVubWF0Y2hdIGNhbGxiYWNrIGZvciB3aGVuIHF1ZXJ5IGlzIGRlYWN0aXZhdGVkXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2hhbmRsZXIuc2V0dXBdIGNhbGxiYWNrIGZvciBpbW1lZGlhdGUgZXhlY3V0aW9uIHdoZW4gYSBxdWVyeSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtoYW5kbGVyLmRlZmVyU2V0dXA9ZmFsc2VdIHNob3VsZCB0aGUgc2V0dXAgY2FsbGJhY2sgYmUgZGVmZXJyZWQgdW50aWwgdGhlIGZpcnN0IHRpbWUgdGhlIGhhbmRsZXIgaXMgbWF0Y2hlZD9cbiAgICAgKi9cbiAgICBhZGRIYW5kbGVyIDogZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICB2YXIgcWggPSBuZXcgUXVlcnlIYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICB0aGlzLmhhbmRsZXJzLnB1c2gocWgpO1xuXG4gICAgICAgIHRoaXMubWF0Y2hlcygpICYmIHFoLm9uKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlbW92ZXMgdGhlIGdpdmVuIGhhbmRsZXIgZnJvbSB0aGUgY29sbGVjdGlvbiwgYW5kIGNhbGxzIGl0J3MgZGVzdHJveSBtZXRob2RzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdCB8fCBmdW5jdGlvbn0gaGFuZGxlciB0aGUgaGFuZGxlciB0byByZW1vdmVcbiAgICAgKi9cbiAgICByZW1vdmVIYW5kbGVyIDogZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzO1xuICAgICAgICBlYWNoKGhhbmRsZXJzLCBmdW5jdGlvbihoLCBpKSB7XG4gICAgICAgICAgICBpZihoLmVxdWFscyhoYW5kbGVyKSkge1xuICAgICAgICAgICAgICAgIGguZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAhaGFuZGxlcnMuc3BsaWNlKGksMSk7IC8vcmVtb3ZlIGZyb20gYXJyYXkgYW5kIGV4aXQgZWFjaCBlYXJseVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG1lZGlhIHF1ZXJ5IHNob3VsZCBiZSBjb25zaWRlcmVkIGEgbWF0Y2hcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgbWVkaWEgcXVlcnkgY2FuIGJlIGNvbnNpZGVyZWQgYSBtYXRjaCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgbWF0Y2hlcyA6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tcWwubWF0Y2hlcyB8fCB0aGlzLmlzVW5jb25kaXRpb25hbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBoYW5kbGVycyBhbmQgdW5iaW5kcyBldmVudHNcbiAgICAgKi9cbiAgICBjbGVhciA6IGZ1bmN0aW9uKCkge1xuICAgICAgICBlYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGhhbmRsZXIuZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tcWwucmVtb3ZlTGlzdGVuZXIodGhpcy5saXN0ZW5lcik7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMubGVuZ3RoID0gMDsgLy9jbGVhciBhcnJheVxuICAgIH0sXG5cbiAgICAvKlxuICAgICAgICAqIEFzc2Vzc2VzIHRoZSBxdWVyeSwgdHVybmluZyBvbiBhbGwgaGFuZGxlcnMgaWYgaXQgbWF0Y2hlcywgdHVybmluZyB0aGVtIG9mZiBpZiBpdCBkb2Vzbid0IG1hdGNoXG4gICAgICAgICovXG4gICAgYXNzZXNzIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSB0aGlzLm1hdGNoZXMoKSA/ICdvbicgOiAnb2ZmJztcblxuICAgICAgICBlYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGhhbmRsZXJbYWN0aW9uXSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lZGlhUXVlcnk7XG4iLCJ2YXIgTWVkaWFRdWVyeSA9IHJlcXVpcmUoJy4vTWVkaWFRdWVyeScpO1xudmFyIFV0aWwgPSByZXF1aXJlKCcuL1V0aWwnKTtcbnZhciBlYWNoID0gVXRpbC5lYWNoO1xudmFyIGlzRnVuY3Rpb24gPSBVdGlsLmlzRnVuY3Rpb247XG52YXIgaXNBcnJheSA9IFV0aWwuaXNBcnJheTtcblxuLyoqXG4gKiBBbGxvd3MgZm9yIHJlZ2lzdHJhdGlvbiBvZiBxdWVyeSBoYW5kbGVycy5cbiAqIE1hbmFnZXMgdGhlIHF1ZXJ5IGhhbmRsZXIncyBzdGF0ZSBhbmQgaXMgcmVzcG9uc2libGUgZm9yIHdpcmluZyB1cCBicm93c2VyIGV2ZW50c1xuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNZWRpYVF1ZXJ5RGlzcGF0Y2ggKCkge1xuICAgIGlmKCF3aW5kb3cubWF0Y2hNZWRpYSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hdGNoTWVkaWEgbm90IHByZXNlbnQsIGxlZ2FjeSBicm93c2VycyByZXF1aXJlIGEgcG9seWZpbGwnKTtcbiAgICB9XG5cbiAgICB0aGlzLnF1ZXJpZXMgPSB7fTtcbiAgICB0aGlzLmJyb3dzZXJJc0luY2FwYWJsZSA9ICF3aW5kb3cubWF0Y2hNZWRpYSgnb25seSBhbGwnKS5tYXRjaGVzO1xufVxuXG5NZWRpYVF1ZXJ5RGlzcGF0Y2gucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBNZWRpYVF1ZXJ5RGlzcGF0Y2gsXG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gbWVkaWEgcXVlcnlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBxIHRoZSBtZWRpYSBxdWVyeVxuICAgICAqIEBwYXJhbSB7b2JqZWN0IHx8IEFycmF5IHx8IEZ1bmN0aW9ufSBvcHRpb25zIGVpdGhlciBhIHNpbmdsZSBxdWVyeSBoYW5kbGVyIG9iamVjdCwgYSBmdW5jdGlvbiwgb3IgYW4gYXJyYXkgb2YgcXVlcnkgaGFuZGxlcnNcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLm1hdGNoIGZpcmVkIHdoZW4gcXVlcnkgbWF0Y2hlZFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLnVubWF0Y2hdIGZpcmVkIHdoZW4gYSBxdWVyeSBpcyBubyBsb25nZXIgbWF0Y2hlZFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLnNldHVwXSBmaXJlZCB3aGVuIGhhbmRsZXIgZmlyc3QgdHJpZ2dlcmVkXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWZlclNldHVwPWZhbHNlXSB3aGV0aGVyIHNldHVwIHNob3VsZCBiZSBydW4gaW1tZWRpYXRlbHkgb3IgZGVmZXJyZWQgdW50aWwgcXVlcnkgaXMgZmlyc3QgbWF0Y2hlZFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Nob3VsZERlZ3JhZGU9ZmFsc2VdIHdoZXRoZXIgdGhpcyBwYXJ0aWN1bGFyIG1lZGlhIHF1ZXJ5IHNob3VsZCBhbHdheXMgcnVuIG9uIGluY2FwYWJsZSBicm93c2Vyc1xuICAgICAqL1xuICAgIHJlZ2lzdGVyIDogZnVuY3Rpb24ocSwgb3B0aW9ucywgc2hvdWxkRGVncmFkZSkge1xuICAgICAgICB2YXIgcXVlcmllcyAgICAgICAgID0gdGhpcy5xdWVyaWVzLFxuICAgICAgICAgICAgaXNVbmNvbmRpdGlvbmFsID0gc2hvdWxkRGVncmFkZSAmJiB0aGlzLmJyb3dzZXJJc0luY2FwYWJsZTtcblxuICAgICAgICBpZighcXVlcmllc1txXSkge1xuICAgICAgICAgICAgcXVlcmllc1txXSA9IG5ldyBNZWRpYVF1ZXJ5KHEsIGlzVW5jb25kaXRpb25hbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL25vcm1hbGlzZSB0byBvYmplY3QgaW4gYW4gYXJyYXlcbiAgICAgICAgaWYoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHsgbWF0Y2ggOiBvcHRpb25zIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYoIWlzQXJyYXkob3B0aW9ucykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBbb3B0aW9uc107XG4gICAgICAgIH1cbiAgICAgICAgZWFjaChvcHRpb25zLCBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSB7IG1hdGNoIDogaGFuZGxlciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVlcmllc1txXS5hZGRIYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdW5yZWdpc3RlcnMgYSBxdWVyeSBhbmQgYWxsIGl0J3MgaGFuZGxlcnMsIG9yIGEgc3BlY2lmaWMgaGFuZGxlciBmb3IgYSBxdWVyeVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHEgdGhlIG1lZGlhIHF1ZXJ5IHRvIHRhcmdldFxuICAgICAqIEBwYXJhbSB7b2JqZWN0IHx8IGZ1bmN0aW9ufSBbaGFuZGxlcl0gc3BlY2lmaWMgaGFuZGxlciB0byB1bnJlZ2lzdGVyXG4gICAgICovXG4gICAgdW5yZWdpc3RlciA6IGZ1bmN0aW9uKHEsIGhhbmRsZXIpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW3FdO1xuXG4gICAgICAgIGlmKHF1ZXJ5KSB7XG4gICAgICAgICAgICBpZihoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkucmVtb3ZlSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHF1ZXJ5LmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucXVlcmllc1txXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWVkaWFRdWVyeURpc3BhdGNoO1xuIiwidmFyIE1lZGlhUXVlcnlEaXNwYXRjaCA9IHJlcXVpcmUoJy4vTWVkaWFRdWVyeURpc3BhdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBNZWRpYVF1ZXJ5RGlzcGF0Y2goKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICBhZnRlckNoYW5nZTogbnVsbCxcbiAgYXBwZW5kRG90czogZnVuY3Rpb24gYXBwZW5kRG90cyhkb3RzKSB7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJ1bFwiLFxuICAgICAgeyBzdHlsZTogeyBkaXNwbGF5OiBcImJsb2NrXCIgfSB9LFxuICAgICAgZG90c1xuICAgICk7XG4gIH0sXG4gIGFycm93czogdHJ1ZSxcbiAgYXV0b3BsYXk6IGZhbHNlLFxuICBhdXRvcGxheVNwZWVkOiAzMDAwLFxuICBiZWZvcmVDaGFuZ2U6IG51bGwsXG4gIGNlbnRlck1vZGU6IGZhbHNlLFxuICBjZW50ZXJQYWRkaW5nOiBcIjUwcHhcIixcbiAgY2xhc3NOYW1lOiBcIlwiLFxuICBjc3NFYXNlOiBcImVhc2VcIixcbiAgY3VzdG9tUGFnaW5nOiBmdW5jdGlvbiBjdXN0b21QYWdpbmcoaSkge1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiYnV0dG9uXCIsXG4gICAgICBudWxsLFxuICAgICAgaSArIDFcbiAgICApO1xuICB9LFxuICBkb3RzOiBmYWxzZSxcbiAgZG90c0NsYXNzOiBcInNsaWNrLWRvdHNcIixcbiAgZHJhZ2dhYmxlOiB0cnVlLFxuICBlYXNpbmc6IFwibGluZWFyXCIsXG4gIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgZmFkZTogZmFsc2UsXG4gIGZvY3VzT25TZWxlY3Q6IGZhbHNlLFxuICBpbmZpbml0ZTogdHJ1ZSxcbiAgaW5pdGlhbFNsaWRlOiAwLFxuICBsYXp5TG9hZDogbnVsbCxcbiAgbmV4dEFycm93OiBudWxsLFxuICBvbkVkZ2U6IG51bGwsXG4gIG9uSW5pdDogbnVsbCxcbiAgb25MYXp5TG9hZEVycm9yOiBudWxsLFxuICBvblJlSW5pdDogbnVsbCxcbiAgcGF1c2VPbkRvdHNIb3ZlcjogZmFsc2UsXG4gIHBhdXNlT25Gb2N1czogZmFsc2UsXG4gIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgcHJldkFycm93OiBudWxsLFxuICByZXNwb25zaXZlOiBudWxsLFxuICByb3dzOiAxLFxuICBydGw6IGZhbHNlLFxuICBzbGlkZTogXCJkaXZcIixcbiAgc2xpZGVzUGVyUm93OiAxLFxuICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgc2xpZGVzVG9TaG93OiAxLFxuICBzcGVlZDogNTAwLFxuICBzd2lwZTogdHJ1ZSxcbiAgc3dpcGVFdmVudDogbnVsbCxcbiAgc3dpcGVUb1NsaWRlOiBmYWxzZSxcbiAgdG91Y2hNb3ZlOiB0cnVlLFxuICB0b3VjaFRocmVzaG9sZDogNSxcbiAgdXNlQ1NTOiB0cnVlLFxuICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gIHZhcmlhYmxlV2lkdGg6IGZhbHNlLFxuICB2ZXJ0aWNhbDogZmFsc2UsXG4gIHdhaXRGb3JBbmltYXRlOiB0cnVlXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0UHJvcHM7IiwidmFyIGNhbWVsMmh5cGhlbiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0clxuICAgICAgICAgIC5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbWVsMmh5cGhlbjsiLCJ2YXIgY2FtZWwyaHlwaGVuID0gcmVxdWlyZSgnc3RyaW5nLWNvbnZlcnQvY2FtZWwyaHlwaGVuJyk7XG5cbnZhciBpc0RpbWVuc2lvbiA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gIHZhciByZSA9IC9baGVpZ2h0fHdpZHRoXSQvO1xuICByZXR1cm4gcmUudGVzdChmZWF0dXJlKTtcbn07XG5cbnZhciBvYmoybXEgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBtcSA9ICcnO1xuICB2YXIgZmVhdHVyZXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlLCBpbmRleCkge1xuICAgIHZhciB2YWx1ZSA9IG9ialtmZWF0dXJlXTtcbiAgICBmZWF0dXJlID0gY2FtZWwyaHlwaGVuKGZlYXR1cmUpO1xuICAgIC8vIEFkZCBweCB0byBkaW1lbnNpb24gZmVhdHVyZXNcbiAgICBpZiAoaXNEaW1lbnNpb24oZmVhdHVyZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZSArICdweCc7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgbXEgKz0gZmVhdHVyZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgbXEgKz0gJ25vdCAnICsgZmVhdHVyZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbXEgKz0gJygnICsgZmVhdHVyZSArICc6ICcgKyB2YWx1ZSArICcpJztcbiAgICB9XG4gICAgaWYgKGluZGV4IDwgZmVhdHVyZXMubGVuZ3RoLTEpIHtcbiAgICAgIG1xICs9ICcgYW5kICdcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbXE7XG59O1xuXG52YXIganNvbjJtcSA9IGZ1bmN0aW9uIChxdWVyeSkge1xuICB2YXIgbXEgPSAnJztcbiAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcXVlcnk7XG4gIH1cbiAgLy8gSGFuZGxpbmcgYXJyYXkgb2YgbWVkaWEgcXVlcmllc1xuICBpZiAocXVlcnkgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHF1ZXJ5LmZvckVhY2goZnVuY3Rpb24gKHEsIGluZGV4KSB7XG4gICAgICBtcSArPSBvYmoybXEocSk7XG4gICAgICBpZiAoaW5kZXggPCBxdWVyeS5sZW5ndGgtMSkge1xuICAgICAgICBtcSArPSAnLCAnXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1xO1xuICB9XG4gIC8vIEhhbmRsaW5nIHNpbmdsZSBtZWRpYSBxdWVyeVxuICByZXR1cm4gb2JqMm1xKHF1ZXJ5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ganNvbjJtcTsiLCIvKipcclxuICogQSBjb2xsZWN0aW9uIG9mIHNoaW1zIHRoYXQgcHJvdmlkZSBtaW5pbWFsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEVTNiBjb2xsZWN0aW9ucy5cclxuICpcclxuICogVGhlc2UgaW1wbGVtZW50YXRpb25zIGFyZSBub3QgbWVhbnQgdG8gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBSZXNpemVPYnNlcnZlclxyXG4gKiBtb2R1bGVzIGFzIHRoZXkgY292ZXIgb25seSBhIGxpbWl0ZWQgcmFuZ2Ugb2YgdXNlIGNhc2VzLlxyXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlcXVpcmUtanNkb2MsIHZhbGlkLWpzZG9jICovXG52YXIgTWFwU2hpbSA9IChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBNYXA7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGluZGV4IGluIHByb3ZpZGVkIGFycmF5IHRoYXQgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGtleS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5PEFycmF5Pn0gYXJyXHJcbiAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEluZGV4KGFyciwga2V5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAtMTtcblxuICAgICAgICBhcnIuc29tZShmdW5jdGlvbiAoZW50cnksIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGluZGV4O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYW5vbnltb3VzKCkge1xuICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgc2l6ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xuICAgICAgICBwcm90b3R5cGVBY2Nlc3NvcnMuc2l6ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2VudHJpZXNfXy5sZW5ndGg7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5fX2VudHJpZXNfX1tpbmRleF07XG5cbiAgICAgICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVsxXTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgodGhpcy5fX2VudHJpZXNfXywga2V5KTtcblxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX19baW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18ucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXG4gICAgICAgIGFub255bW91cy5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLl9fZW50cmllc19fO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgoZW50cmllcywga2V5KTtcblxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xuICAgICAgICAgICAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xuICAgICAgICBhbm9ueW1vdXMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAhIX5nZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xuICAgICAgICBhbm9ueW1vdXMucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXy5zcGxpY2UoMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgICAgICAgKiBAcGFyYW0geyp9IFtjdHg9bnVsbF1cclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjdHgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCBjdHggPT09IHZvaWQgMCApIGN0eCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gdGhpcyQxLl9fZW50cmllc19fOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGxpc3RbaV07XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGN0eCwgZW50cnlbMV0sIGVudHJ5WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggYW5vbnltb3VzLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICAgICAgcmV0dXJuIGFub255bW91cztcbiAgICB9KCkpO1xufSkoKTtcblxuLyoqXHJcbiAqIERldGVjdHMgd2hldGhlciB3aW5kb3cgYW5kIGRvY3VtZW50IG9iamVjdHMgYXJlIGF2YWlsYWJsZSBpbiBjdXJyZW50IGVudmlyb25tZW50LlxyXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCA9PT0gZG9jdW1lbnQ7XG5cbi8vIFJldHVybnMgZ2xvYmFsIG9iamVjdCBvZiBhIGN1cnJlbnQgZW52aXJvbm1lbnQuXG52YXIgZ2xvYmFsJDEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwuTWF0aCA9PT0gTWF0aCkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09PSBNYXRoKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PT0gTWF0aCkge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIHJldHVybiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufSkoKTtcblxuLyoqXHJcbiAqIEEgc2hpbSBmb3IgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB3aGljaCBmYWxscyBiYWNrIHRvIHRoZSBzZXRUaW1lb3V0IGlmXHJcbiAqIGZpcnN0IG9uZSBpcyBub3Qgc3VwcG9ydGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXF1ZXN0cycgaWRlbnRpZmllci5cclxuICovXG52YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIEl0J3MgcmVxdWlyZWQgdG8gdXNlIGEgYm91bmRlZCBmdW5jdGlvbiBiZWNhdXNlIElFIHNvbWV0aW1lcyB0aHJvd3NcbiAgICAgICAgLy8gYW4gXCJJbnZhbGlkIGNhbGxpbmcgb2JqZWN0XCIgZXJyb3IgaWYgckFGIGlzIGludm9rZWQgd2l0aG91dCB0aGUgZ2xvYmFsXG4gICAgICAgIC8vIG9iamVjdCBvbiB0aGUgbGVmdCBoYW5kIHNpZGUuXG4gICAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZChnbG9iYWwkMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFjayhEYXRlLm5vdygpKTsgfSwgMTAwMCAvIDYwKTsgfTtcbn0pKCk7XG5cbi8vIERlZmluZXMgbWluaW11bSB0aW1lb3V0IGJlZm9yZSBhZGRpbmcgYSB0cmFpbGluZyBjYWxsLlxudmFyIHRyYWlsaW5nVGltZW91dCA9IDI7XG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiB3aGljaCBlbnN1cmVzIHRoYXQgcHJvdmlkZWQgY2FsbGJhY2sgd2lsbCBiZVxyXG4gKiBpbnZva2VkIG9ubHkgb25jZSBkdXJpbmcgdGhlIHNwZWNpZmllZCBkZWxheSBwZXJpb2QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gYmUgaW52b2tlZCBhZnRlciB0aGUgZGVsYXkgcGVyaW9kLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgLSBEZWxheSBhZnRlciB3aGljaCB0byBpbnZva2UgY2FsbGJhY2suXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cclxuICovXG52YXIgdGhyb3R0bGUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgdmFyIGxlYWRpbmdDYWxsID0gZmFsc2UsXG4gICAgICAgIHRyYWlsaW5nQ2FsbCA9IGZhbHNlLFxuICAgICAgICBsYXN0Q2FsbFRpbWUgPSAwO1xuXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VzIHRoZSBvcmlnaW5hbCBjYWxsYmFjayBmdW5jdGlvbiBhbmQgc2NoZWR1bGVzIG5ldyBpbnZvY2F0aW9uIGlmXHJcbiAgICAgKiB0aGUgXCJwcm94eVwiIHdhcyBjYWxsZWQgZHVyaW5nIGN1cnJlbnQgcmVxdWVzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVQZW5kaW5nKCkge1xuICAgICAgICBpZiAobGVhZGluZ0NhbGwpIHtcbiAgICAgICAgICAgIGxlYWRpbmdDYWxsID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhaWxpbmdDYWxsKSB7XG4gICAgICAgICAgICBwcm94eSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBpbnZva2VkIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXkuIEl0IHdpbGwgZnVydGhlciBwb3N0cG9uZVxyXG4gICAgICogaW52b2NhdGlvbiBvZiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gZGVsZWdhdGluZyBpdCB0byB0aGVcclxuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVvdXRDYWxsYmFjaygpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEocmVzb2x2ZVBlbmRpbmcpO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogU2NoZWR1bGVzIGludm9jYXRpb24gb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJveHkoKSB7XG4gICAgICAgIHZhciB0aW1lU3RhbXAgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGlmIChsZWFkaW5nQ2FsbCkge1xuICAgICAgICAgICAgLy8gUmVqZWN0IGltbWVkaWF0ZWx5IGZvbGxvd2luZyBjYWxscy5cbiAgICAgICAgICAgIGlmICh0aW1lU3RhbXAgLSBsYXN0Q2FsbFRpbWUgPCB0cmFpbGluZ1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIG5ldyBjYWxsIHRvIGJlIGluIGludm9rZWQgd2hlbiB0aGUgcGVuZGluZyBvbmUgaXMgcmVzb2x2ZWQuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBmb3IgXCJ0cmFuc2l0aW9uc1wiIHdoaWNoIG5ldmVyIGFjdHVhbGx5IHN0YXJ0XG4gICAgICAgICAgICAvLyBpbW1lZGlhdGVseSBzbyB0aGVyZSBpcyBhIGNoYW5jZSB0aGF0IHdlIG1pZ2h0IG1pc3Mgb25lIGlmIGNoYW5nZVxuICAgICAgICAgICAgLy8gaGFwcGVucyBhbWlkcyB0aGUgcGVuZGluZyBpbnZvY2F0aW9uLlxuICAgICAgICAgICAgdHJhaWxpbmdDYWxsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlYWRpbmdDYWxsID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyYWlsaW5nQ2FsbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRpbWVvdXRDYWxsYmFjaywgZGVsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZVN0YW1wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm94eTtcbn07XG5cbi8vIE1pbmltdW0gZGVsYXkgYmVmb3JlIGludm9raW5nIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLlxudmFyIFJFRlJFU0hfREVMQVkgPSAyMDtcblxuLy8gQSBsaXN0IG9mIHN1YnN0cmluZ3Mgb2YgQ1NTIHByb3BlcnRpZXMgdXNlZCB0byBmaW5kIHRyYW5zaXRpb24gZXZlbnRzIHRoYXRcbi8vIG1pZ2h0IGFmZmVjdCBkaW1lbnNpb25zIG9mIG9ic2VydmVkIGVsZW1lbnRzLlxudmFyIHRyYW5zaXRpb25LZXlzID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3NpemUnLCAnd2VpZ2h0J107XG5cbi8vIENoZWNrIGlmIE11dGF0aW9uT2JzZXJ2ZXIgaXMgYXZhaWxhYmxlLlxudmFyIG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxyXG4gKiBTaW5nbGV0b24gY29udHJvbGxlciBjbGFzcyB3aGljaCBoYW5kbGVzIHVwZGF0ZXMgb2YgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2VzLlxyXG4gKi9cbnZhciBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcbiAgICB0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfID0gZmFsc2U7XG4gICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xuICAgIHRoaXMub2JzZXJ2ZXJzXyA9IFtdO1xuXG4gICAgdGhpcy5vblRyYW5zaXRpb25FbmRfID0gdGhpcy5vblRyYW5zaXRpb25FbmRfLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWZyZXNoID0gdGhyb3R0bGUodGhpcy5yZWZyZXNoLmJpbmQodGhpcyksIFJFRlJFU0hfREVMQVkpO1xufTtcblxuLyoqXHJcbiAqIEFkZHMgb2JzZXJ2ZXIgdG8gb2JzZXJ2ZXJzIGxpc3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJTUEl9IG9ic2VydmVyIC0gT2JzZXJ2ZXIgdG8gYmUgYWRkZWQuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblxuXG4vKipcclxuICogSG9sZHMgcmVmZXJlbmNlIHRvIHRoZSBjb250cm9sbGVyJ3MgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9XHJcbiAqL1xuXG5cbi8qKlxyXG4gKiBLZWVwcyByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlIG9mIE11dGF0aW9uT2JzZXJ2ZXIuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtNdXRhdGlvbk9ic2VydmVyfVxyXG4gKi9cblxuLyoqXHJcbiAqIEluZGljYXRlcyB3aGV0aGVyIERPTSBsaXN0ZW5lcnMgaGF2ZSBiZWVuIGFkZGVkLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmFkZE9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgaWYgKCF+dGhpcy5vYnNlcnZlcnNfLmluZGV4T2Yob2JzZXJ2ZXIpKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzXy5wdXNoKG9ic2VydmVyKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbGlzdGVuZXJzIGlmIHRoZXkgaGF2ZW4ndCBiZWVuIGFkZGVkIHlldC5cbiAgICBpZiAoIXRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICB0aGlzLmNvbm5lY3RfKCk7XG4gICAgfVxufTtcblxuLyoqXHJcbiAqIFJlbW92ZXMgb2JzZXJ2ZXIgZnJvbSBvYnNlcnZlcnMgbGlzdC5cclxuICpcclxuICogQHBhcmFtIHtSZXNpemVPYnNlcnZlclNQSX0gb2JzZXJ2ZXIgLSBPYnNlcnZlciB0byBiZSByZW1vdmVkLlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXztcbiAgICB2YXIgaW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcik7XG5cbiAgICAvLyBSZW1vdmUgb2JzZXJ2ZXIgaWYgaXQncyBwcmVzZW50IGluIHJlZ2lzdHJ5LlxuICAgIGlmICh+aW5kZXgpIHtcbiAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGxpc3RlbmVycyBpZiBjb250cm9sbGVyIGhhcyBubyBjb25uZWN0ZWQgb2JzZXJ2ZXJzLlxuICAgIGlmICghb2JzZXJ2ZXJzLmxlbmd0aCAmJiB0aGlzLmNvbm5lY3RlZF8pIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0XygpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBJbnZva2VzIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLiBJdCB3aWxsIGNvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpbnNvZmFyXHJcbiAqIGl0IGRldGVjdHMgY2hhbmdlcy5cclxuICpcclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGFuZ2VzRGV0ZWN0ZWQgPSB0aGlzLnVwZGF0ZU9ic2VydmVyc18oKTtcblxuICAgIC8vIENvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpZiBjaGFuZ2VzIGhhdmUgYmVlbiBkZXRlY3RlZCBhcyB0aGVyZSBtaWdodFxuICAgIC8vIGJlIGZ1dHVyZSBvbmVzIGNhdXNlZCBieSBDU1MgdHJhbnNpdGlvbnMuXG4gICAgaWYgKGNoYW5nZXNEZXRlY3RlZCkge1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG59O1xuXG4vKipcclxuICogVXBkYXRlcyBldmVyeSBvYnNlcnZlciBmcm9tIG9ic2VydmVycyBsaXN0IGFuZCBub3RpZmllcyB0aGVtIG9mIHF1ZXVlZFxyXG4gKiBlbnRyaWVzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBcInRydWVcIiBpZiBhbnkgb2JzZXJ2ZXIgaGFzIGRldGVjdGVkIGNoYW5nZXMgaW5cclxuICogIGRpbWVuc2lvbnMgb2YgaXQncyBlbGVtZW50cy5cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZU9ic2VydmVyc18gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ29sbGVjdCBvYnNlcnZlcnMgdGhhdCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXG4gICAgdmFyIGFjdGl2ZU9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXy5maWx0ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlci5nYXRoZXJBY3RpdmUoKSwgb2JzZXJ2ZXIuaGFzQWN0aXZlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBEZWxpdmVyIG5vdGlmaWNhdGlvbnMgaW4gYSBzZXBhcmF0ZSBjeWNsZSBpbiBvcmRlciB0byBhdm9pZCBhbnlcbiAgICAvLyBjb2xsaXNpb25zIGJldHdlZW4gb2JzZXJ2ZXJzLCBlLmcuIHdoZW4gbXVsdGlwbGUgaW5zdGFuY2VzIG9mXG4gICAgLy8gUmVzaXplT2JzZXJ2ZXIgYXJlIHRyYWNraW5nIHRoZSBzYW1lIGVsZW1lbnQgYW5kIHRoZSBjYWxsYmFjayBvZiBvbmVcbiAgICAvLyBvZiB0aGVtIGNoYW5nZXMgY29udGVudCBkaW1lbnNpb25zIG9mIHRoZSBvYnNlcnZlZCB0YXJnZXQuIFNvbWV0aW1lc1xuICAgIC8vIHRoaXMgbWF5IHJlc3VsdCBpbiBub3RpZmljYXRpb25zIGJlaW5nIGJsb2NrZWQgZm9yIHRoZSByZXN0IG9mIG9ic2VydmVycy5cbiAgICBhY3RpdmVPYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHsgcmV0dXJuIG9ic2VydmVyLmJyb2FkY2FzdEFjdGl2ZSgpOyB9KTtcblxuICAgIHJldHVybiBhY3RpdmVPYnNlcnZlcnMubGVuZ3RoID4gMDtcbn07XG5cbi8qKlxyXG4gKiBJbml0aWFsaXplcyBET00gbGlzdGVuZXJzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmNvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgcnVubmluZyBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50IG9yIGlmIGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYmVlbiBhbHJlYWR5IGFkZGVkLlxuICAgIGlmICghaXNCcm93c2VyIHx8IHRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU3Vic2NyaXB0aW9uIHRvIHRoZSBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBpcyB1c2VkIGFzIGEgd29ya2Fyb3VuZCBmb3JcbiAgICAvLyBkZWxheWVkIHRyYW5zaXRpb25zLiBUaGlzIHdheSBpdCdzIHBvc3NpYmxlIHRvIGNhcHR1cmUgYXQgbGVhc3QgdGhlXG4gICAgLy8gZmluYWwgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlZnJlc2gpO1xuXG4gICAgaWYgKG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLnJlZnJlc2gpO1xuXG4gICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB0aGlzLnJlZnJlc2gpO1xuXG4gICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuY29ubmVjdGVkXyA9IHRydWU7XG59O1xuXG4vKipcclxuICogUmVtb3ZlcyBET00gbGlzdGVuZXJzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmRpc2Nvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgcnVubmluZyBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50IG9yIGlmIGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYmVlbiBhbHJlYWR5IHJlbW92ZWQuXG4gICAgaWYgKCFpc0Jyb3dzZXIgfHwgIXRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMub25UcmFuc2l0aW9uRW5kXyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVmcmVzaCk7XG5cbiAgICBpZiAodGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8pIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8uZGlzY29ubmVjdCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHRoaXMucmVmcmVzaCk7XG4gICAgfVxuXG4gICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xuICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSBmYWxzZTtcbiAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcbn07XG5cbi8qKlxyXG4gKiBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBoYW5kbGVyLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge1RyYW5zaXRpb25FdmVudH0gZXZlbnRcclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5vblRyYW5zaXRpb25FbmRfID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gcmVmLnByb3BlcnR5TmFtZTsgaWYgKCBwcm9wZXJ0eU5hbWUgPT09IHZvaWQgMCApIHByb3BlcnR5TmFtZSA9ICcnO1xuXG4gICAgLy8gRGV0ZWN0IHdoZXRoZXIgdHJhbnNpdGlvbiBtYXkgYWZmZWN0IGRpbWVuc2lvbnMgb2YgYW4gZWxlbWVudC5cbiAgICB2YXIgaXNSZWZsb3dQcm9wZXJ0eSA9IHRyYW5zaXRpb25LZXlzLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gISF+cHJvcGVydHlOYW1lLmluZGV4T2Yoa2V5KTtcbiAgICB9KTtcblxuICAgIGlmIChpc1JlZmxvd1Byb3BlcnR5KSB7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBSZXR1cm5zIGluc3RhbmNlIG9mIHRoZSBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZV8pIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZV8gPSBuZXcgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VfO1xufTtcblxuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmluc3RhbmNlXyA9IG51bGw7XG5cbi8qKlxyXG4gKiBEZWZpbmVzIG5vbi13cml0YWJsZS9lbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgdGhlIHByb3ZpZGVkIHRhcmdldCBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgLSBPYmplY3QgZm9yIHdoaWNoIHRvIGRlZmluZSBwcm9wZXJ0aWVzLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBQcm9wZXJ0aWVzIHRvIGJlIGRlZmluZWQuXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRhcmdldCBvYmplY3QuXHJcbiAqL1xudmFyIGRlZmluZUNvbmZpZ3VyYWJsZSA9IChmdW5jdGlvbiAodGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gT2JqZWN0LmtleXMocHJvcHMpOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIga2V5ID0gbGlzdFtpXTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wc1trZXldLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbn0pO1xuXG4vKipcclxuICogUmV0dXJucyB0aGUgZ2xvYmFsIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggcHJvdmlkZWQgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKi9cbnZhciBnZXRXaW5kb3dPZiA9IChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgLy8gQXNzdW1lIHRoYXQgdGhlIGVsZW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgTm9kZSwgd2hpY2ggbWVhbnMgdGhhdCBpdFxuICAgIC8vIGhhcyB0aGUgXCJvd25lckRvY3VtZW50XCIgcHJvcGVydHkgZnJvbSB3aGljaCB3ZSBjYW4gcmV0cmlldmUgYVxuICAgIC8vIGNvcnJlc3BvbmRpbmcgZ2xvYmFsIG9iamVjdC5cbiAgICB2YXIgb3duZXJHbG9iYWwgPSB0YXJnZXQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cbiAgICAvLyBSZXR1cm4gdGhlIGxvY2FsIGdsb2JhbCBvYmplY3QgaWYgaXQncyBub3QgcG9zc2libGUgZXh0cmFjdCBvbmUgZnJvbVxuICAgIC8vIHByb3ZpZGVkIGVsZW1lbnQuXG4gICAgcmV0dXJuIG93bmVyR2xvYmFsIHx8IGdsb2JhbCQxO1xufSk7XG5cbi8vIFBsYWNlaG9sZGVyIG9mIGFuIGVtcHR5IGNvbnRlbnQgcmVjdGFuZ2xlLlxudmFyIGVtcHR5UmVjdCA9IGNyZWF0ZVJlY3RJbml0KDAsIDAsIDAsIDApO1xuXG4vKipcclxuICogQ29udmVydHMgcHJvdmlkZWQgc3RyaW5nIHRvIGEgbnVtYmVyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xuZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xufVxuXG4vKipcclxuICogRXh0cmFjdHMgYm9yZGVycyBzaXplIGZyb20gcHJvdmlkZWQgc3R5bGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xyXG4gKiBAcGFyYW0gey4uLnN0cmluZ30gcG9zaXRpb25zIC0gQm9yZGVycyBwb3NpdGlvbnMgKHRvcCwgcmlnaHQsIC4uLilcclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMpIHtcbiAgICB2YXIgcG9zaXRpb25zID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgcG9zaXRpb25zWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgcmV0dXJuIHBvc2l0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHNpemUsIHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1snYm9yZGVyLScgKyBwb3NpdGlvbiArICctd2lkdGgnXTtcblxuICAgICAgICByZXR1cm4gc2l6ZSArIHRvRmxvYXQodmFsdWUpO1xuICAgIH0sIDApO1xufVxuXG4vKipcclxuICogRXh0cmFjdHMgcGFkZGluZ3Mgc2l6ZXMgZnJvbSBwcm92aWRlZCBzdHlsZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhZGRpbmdzIGJveC5cclxuICovXG5mdW5jdGlvbiBnZXRQYWRkaW5ncyhzdHlsZXMpIHtcbiAgICB2YXIgcG9zaXRpb25zID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcbiAgICB2YXIgcGFkZGluZ3MgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gcG9zaXRpb25zOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBsaXN0W2ldO1xuXG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1sncGFkZGluZy0nICsgcG9zaXRpb25dO1xuXG4gICAgICAgIHBhZGRpbmdzW3Bvc2l0aW9uXSA9IHRvRmxvYXQodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBwYWRkaW5ncztcbn1cblxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgY29udGVudCByZWN0YW5nbGUgb2YgcHJvdmlkZWQgU1ZHIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U1ZHR3JhcGhpY3NFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHdoaWNoIG5lZWRzXHJcbiAqICAgICAgdG8gYmUgY2FsY3VsYXRlZC5cclxuICogQHJldHVybnMge0RPTVJlY3RJbml0fVxyXG4gKi9cbmZ1bmN0aW9uIGdldFNWR0NvbnRlbnRSZWN0KHRhcmdldCkge1xuICAgIHZhciBiYm94ID0gdGFyZ2V0LmdldEJCb3goKTtcblxuICAgIHJldHVybiBjcmVhdGVSZWN0SW5pdCgwLCAwLCBiYm94LndpZHRoLCBiYm94LmhlaWdodCk7XG59XG5cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHByb3ZpZGVkIEhUTUxFbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGZvciB3aGljaCB0byBjYWxjdWxhdGUgdGhlIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpIHtcbiAgICAvLyBDbGllbnQgd2lkdGggJiBoZWlnaHQgcHJvcGVydGllcyBjYW4ndCBiZVxuICAgIC8vIHVzZWQgZXhjbHVzaXZlbHkgYXMgdGhleSBwcm92aWRlIHJvdW5kZWQgdmFsdWVzLlxuICAgIHZhciBjbGllbnRXaWR0aCA9IHRhcmdldC5jbGllbnRXaWR0aDtcbiAgICB2YXIgY2xpZW50SGVpZ2h0ID0gdGFyZ2V0LmNsaWVudEhlaWdodDtcblxuICAgIC8vIEJ5IHRoaXMgY29uZGl0aW9uIHdlIGNhbiBjYXRjaCBhbGwgbm9uLXJlcGxhY2VkIGlubGluZSwgaGlkZGVuIGFuZFxuICAgIC8vIGRldGFjaGVkIGVsZW1lbnRzLiBUaG91Z2ggZWxlbWVudHMgd2l0aCB3aWR0aCAmIGhlaWdodCBwcm9wZXJ0aWVzIGxlc3NcbiAgICAvLyB0aGFuIDAuNSB3aWxsIGJlIGRpc2NhcmRlZCBhcyB3ZWxsLlxuICAgIC8vXG4gICAgLy8gV2l0aG91dCBpdCB3ZSB3b3VsZCBuZWVkIHRvIGltcGxlbWVudCBzZXBhcmF0ZSBtZXRob2RzIGZvciBlYWNoIG9mXG4gICAgLy8gdGhvc2UgY2FzZXMgYW5kIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHBlcmZvcm0gYSBwcmVjaXNlIGFuZCBwZXJmb3JtYW5jZVxuICAgIC8vIGVmZmVjdGl2ZSB0ZXN0IGZvciBoaWRkZW4gZWxlbWVudHMuIEUuZy4gZXZlbiBqUXVlcnkncyAnOnZpc2libGUnIGZpbHRlclxuICAgIC8vIGdpdmVzIHdyb25nIHJlc3VsdHMgZm9yIGVsZW1lbnRzIHdpdGggd2lkdGggJiBoZWlnaHQgbGVzcyB0aGFuIDAuNS5cbiAgICBpZiAoIWNsaWVudFdpZHRoICYmICFjbGllbnRIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzID0gZ2V0V2luZG93T2YodGFyZ2V0KS5nZXRDb21wdXRlZFN0eWxlKHRhcmdldCk7XG4gICAgdmFyIHBhZGRpbmdzID0gZ2V0UGFkZGluZ3Moc3R5bGVzKTtcbiAgICB2YXIgaG9yaXpQYWQgPSBwYWRkaW5ncy5sZWZ0ICsgcGFkZGluZ3MucmlnaHQ7XG4gICAgdmFyIHZlcnRQYWQgPSBwYWRkaW5ncy50b3AgKyBwYWRkaW5ncy5ib3R0b207XG5cbiAgICAvLyBDb21wdXRlZCBzdHlsZXMgb2Ygd2lkdGggJiBoZWlnaHQgYXJlIGJlaW5nIHVzZWQgYmVjYXVzZSB0aGV5IGFyZSB0aGVcbiAgICAvLyBvbmx5IGRpbWVuc2lvbnMgYXZhaWxhYmxlIHRvIEpTIHRoYXQgY29udGFpbiBub24tcm91bmRlZCB2YWx1ZXMuIEl0IGNvdWxkXG4gICAgLy8gYmUgcG9zc2libGUgdG8gdXRpbGl6ZSB0aGUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlmIG9ubHkgaXQncyBkYXRhIHdhc24ndFxuICAgIC8vIGFmZmVjdGVkIGJ5IENTUyB0cmFuc2Zvcm1hdGlvbnMgbGV0IGFsb25lIHBhZGRpbmdzLCBib3JkZXJzIGFuZCBzY3JvbGwgYmFycy5cbiAgICB2YXIgd2lkdGggPSB0b0Zsb2F0KHN0eWxlcy53aWR0aCksXG4gICAgICAgIGhlaWdodCA9IHRvRmxvYXQoc3R5bGVzLmhlaWdodCk7XG5cbiAgICAvLyBXaWR0aCAmIGhlaWdodCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHdoZW4gdGhlICdib3JkZXItYm94JyBib3hcbiAgICAvLyBtb2RlbCBpcyBhcHBsaWVkIChleGNlcHQgZm9yIElFKS5cbiAgICBpZiAoc3R5bGVzLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgIC8vIEZvbGxvd2luZyBjb25kaXRpb25zIGFyZSByZXF1aXJlZCB0byBoYW5kbGUgSW50ZXJuZXQgRXhwbG9yZXIgd2hpY2hcbiAgICAgICAgLy8gZG9lc24ndCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHRvIGNvbXB1dGVkIENTUyBkaW1lbnNpb25zLlxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBjYW4gc2F5IHRoYXQgaWYgQ1NTIGRpbWVuc2lvbnMgKyBwYWRkaW5ncyBhcmUgZXF1YWwgdG8gdGhlIFwiY2xpZW50XCJcbiAgICAgICAgLy8gcHJvcGVydGllcyB0aGVuIGl0J3MgZWl0aGVyIElFLCBhbmQgdGh1cyB3ZSBkb24ndCBuZWVkIHRvIHN1YnRyYWN0XG4gICAgICAgIC8vIGFueXRoaW5nLCBvciBhbiBlbGVtZW50IG1lcmVseSBkb2Vzbid0IGhhdmUgcGFkZGluZ3MvYm9yZGVycyBzdHlsZXMuXG4gICAgICAgIGlmIChNYXRoLnJvdW5kKHdpZHRoICsgaG9yaXpQYWQpICE9PSBjbGllbnRXaWR0aCkge1xuICAgICAgICAgICAgd2lkdGggLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAnbGVmdCcsICdyaWdodCcpICsgaG9yaXpQYWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5yb3VuZChoZWlnaHQgKyB2ZXJ0UGFkKSAhPT0gY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICBoZWlnaHQgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAndG9wJywgJ2JvdHRvbScpICsgdmVydFBhZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvbGxvd2luZyBzdGVwcyBjYW4ndCBiZSBhcHBsaWVkIHRvIHRoZSBkb2N1bWVudCdzIHJvb3QgZWxlbWVudCBhcyBpdHNcbiAgICAvLyBjbGllbnRbV2lkdGgvSGVpZ2h0XSBwcm9wZXJ0aWVzIHJlcHJlc2VudCB2aWV3cG9ydCBhcmVhIG9mIHRoZSB3aW5kb3cuXG4gICAgLy8gQmVzaWRlcywgaXQncyBhcyB3ZWxsIG5vdCBuZWNlc3NhcnkgYXMgdGhlIDxodG1sPiBpdHNlbGYgbmVpdGhlciBoYXNcbiAgICAvLyByZW5kZXJlZCBzY3JvbGwgYmFycyBub3IgaXQgY2FuIGJlIGNsaXBwZWQuXG4gICAgaWYgKCFpc0RvY3VtZW50RWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMgKG9ubHkgaW4gRmlyZWZveCwgYWN0dWFsbHkpIENTUyB3aWR0aCAmIGhlaWdodFxuICAgICAgICAvLyBpbmNsdWRlIHNjcm9sbCBiYXJzIHNpemUgd2hpY2ggY2FuIGJlIHJlbW92ZWQgYXQgdGhpcyBzdGVwIGFzIHNjcm9sbFxuICAgICAgICAvLyBiYXJzIGFyZSB0aGUgb25seSBkaWZmZXJlbmNlIGJldHdlZW4gcm91bmRlZCBkaW1lbnNpb25zICsgcGFkZGluZ3NcbiAgICAgICAgLy8gYW5kIFwiY2xpZW50XCIgcHJvcGVydGllcywgdGhvdWdoIHRoYXQgaXMgbm90IGFsd2F5cyB0cnVlIGluIENocm9tZS5cbiAgICAgICAgdmFyIHZlcnRTY3JvbGxiYXIgPSBNYXRoLnJvdW5kKHdpZHRoICsgaG9yaXpQYWQpIC0gY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBob3JpelNjcm9sbGJhciA9IE1hdGgucm91bmQoaGVpZ2h0ICsgdmVydFBhZCkgLSBjbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgLy8gQ2hyb21lIGhhcyBhIHJhdGhlciB3ZWlyZCByb3VuZGluZyBvZiBcImNsaWVudFwiIHByb3BlcnRpZXMuXG4gICAgICAgIC8vIEUuZy4gZm9yIGFuIGVsZW1lbnQgd2l0aCBjb250ZW50IHdpZHRoIG9mIDMxNC4ycHggaXQgc29tZXRpbWVzIGdpdmVzXG4gICAgICAgIC8vIHRoZSBjbGllbnQgd2lkdGggb2YgMzE1cHggYW5kIGZvciB0aGUgd2lkdGggb2YgMzE0LjdweCBpdCBtYXkgZ2l2ZVxuICAgICAgICAvLyAzMTRweC4gQW5kIGl0IGRvZXNuJ3QgaGFwcGVuIGFsbCB0aGUgdGltZS4gU28ganVzdCBpZ25vcmUgdGhpcyBkZWx0YVxuICAgICAgICAvLyBhcyBhIG5vbi1yZWxldmFudC5cbiAgICAgICAgaWYgKE1hdGguYWJzKHZlcnRTY3JvbGxiYXIpICE9PSAxKSB7XG4gICAgICAgICAgICB3aWR0aCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKGhvcml6U2Nyb2xsYmFyKSAhPT0gMSkge1xuICAgICAgICAgICAgaGVpZ2h0IC09IGhvcml6U2Nyb2xsYmFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KHBhZGRpbmdzLmxlZnQsIHBhZGRpbmdzLnRvcCwgd2lkdGgsIGhlaWdodCk7XG59XG5cbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBwcm92aWRlZCBlbGVtZW50IGlzIGFuIGluc3RhbmNlIG9mIHRoZSBTVkdHcmFwaGljc0VsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG52YXIgaXNTVkdHcmFwaGljc0VsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIFNvbWUgYnJvd3NlcnMsIG5hbWVseSBJRSBhbmQgRWRnZSwgZG9uJ3QgaGF2ZSB0aGUgU1ZHR3JhcGhpY3NFbGVtZW50XG4gICAgLy8gaW50ZXJmYWNlLlxuICAgIGlmICh0eXBlb2YgU1ZHR3JhcGhpY3NFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5TVkdHcmFwaGljc0VsZW1lbnQ7IH07XG4gICAgfVxuXG4gICAgLy8gSWYgaXQncyBzbywgdGhlbiBjaGVjayB0aGF0IGVsZW1lbnQgaXMgYXQgbGVhc3QgYW4gaW5zdGFuY2Ugb2YgdGhlXG4gICAgLy8gU1ZHRWxlbWVudCBhbmQgdGhhdCBpdCBoYXMgdGhlIFwiZ2V0QkJveFwiIG1ldGhvZC5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuU1ZHRWxlbWVudCAmJiB0eXBlb2YgdGFyZ2V0LmdldEJCb3ggPT09ICdmdW5jdGlvbic7IH07XG59KSgpO1xuXG4vKipcclxuICogQ2hlY2tzIHdoZXRoZXIgcHJvdmlkZWQgZWxlbWVudCBpcyBhIGRvY3VtZW50IGVsZW1lbnQgKDxodG1sPikuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5mdW5jdGlvbiBpc0RvY3VtZW50RWxlbWVudCh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0ID09PSBnZXRXaW5kb3dPZih0YXJnZXQpLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYW4gYXBwcm9wcmlhdGUgY29udGVudCByZWN0YW5nbGUgZm9yIHByb3ZpZGVkIGh0bWwgb3Igc3ZnIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBjb250ZW50IHJlY3RhbmdsZSBvZiB3aGljaCBuZWVkcyB0byBiZSBjYWxjdWxhdGVkLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gZ2V0Q29udGVudFJlY3QodGFyZ2V0KSB7XG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcbiAgICB9XG5cbiAgICBpZiAoaXNTVkdHcmFwaGljc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gZ2V0U1ZHQ29udGVudFJlY3QodGFyZ2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpO1xufVxuXG4vKipcclxuICogQ3JlYXRlcyByZWN0YW5nbGUgd2l0aCBhbiBpbnRlcmZhY2Ugb2YgdGhlIERPTVJlY3RSZWFkT25seS5cclxuICogU3BlYzogaHR0cHM6Ly9kcmFmdHMuZnh0Zi5vcmcvZ2VvbWV0cnkvI2RvbXJlY3RyZWFkb25seVxyXG4gKlxyXG4gKiBAcGFyYW0ge0RPTVJlY3RJbml0fSByZWN0SW5pdCAtIE9iamVjdCB3aXRoIHJlY3RhbmdsZSdzIHgveSBjb29yZGluYXRlcyBhbmQgZGltZW5zaW9ucy5cclxuICogQHJldHVybnMge0RPTVJlY3RSZWFkT25seX1cclxuICovXG5mdW5jdGlvbiBjcmVhdGVSZWFkT25seVJlY3QocmVmKSB7XG4gICAgdmFyIHggPSByZWYueDtcbiAgICB2YXIgeSA9IHJlZi55O1xuICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcbiAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgIC8vIElmIERPTVJlY3RSZWFkT25seSBpcyBhdmFpbGFibGUgdXNlIGl0IGFzIGEgcHJvdG90eXBlIGZvciB0aGUgcmVjdGFuZ2xlLlxuICAgIHZhciBDb25zdHIgPSB0eXBlb2YgRE9NUmVjdFJlYWRPbmx5ICE9PSAndW5kZWZpbmVkJyA/IERPTVJlY3RSZWFkT25seSA6IE9iamVjdDtcbiAgICB2YXIgcmVjdCA9IE9iamVjdC5jcmVhdGUoQ29uc3RyLnByb3RvdHlwZSk7XG5cbiAgICAvLyBSZWN0YW5nbGUncyBwcm9wZXJ0aWVzIGFyZSBub3Qgd3JpdGFibGUgYW5kIG5vbi1lbnVtZXJhYmxlLlxuICAgIGRlZmluZUNvbmZpZ3VyYWJsZShyZWN0LCB7XG4gICAgICAgIHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHRvcDogeSxcbiAgICAgICAgcmlnaHQ6IHggKyB3aWR0aCxcbiAgICAgICAgYm90dG9tOiBoZWlnaHQgKyB5LFxuICAgICAgICBsZWZ0OiB4XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVjdDtcbn1cblxuLyoqXHJcbiAqIENyZWF0ZXMgRE9NUmVjdEluaXQgb2JqZWN0IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBkaW1lbnNpb25zIGFuZCB0aGUgeC95IGNvb3JkaW5hdGVzLlxyXG4gKiBTcGVjOiBodHRwczovL2RyYWZ0cy5meHRmLm9yZy9nZW9tZXRyeS8jZGljdGRlZi1kb21yZWN0aW5pdFxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFggY29vcmRpbmF0ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZIGNvb3JkaW5hdGUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFJlY3RhbmdsZSdzIHdpZHRoLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gUmVjdGFuZ2xlJ3MgaGVpZ2h0LlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVjdEluaXQoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcbn1cblxuLyoqXHJcbiAqIENsYXNzIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIGNvbXB1dGF0aW9ucyBvZiB0aGUgY29udGVudCByZWN0YW5nbGUgb2ZcclxuICogcHJvdmlkZWQgRE9NIGVsZW1lbnQgYW5kIGZvciBrZWVwaW5nIHRyYWNrIG9mIGl0J3MgY2hhbmdlcy5cclxuICovXG52YXIgUmVzaXplT2JzZXJ2YXRpb24gPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICB0aGlzLmJyb2FkY2FzdFdpZHRoID0gMDtcbiAgICB0aGlzLmJyb2FkY2FzdEhlaWdodCA9IDA7XG4gICAgdGhpcy5jb250ZW50UmVjdF8gPSBjcmVhdGVSZWN0SW5pdCgwLCAwLCAwLCAwKTtcblxuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xufTtcblxuLyoqXHJcbiAqIFVwZGF0ZXMgY29udGVudCByZWN0YW5nbGUgYW5kIHRlbGxzIHdoZXRoZXIgaXQncyB3aWR0aCBvciBoZWlnaHQgcHJvcGVydGllc1xyXG4gKiBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgYnJvYWRjYXN0LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5cblxuLyoqXHJcbiAqIFJlZmVyZW5jZSB0byB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICpcclxuICogQHByaXZhdGUge0RPTVJlY3RJbml0fVxyXG4gKi9cblxuXG4vKipcclxuICogQnJvYWRjYXN0ZWQgd2lkdGggb2YgY29udGVudCByZWN0YW5nbGUuXHJcbiAqXHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xuUmVzaXplT2JzZXJ2YXRpb24ucHJvdG90eXBlLmlzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q29udGVudFJlY3QodGhpcy50YXJnZXQpO1xuXG4gICAgdGhpcy5jb250ZW50UmVjdF8gPSByZWN0O1xuXG4gICAgcmV0dXJuIHJlY3Qud2lkdGggIT09IHRoaXMuYnJvYWRjYXN0V2lkdGggfHwgcmVjdC5oZWlnaHQgIT09IHRoaXMuYnJvYWRjYXN0SGVpZ2h0O1xufTtcblxuLyoqXHJcbiAqIFVwZGF0ZXMgJ2Jyb2FkY2FzdFdpZHRoJyBhbmQgJ2Jyb2FkY2FzdEhlaWdodCcgcHJvcGVydGllcyB3aXRoIGEgZGF0YVxyXG4gKiBmcm9tIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnRpZXMgb2YgdGhlIGxhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH0gTGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICovXG5SZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuYnJvYWRjYXN0UmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVjdCA9IHRoaXMuY29udGVudFJlY3RfO1xuXG4gICAgdGhpcy5icm9hZGNhc3RXaWR0aCA9IHJlY3Qud2lkdGg7XG4gICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSByZWN0LmhlaWdodDtcblxuICAgIHJldHVybiByZWN0O1xufTtcblxudmFyIFJlc2l6ZU9ic2VydmVyRW50cnkgPSBmdW5jdGlvbih0YXJnZXQsIHJlY3RJbml0KSB7XG4gICAgdmFyIGNvbnRlbnRSZWN0ID0gY3JlYXRlUmVhZE9ubHlSZWN0KHJlY3RJbml0KTtcblxuICAgIC8vIEFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgbm90IHdyaXRhYmxlXG4gICAgLy8gYW5kIGFyZSBhbHNvIG5vdCBlbnVtZXJhYmxlIGluIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24uXG4gICAgLy9cbiAgICAvLyBQcm9wZXJ0eSBhY2Nlc3NvcnMgYXJlIG5vdCBiZWluZyB1c2VkIGFzIHRoZXknZCByZXF1aXJlIHRvIGRlZmluZSBhXG4gICAgLy8gcHJpdmF0ZSBXZWFrTWFwIHN0b3JhZ2Ugd2hpY2ggbWF5IGNhdXNlIG1lbW9yeSBsZWFrcyBpbiBicm93c2VycyB0aGF0XG4gICAgLy8gZG9uJ3Qgc3VwcG9ydCB0aGlzIHR5cGUgb2YgY29sbGVjdGlvbnMuXG4gICAgZGVmaW5lQ29uZmlndXJhYmxlKHRoaXMsIHsgdGFyZ2V0OiB0YXJnZXQsIGNvbnRlbnRSZWN0OiBjb250ZW50UmVjdCB9KTtcbn07XG5cbnZhciBSZXNpemVPYnNlcnZlclNQSSA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250cm9sbGVyLCBjYWxsYmFja0N0eCkge1xuICAgIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXyA9IFtdO1xuICAgIHRoaXMub2JzZXJ2YXRpb25zXyA9IG5ldyBNYXBTaGltKCk7XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB0aGlzLmNhbGxiYWNrXyA9IGNhbGxiYWNrO1xuICAgIHRoaXMuY29udHJvbGxlcl8gPSBjb250cm9sbGVyO1xuICAgIHRoaXMuY2FsbGJhY2tDdHhfID0gY2FsbGJhY2tDdHg7XG59O1xuXG4vKipcclxuICogU3RhcnRzIG9ic2VydmluZyBwcm92aWRlZCBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gYmUgb2JzZXJ2ZWQuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblxuXG4vKipcclxuICogUmVnaXN0cnkgb2YgdGhlIFJlc2l6ZU9ic2VydmF0aW9uIGluc3RhbmNlcy5cclxuICpcclxuICogQHByaXZhdGUge01hcDxFbGVtZW50LCBSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAqL1xuXG5cbi8qKlxyXG4gKiBQdWJsaWMgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2Ugd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrXHJcbiAqIGZ1bmN0aW9uIGFuZCB1c2VkIGFzIGEgdmFsdWUgb2YgaXQncyBcInRoaXNcIiBiaW5kaW5nLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZSB7UmVzaXplT2JzZXJ2ZXJ9XHJcbiAqL1xuXG4vKipcclxuICogQ29sbGVjdGlvbiBvZiByZXNpemUgb2JzZXJ2YXRpb25zIHRoYXQgaGF2ZSBkZXRlY3RlZCBjaGFuZ2VzIGluIGRpbWVuc2lvbnNcclxuICogb2YgZWxlbWVudHMuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtBcnJheTxSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC4nKTtcbiAgICB9XG5cbiAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cbiAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuRWxlbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgXCJFbGVtZW50XCIuJyk7XG4gICAgfVxuXG4gICAgdmFyIG9ic2VydmF0aW9ucyA9IHRoaXMub2JzZXJ2YXRpb25zXztcblxuICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIG9ic2VydmVkLlxuICAgIGlmIChvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9ic2VydmF0aW9ucy5zZXQodGFyZ2V0LCBuZXcgUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0KSk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXJfLmFkZE9ic2VydmVyKHRoaXMpO1xuXG4gICAgLy8gRm9yY2UgdGhlIHVwZGF0ZSBvZiBvYnNlcnZhdGlvbnMuXG4gICAgdGhpcy5jb250cm9sbGVyXy5yZWZyZXNoKCk7XG59O1xuXG4vKipcclxuICogU3RvcHMgb2JzZXJ2aW5nIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBzdG9wIG9ic2VydmluZy5cclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xuICAgIH1cblxuICAgIC8vIERvIG5vdGhpbmcgaWYgY3VycmVudCBlbnZpcm9ubWVudCBkb2Vzbid0IGhhdmUgdGhlIEVsZW1lbnQgaW50ZXJmYWNlLlxuICAgIGlmICh0eXBlb2YgRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgIShFbGVtZW50IGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5FbGVtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbWV0ZXIgMSBpcyBub3Qgb2YgdHlwZSBcIkVsZW1lbnRcIi4nKTtcbiAgICB9XG5cbiAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xuXG4gICAgLy8gRG8gbm90aGluZyBpZiBlbGVtZW50IGlzIG5vdCBiZWluZyBvYnNlcnZlZC5cbiAgICBpZiAoIW9ic2VydmF0aW9ucy5oYXModGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb2JzZXJ2YXRpb25zLmRlbGV0ZSh0YXJnZXQpO1xuXG4gICAgaWYgKCFvYnNlcnZhdGlvbnMuc2l6ZSkge1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBTdG9wcyBvYnNlcnZpbmcgYWxsIGVsZW1lbnRzLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XG4gICAgdGhpcy5vYnNlcnZhdGlvbnNfLmNsZWFyKCk7XG4gICAgdGhpcy5jb250cm9sbGVyXy5yZW1vdmVPYnNlcnZlcih0aGlzKTtcbn07XG5cbi8qKlxyXG4gKiBDb2xsZWN0cyBvYnNlcnZhdGlvbiBpbnN0YW5jZXMgdGhlIGFzc29jaWF0ZWQgZWxlbWVudCBvZiB3aGljaCBoYXMgY2hhbmdlZFxyXG4gKiBpdCdzIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZ2F0aGVyQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcblxuICAgIHRoaXMub2JzZXJ2YXRpb25zXy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xuICAgICAgICBpZiAob2JzZXJ2YXRpb24uaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgdGhpcyQxLmFjdGl2ZU9ic2VydmF0aW9uc18ucHVzaChvYnNlcnZhdGlvbik7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbi8qKlxyXG4gKiBJbnZva2VzIGluaXRpYWwgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBhIGxpc3Qgb2YgUmVzaXplT2JzZXJ2ZXJFbnRyeVxyXG4gKiBpbnN0YW5jZXMgY29sbGVjdGVkIGZyb20gYWN0aXZlIHJlc2l6ZSBvYnNlcnZhdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5icm9hZGNhc3RBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gRG8gbm90aGluZyBpZiBvYnNlcnZlciBkb2Vzbid0IGhhdmUgYWN0aXZlIG9ic2VydmF0aW9ucy5cbiAgICBpZiAoIXRoaXMuaGFzQWN0aXZlKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjdHggPSB0aGlzLmNhbGxiYWNrQ3R4XztcblxuICAgIC8vIENyZWF0ZSBSZXNpemVPYnNlcnZlckVudHJ5IGluc3RhbmNlIGZvciBldmVyeSBhY3RpdmUgb2JzZXJ2YXRpb24uXG4gICAgdmFyIGVudHJpZXMgPSB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubWFwKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob2JzZXJ2YXRpb24udGFyZ2V0LCBvYnNlcnZhdGlvbi5icm9hZGNhc3RSZWN0KCkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jYWxsYmFja18uY2FsbChjdHgsIGVudHJpZXMsIGN0eCk7XG4gICAgdGhpcy5jbGVhckFjdGl2ZSgpO1xufTtcblxuLyoqXHJcbiAqIENsZWFycyB0aGUgY29sbGVjdGlvbiBvZiBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuY2xlYXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnNwbGljZSgwKTtcbn07XG5cbi8qKlxyXG4gKiBUZWxscyB3aGV0aGVyIG9ic2VydmVyIGhhcyBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuaGFzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubGVuZ3RoID4gMDtcbn07XG5cbi8vIFJlZ2lzdHJ5IG9mIGludGVybmFsIG9ic2VydmVycy4gSWYgV2Vha01hcCBpcyBub3QgYXZhaWxhYmxlIHVzZSBjdXJyZW50IHNoaW1cbi8vIGZvciB0aGUgTWFwIGNvbGxlY3Rpb24gYXMgaXQgaGFzIGFsbCByZXF1aXJlZCBtZXRob2RzIGFuZCBiZWNhdXNlIFdlYWtNYXBcbi8vIGNhbid0IGJlIGZ1bGx5IHBvbHlmaWxsZWQgYW55d2F5LlxudmFyIG9ic2VydmVycyA9IHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJyA/IG5ldyBXZWFrTWFwKCkgOiBuZXcgTWFwU2hpbSgpO1xuXG4vKipcclxuICogUmVzaXplT2JzZXJ2ZXIgQVBJLiBFbmNhcHN1bGF0ZXMgdGhlIFJlc2l6ZU9ic2VydmVyIFNQSSBpbXBsZW1lbnRhdGlvblxyXG4gKiBleHBvc2luZyBvbmx5IHRob3NlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgdGhhdCBhcmUgZGVmaW5lZCBpbiB0aGUgc3BlYy5cclxuICovXG52YXIgUmVzaXplT2JzZXJ2ZXIgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNpemVPYnNlcnZlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uLicpO1xuICAgIH1cbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xuICAgIH1cblxuICAgIHZhciBjb250cm9sbGVyID0gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlKCk7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyU1BJKGNhbGxiYWNrLCBjb250cm9sbGVyLCB0aGlzKTtcblxuICAgIG9ic2VydmVycy5zZXQodGhpcywgb2JzZXJ2ZXIpO1xufTtcblxuLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzIG9mIFJlc2l6ZU9ic2VydmVyLlxuWydvYnNlcnZlJywgJ3Vub2JzZXJ2ZScsICdkaXNjb25uZWN0J10uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgUmVzaXplT2JzZXJ2ZXIucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAocmVmID0gb2JzZXJ2ZXJzLmdldCh0aGlzKSlbbWV0aG9kXS5hcHBseShyZWYsIGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciByZWY7XG4gICAgfTtcbn0pO1xuXG52YXIgaW5kZXggPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIEV4cG9ydCBleGlzdGluZyBpbXBsZW1lbnRhdGlvbiBpZiBhdmFpbGFibGUuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwkMS5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbCQxLlJlc2l6ZU9ic2VydmVyO1xuICAgIH1cblxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlcjtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLk5leHRBcnJvdyA9IGV4cG9ydHMuUHJldkFycm93ID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9jbGFzc25hbWVzID0gcmVxdWlyZShcImNsYXNzbmFtZXNcIik7XG5cbnZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblxudmFyIF9pbm5lclNsaWRlclV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvaW5uZXJTbGlkZXJVdGlsc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJldkFycm93ID0gZXhwb3J0cy5QcmV2QXJyb3cgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByZXZBcnJvdywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByZXZBcnJvdygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJldkFycm93KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkUHVyZUNvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFByZXZBcnJvdy5wcm90b3R5cGUuY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gY2xpY2tIYW5kbGVyKG9wdGlvbnMsIGUpIHtcbiAgICBpZiAoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLmNsaWNrSGFuZGxlcihvcHRpb25zLCBlKTtcbiAgfTtcblxuICBQcmV2QXJyb3cucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcHJldkNsYXNzZXMgPSB7IFwic2xpY2stYXJyb3dcIjogdHJ1ZSwgXCJzbGljay1wcmV2XCI6IHRydWUgfTtcbiAgICB2YXIgcHJldkhhbmRsZXIgPSB0aGlzLmNsaWNrSGFuZGxlci5iaW5kKHRoaXMsIHsgbWVzc2FnZTogXCJwcmV2aW91c1wiIH0pO1xuXG4gICAgaWYgKCF0aGlzLnByb3BzLmluZmluaXRlICYmICh0aGlzLnByb3BzLmN1cnJlbnRTbGlkZSA9PT0gMCB8fCB0aGlzLnByb3BzLnNsaWRlQ291bnQgPD0gdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cpKSB7XG4gICAgICBwcmV2Q2xhc3Nlc1tcInNsaWNrLWRpc2FibGVkXCJdID0gdHJ1ZTtcbiAgICAgIHByZXZIYW5kbGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJldkFycm93UHJvcHMgPSB7XG4gICAgICBrZXk6IFwiMFwiLFxuICAgICAgXCJkYXRhLXJvbGVcIjogXCJub25lXCIsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkocHJldkNsYXNzZXMpLFxuICAgICAgc3R5bGU6IHsgZGlzcGxheTogXCJibG9ja1wiIH0sXG4gICAgICBvbkNsaWNrOiBwcmV2SGFuZGxlclxuICAgIH07XG4gICAgdmFyIGN1c3RvbVByb3BzID0ge1xuICAgICAgY3VycmVudFNsaWRlOiB0aGlzLnByb3BzLmN1cnJlbnRTbGlkZSxcbiAgICAgIHNsaWRlQ291bnQ6IHRoaXMucHJvcHMuc2xpZGVDb3VudFxuICAgIH07XG4gICAgdmFyIHByZXZBcnJvdyA9IHZvaWQgMDtcblxuICAgIGlmICh0aGlzLnByb3BzLnByZXZBcnJvdykge1xuICAgICAgcHJldkFycm93ID0gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudCh0aGlzLnByb3BzLnByZXZBcnJvdywgX2V4dGVuZHMoe30sIHByZXZBcnJvd1Byb3BzLCBjdXN0b21Qcm9wcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmV2QXJyb3cgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgX2V4dGVuZHMoeyBrZXk6IFwiMFwiLCB0eXBlOiBcImJ1dHRvblwiIH0sIHByZXZBcnJvd1Byb3BzKSxcbiAgICAgICAgXCIgXCIsXG4gICAgICAgIFwiUHJldmlvdXNcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJldkFycm93O1xuICB9O1xuXG4gIHJldHVybiBQcmV2QXJyb3c7XG59KF9yZWFjdDIuZGVmYXVsdC5QdXJlQ29tcG9uZW50KTtcblxudmFyIE5leHRBcnJvdyA9IGV4cG9ydHMuTmV4dEFycm93ID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50Mikge1xuICBfaW5oZXJpdHMoTmV4dEFycm93LCBfUmVhY3QkUHVyZUNvbXBvbmVudDIpO1xuXG4gIGZ1bmN0aW9uIE5leHRBcnJvdygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmV4dEFycm93KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkUHVyZUNvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBOZXh0QXJyb3cucHJvdG90eXBlLmNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIGNsaWNrSGFuZGxlcihvcHRpb25zLCBlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5jbGlja0hhbmRsZXIob3B0aW9ucywgZSk7XG4gIH07XG5cbiAgTmV4dEFycm93LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIG5leHRDbGFzc2VzID0geyBcInNsaWNrLWFycm93XCI6IHRydWUsIFwic2xpY2stbmV4dFwiOiB0cnVlIH07XG4gICAgdmFyIG5leHRIYW5kbGVyID0gdGhpcy5jbGlja0hhbmRsZXIuYmluZCh0aGlzLCB7IG1lc3NhZ2U6IFwibmV4dFwiIH0pO1xuXG4gICAgaWYgKCEoMCwgX2lubmVyU2xpZGVyVXRpbHMuY2FuR29OZXh0KSh0aGlzLnByb3BzKSkge1xuICAgICAgbmV4dENsYXNzZXNbXCJzbGljay1kaXNhYmxlZFwiXSA9IHRydWU7XG4gICAgICBuZXh0SGFuZGxlciA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG5leHRBcnJvd1Byb3BzID0ge1xuICAgICAga2V5OiBcIjFcIixcbiAgICAgIFwiZGF0YS1yb2xlXCI6IFwibm9uZVwiLFxuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMyLmRlZmF1bHQpKG5leHRDbGFzc2VzKSxcbiAgICAgIHN0eWxlOiB7IGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuICAgICAgb25DbGljazogbmV4dEhhbmRsZXJcbiAgICB9O1xuICAgIHZhciBjdXN0b21Qcm9wcyA9IHtcbiAgICAgIGN1cnJlbnRTbGlkZTogdGhpcy5wcm9wcy5jdXJyZW50U2xpZGUsXG4gICAgICBzbGlkZUNvdW50OiB0aGlzLnByb3BzLnNsaWRlQ291bnRcbiAgICB9O1xuICAgIHZhciBuZXh0QXJyb3cgPSB2b2lkIDA7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5uZXh0QXJyb3cpIHtcbiAgICAgIG5leHRBcnJvdyA9IF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5uZXh0QXJyb3csIF9leHRlbmRzKHt9LCBuZXh0QXJyb3dQcm9wcywgY3VzdG9tUHJvcHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dEFycm93ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgIF9leHRlbmRzKHsga2V5OiBcIjFcIiwgdHlwZTogXCJidXR0b25cIiB9LCBuZXh0QXJyb3dQcm9wcyksXG4gICAgICAgIFwiIFwiLFxuICAgICAgICBcIk5leHRcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dEFycm93O1xuICB9O1xuXG4gIHJldHVybiBOZXh0QXJyb3c7XG59KF9yZWFjdDIuZGVmYXVsdC5QdXJlQ29tcG9uZW50KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuRG90cyA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGdldERvdENvdW50ID0gZnVuY3Rpb24gZ2V0RG90Q291bnQoc3BlYykge1xuICB2YXIgZG90cztcblxuICBpZiAoc3BlYy5pbmZpbml0ZSkge1xuICAgIGRvdHMgPSBNYXRoLmNlaWwoc3BlYy5zbGlkZUNvdW50IC8gc3BlYy5zbGlkZXNUb1Njcm9sbCk7XG4gIH0gZWxzZSB7XG4gICAgZG90cyA9IE1hdGguY2VpbCgoc3BlYy5zbGlkZUNvdW50IC0gc3BlYy5zbGlkZXNUb1Nob3cpIC8gc3BlYy5zbGlkZXNUb1Njcm9sbCkgKyAxO1xuICB9XG5cbiAgcmV0dXJuIGRvdHM7XG59O1xuXG52YXIgRG90cyA9IGV4cG9ydHMuRG90cyA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRG90cywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERvdHMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvdHMpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRQdXJlQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgRG90cy5wcm90b3R5cGUuY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gY2xpY2tIYW5kbGVyKG9wdGlvbnMsIGUpIHtcbiAgICAvLyBJbiBBdXRvcGxheSB0aGUgZm9jdXMgc3RheXMgb24gY2xpY2tlZCBidXR0b24gZXZlbiBhZnRlciB0cmFuc2l0aW9uXG4gICAgLy8gdG8gbmV4dCBzbGlkZS4gVGhhdCBvbmx5IGdvZXMgYXdheSBieSBjbGljayBzb21ld2hlcmUgb3V0c2lkZVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnByb3BzLmNsaWNrSGFuZGxlcihvcHRpb25zKTtcbiAgfTtcblxuICBEb3RzLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZG90Q291bnQgPSBnZXREb3RDb3VudCh7XG4gICAgICBzbGlkZUNvdW50OiB0aGlzLnByb3BzLnNsaWRlQ291bnQsXG4gICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbCxcbiAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3csXG4gICAgICBpbmZpbml0ZTogdGhpcy5wcm9wcy5pbmZpbml0ZVxuICAgIH0pO1xuXG4gICAgLy8gQXBwbHkgam9pbiAmIHNwbGl0IHRvIEFycmF5IHRvIHByZS1maWxsIGl0IGZvciBJRThcbiAgICAvL1xuICAgIC8vIENyZWRpdDogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTM3MzU0MjUvMTg0OTQ1OFxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbk1vdXNlRW50ZXIgPSBfcHJvcHMub25Nb3VzZUVudGVyLFxuICAgICAgICBvbk1vdXNlT3ZlciA9IF9wcm9wcy5vbk1vdXNlT3ZlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlID0gX3Byb3BzLm9uTW91c2VMZWF2ZTtcblxuICAgIHZhciBtb3VzZUV2ZW50cyA9IHsgb25Nb3VzZUVudGVyOiBvbk1vdXNlRW50ZXIsIG9uTW91c2VPdmVyOiBvbk1vdXNlT3Zlciwgb25Nb3VzZUxlYXZlOiBvbk1vdXNlTGVhdmUgfTtcbiAgICB2YXIgZG90cyA9IEFycmF5LmFwcGx5KG51bGwsIEFycmF5KGRvdENvdW50ICsgMSkuam9pbihcIjBcIikuc3BsaXQoXCJcIikpLm1hcChmdW5jdGlvbiAoeCwgaSkge1xuICAgICAgdmFyIGxlZnRCb3VuZCA9IGkgKiBfdGhpczIucHJvcHMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICB2YXIgcmlnaHRCb3VuZCA9IGkgKiBfdGhpczIucHJvcHMuc2xpZGVzVG9TY3JvbGwgKyAoX3RoaXMyLnByb3BzLnNsaWRlc1RvU2Nyb2xsIC0gMSk7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSh7XG4gICAgICAgIFwic2xpY2stYWN0aXZlXCI6IF90aGlzMi5wcm9wcy5jdXJyZW50U2xpZGUgPj0gbGVmdEJvdW5kICYmIF90aGlzMi5wcm9wcy5jdXJyZW50U2xpZGUgPD0gcmlnaHRCb3VuZFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBkb3RPcHRpb25zID0ge1xuICAgICAgICBtZXNzYWdlOiBcImRvdHNcIixcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiBfdGhpczIucHJvcHMuc2xpZGVzVG9TY3JvbGwsXG4gICAgICAgIGN1cnJlbnRTbGlkZTogX3RoaXMyLnByb3BzLmN1cnJlbnRTbGlkZVxuICAgICAgfTtcblxuICAgICAgdmFyIG9uQ2xpY2sgPSBfdGhpczIuY2xpY2tIYW5kbGVyLmJpbmQoX3RoaXMyLCBkb3RPcHRpb25zKTtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICB7IGtleTogaSwgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChfdGhpczIucHJvcHMuY3VzdG9tUGFnaW5nKGkpLCB7IG9uQ2xpY2s6IG9uQ2xpY2sgfSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudCh0aGlzLnByb3BzLmFwcGVuZERvdHMoZG90cyksIF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5kb3RzQ2xhc3NcbiAgICB9LCBtb3VzZUV2ZW50cykpO1xuICB9O1xuXG4gIHJldHVybiBEb3RzO1xufShfcmVhY3QyLmRlZmF1bHQuUHVyZUNvbXBvbmVudCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLlRyYWNrID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9jbGFzc25hbWVzID0gcmVxdWlyZShcImNsYXNzbmFtZXNcIik7XG5cbnZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblxudmFyIF9pbm5lclNsaWRlclV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvaW5uZXJTbGlkZXJVdGlsc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vLyBnaXZlbiBzcGVjaWZpY2F0aW9ucy9wcm9wcyBmb3IgYSBzbGlkZSwgZmV0Y2ggYWxsIHRoZSBjbGFzc2VzIHRoYXQgbmVlZCB0byBiZSBhcHBsaWVkIHRvIHRoZSBzbGlkZVxudmFyIGdldFNsaWRlQ2xhc3NlcyA9IGZ1bmN0aW9uIGdldFNsaWRlQ2xhc3NlcyhzcGVjKSB7XG4gIHZhciBzbGlja0FjdGl2ZSwgc2xpY2tDZW50ZXIsIHNsaWNrQ2xvbmVkO1xuICB2YXIgY2VudGVyT2Zmc2V0LCBpbmRleDtcblxuICBpZiAoc3BlYy5ydGwpIHtcbiAgICBpbmRleCA9IHNwZWMuc2xpZGVDb3VudCAtIDEgLSBzcGVjLmluZGV4O1xuICB9IGVsc2Uge1xuICAgIGluZGV4ID0gc3BlYy5pbmRleDtcbiAgfVxuICBzbGlja0Nsb25lZCA9IGluZGV4IDwgMCB8fCBpbmRleCA+PSBzcGVjLnNsaWRlQ291bnQ7XG4gIGlmIChzcGVjLmNlbnRlck1vZGUpIHtcbiAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKHNwZWMuc2xpZGVzVG9TaG93IC8gMik7XG4gICAgc2xpY2tDZW50ZXIgPSAoaW5kZXggLSBzcGVjLmN1cnJlbnRTbGlkZSkgJSBzcGVjLnNsaWRlQ291bnQgPT09IDA7XG4gICAgaWYgKGluZGV4ID4gc3BlYy5jdXJyZW50U2xpZGUgLSBjZW50ZXJPZmZzZXQgLSAxICYmIGluZGV4IDw9IHNwZWMuY3VycmVudFNsaWRlICsgY2VudGVyT2Zmc2V0KSB7XG4gICAgICBzbGlja0FjdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNsaWNrQWN0aXZlID0gc3BlYy5jdXJyZW50U2xpZGUgPD0gaW5kZXggJiYgaW5kZXggPCBzcGVjLmN1cnJlbnRTbGlkZSArIHNwZWMuc2xpZGVzVG9TaG93O1xuICB9XG4gIHZhciBzbGlja0N1cnJlbnQgPSBpbmRleCA9PT0gc3BlYy5jdXJyZW50U2xpZGU7XG4gIHJldHVybiB7XG4gICAgXCJzbGljay1zbGlkZVwiOiB0cnVlLFxuICAgIFwic2xpY2stYWN0aXZlXCI6IHNsaWNrQWN0aXZlLFxuICAgIFwic2xpY2stY2VudGVyXCI6IHNsaWNrQ2VudGVyLFxuICAgIFwic2xpY2stY2xvbmVkXCI6IHNsaWNrQ2xvbmVkLFxuICAgIFwic2xpY2stY3VycmVudFwiOiBzbGlja0N1cnJlbnQgLy8gZHViaW91cyBpbiBjYXNlIG9mIFJUTFxuICB9O1xufTtcblxudmFyIGdldFNsaWRlU3R5bGUgPSBmdW5jdGlvbiBnZXRTbGlkZVN0eWxlKHNwZWMpIHtcbiAgdmFyIHN0eWxlID0ge307XG5cbiAgaWYgKHNwZWMudmFyaWFibGVXaWR0aCA9PT0gdW5kZWZpbmVkIHx8IHNwZWMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIHtcbiAgICBzdHlsZS53aWR0aCA9IHNwZWMuc2xpZGVXaWR0aDtcbiAgfVxuXG4gIGlmIChzcGVjLmZhZGUpIHtcbiAgICBzdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICBpZiAoc3BlYy52ZXJ0aWNhbCkge1xuICAgICAgc3R5bGUudG9wID0gLXNwZWMuaW5kZXggKiBwYXJzZUludChzcGVjLnNsaWRlSGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUubGVmdCA9IC1zcGVjLmluZGV4ICogcGFyc2VJbnQoc3BlYy5zbGlkZVdpZHRoKTtcbiAgICB9XG4gICAgc3R5bGUub3BhY2l0eSA9IHNwZWMuY3VycmVudFNsaWRlID09PSBzcGVjLmluZGV4ID8gMSA6IDA7XG4gICAgc3R5bGUudHJhbnNpdGlvbiA9IFwib3BhY2l0eSBcIiArIHNwZWMuc3BlZWQgKyBcIm1zIFwiICsgc3BlYy5jc3NFYXNlICsgXCIsIFwiICsgXCJ2aXNpYmlsaXR5IFwiICsgc3BlYy5zcGVlZCArIFwibXMgXCIgKyBzcGVjLmNzc0Vhc2U7XG4gICAgc3R5bGUuV2Via2l0VHJhbnNpdGlvbiA9IFwib3BhY2l0eSBcIiArIHNwZWMuc3BlZWQgKyBcIm1zIFwiICsgc3BlYy5jc3NFYXNlICsgXCIsIFwiICsgXCJ2aXNpYmlsaXR5IFwiICsgc3BlYy5zcGVlZCArIFwibXMgXCIgKyBzcGVjLmNzc0Vhc2U7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59O1xuXG52YXIgZ2V0S2V5ID0gZnVuY3Rpb24gZ2V0S2V5KGNoaWxkLCBmYWxsYmFja0tleSkge1xuICByZXR1cm4gY2hpbGQua2V5IHx8IGZhbGxiYWNrS2V5O1xufTtcblxudmFyIHJlbmRlclNsaWRlcyA9IGZ1bmN0aW9uIHJlbmRlclNsaWRlcyhzcGVjKSB7XG4gIHZhciBrZXk7XG4gIHZhciBzbGlkZXMgPSBbXTtcbiAgdmFyIHByZUNsb25lU2xpZGVzID0gW107XG4gIHZhciBwb3N0Q2xvbmVTbGlkZXMgPSBbXTtcbiAgdmFyIGNoaWxkcmVuQ291bnQgPSBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4uY291bnQoc3BlYy5jaGlsZHJlbik7XG4gIHZhciBzdGFydEluZGV4ID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmxhenlTdGFydEluZGV4KShzcGVjKTtcbiAgdmFyIGVuZEluZGV4ID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmxhenlFbmRJbmRleCkoc3BlYyk7XG5cbiAgX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goc3BlYy5jaGlsZHJlbiwgZnVuY3Rpb24gKGVsZW0sIGluZGV4KSB7XG4gICAgdmFyIGNoaWxkID0gdm9pZCAwO1xuICAgIHZhciBjaGlsZE9uQ2xpY2tPcHRpb25zID0ge1xuICAgICAgbWVzc2FnZTogXCJjaGlsZHJlblwiLFxuICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgc2xpZGVzVG9TY3JvbGw6IHNwZWMuc2xpZGVzVG9TY3JvbGwsXG4gICAgICBjdXJyZW50U2xpZGU6IHNwZWMuY3VycmVudFNsaWRlXG4gICAgfTtcblxuICAgIC8vIGluIGNhc2Ugb2YgbGF6eUxvYWQsIHdoZXRoZXIgb3Igbm90IHdlIHdhbnQgdG8gZmV0Y2ggdGhlIHNsaWRlXG4gICAgaWYgKCFzcGVjLmxhenlMb2FkIHx8IHNwZWMubGF6eUxvYWQgJiYgc3BlYy5sYXp5TG9hZGVkTGlzdC5pbmRleE9mKGluZGV4KSA+PSAwKSB7XG4gICAgICBjaGlsZCA9IGVsZW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCk7XG4gICAgfVxuICAgIHZhciBjaGlsZFN0eWxlID0gZ2V0U2xpZGVTdHlsZShfZXh0ZW5kcyh7fSwgc3BlYywgeyBpbmRleDogaW5kZXggfSkpO1xuICAgIHZhciBzbGlkZUNsYXNzID0gY2hpbGQucHJvcHMuY2xhc3NOYW1lIHx8IFwiXCI7XG4gICAgdmFyIHNsaWRlQ2xhc3NlcyA9IGdldFNsaWRlQ2xhc3NlcyhfZXh0ZW5kcyh7fSwgc3BlYywgeyBpbmRleDogaW5kZXggfSkpO1xuICAgIC8vIHB1c2ggYSBjbG9uZWQgZWxlbWVudCBvZiB0aGUgZGVzaXJlZCBzbGlkZVxuICAgIHNsaWRlcy5wdXNoKF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIGtleTogXCJvcmlnaW5hbFwiICsgZ2V0S2V5KGNoaWxkLCBpbmRleCksXG4gICAgICBcImRhdGEtaW5kZXhcIjogaW5kZXgsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoc2xpZGVDbGFzc2VzLCBzbGlkZUNsYXNzKSxcbiAgICAgIHRhYkluZGV4OiBcIi0xXCIsXG4gICAgICBcImFyaWEtaGlkZGVuXCI6ICFzbGlkZUNsYXNzZXNbXCJzbGljay1hY3RpdmVcIl0sXG4gICAgICBzdHlsZTogX2V4dGVuZHMoeyBvdXRsaW5lOiBcIm5vbmVcIiB9LCBjaGlsZC5wcm9wcy5zdHlsZSB8fCB7fSwgY2hpbGRTdHlsZSksXG4gICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgY2hpbGQucHJvcHMgJiYgY2hpbGQucHJvcHMub25DbGljayAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrKGUpO1xuICAgICAgICBpZiAoc3BlYy5mb2N1c09uU2VsZWN0KSB7XG4gICAgICAgICAgc3BlYy5mb2N1c09uU2VsZWN0KGNoaWxkT25DbGlja09wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkpO1xuXG4gICAgLy8gaWYgc2xpZGUgbmVlZHMgdG8gYmUgcHJlY2xvbmVkIG9yIHBvc3RjbG9uZWRcbiAgICBpZiAoc3BlYy5pbmZpbml0ZSAmJiBzcGVjLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICB2YXIgcHJlQ2xvbmVObyA9IGNoaWxkcmVuQ291bnQgLSBpbmRleDtcbiAgICAgIGlmIChwcmVDbG9uZU5vIDw9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRQcmVDbG9uZXMpKHNwZWMpICYmIGNoaWxkcmVuQ291bnQgIT09IHNwZWMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgIGtleSA9IC1wcmVDbG9uZU5vO1xuICAgICAgICBpZiAoa2V5ID49IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICBjaGlsZCA9IGVsZW07XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGVDbGFzc2VzID0gZ2V0U2xpZGVDbGFzc2VzKF9leHRlbmRzKHt9LCBzcGVjLCB7IGluZGV4OiBrZXkgfSkpO1xuICAgICAgICBwcmVDbG9uZVNsaWRlcy5wdXNoKF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICBrZXk6IFwicHJlY2xvbmVkXCIgKyBnZXRLZXkoY2hpbGQsIGtleSksXG4gICAgICAgICAgXCJkYXRhLWluZGV4XCI6IGtleSxcbiAgICAgICAgICB0YWJJbmRleDogXCItMVwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KShzbGlkZUNsYXNzZXMsIHNsaWRlQ2xhc3MpLFxuICAgICAgICAgIFwiYXJpYS1oaWRkZW5cIjogIXNsaWRlQ2xhc3Nlc1tcInNsaWNrLWFjdGl2ZVwiXSxcbiAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLnN0eWxlIHx8IHt9LCBjaGlsZFN0eWxlKSxcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgIGNoaWxkLnByb3BzICYmIGNoaWxkLnByb3BzLm9uQ2xpY2sgJiYgY2hpbGQucHJvcHMub25DbGljayhlKTtcbiAgICAgICAgICAgIGlmIChzcGVjLmZvY3VzT25TZWxlY3QpIHtcbiAgICAgICAgICAgICAgc3BlYy5mb2N1c09uU2VsZWN0KGNoaWxkT25DbGlja09wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGRyZW5Db3VudCAhPT0gc3BlYy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAga2V5ID0gY2hpbGRyZW5Db3VudCArIGluZGV4O1xuICAgICAgICBpZiAoa2V5IDwgZW5kSW5kZXgpIHtcbiAgICAgICAgICBjaGlsZCA9IGVsZW07XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGVDbGFzc2VzID0gZ2V0U2xpZGVDbGFzc2VzKF9leHRlbmRzKHt9LCBzcGVjLCB7IGluZGV4OiBrZXkgfSkpO1xuICAgICAgICBwb3N0Q2xvbmVTbGlkZXMucHVzaChfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAga2V5OiBcInBvc3RjbG9uZWRcIiArIGdldEtleShjaGlsZCwga2V5KSxcbiAgICAgICAgICBcImRhdGEtaW5kZXhcIjoga2V5LFxuICAgICAgICAgIHRhYkluZGV4OiBcIi0xXCIsXG4gICAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMyLmRlZmF1bHQpKHNsaWRlQ2xhc3Nlcywgc2xpZGVDbGFzcyksXG4gICAgICAgICAgXCJhcmlhLWhpZGRlblwiOiAhc2xpZGVDbGFzc2VzW1wic2xpY2stYWN0aXZlXCJdLFxuICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMuc3R5bGUgfHwge30sIGNoaWxkU3R5bGUpLFxuICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgY2hpbGQucHJvcHMgJiYgY2hpbGQucHJvcHMub25DbGljayAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrKGUpO1xuICAgICAgICAgICAgaWYgKHNwZWMuZm9jdXNPblNlbGVjdCkge1xuICAgICAgICAgICAgICBzcGVjLmZvY3VzT25TZWxlY3QoY2hpbGRPbkNsaWNrT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoc3BlYy5ydGwpIHtcbiAgICByZXR1cm4gcHJlQ2xvbmVTbGlkZXMuY29uY2F0KHNsaWRlcywgcG9zdENsb25lU2xpZGVzKS5yZXZlcnNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByZUNsb25lU2xpZGVzLmNvbmNhdChzbGlkZXMsIHBvc3RDbG9uZVNsaWRlcyk7XG4gIH1cbn07XG5cbnZhciBUcmFjayA9IGV4cG9ydHMuVHJhY2sgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRyYWNrLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhY2soKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYWNrKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkUHVyZUNvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFRyYWNrLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHNsaWRlcyA9IHJlbmRlclNsaWRlcyh0aGlzLnByb3BzKTtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25Nb3VzZUVudGVyID0gX3Byb3BzLm9uTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZU92ZXIgPSBfcHJvcHMub25Nb3VzZU92ZXIsXG4gICAgICAgIG9uTW91c2VMZWF2ZSA9IF9wcm9wcy5vbk1vdXNlTGVhdmU7XG5cbiAgICB2YXIgbW91c2VFdmVudHMgPSB7IG9uTW91c2VFbnRlcjogb25Nb3VzZUVudGVyLCBvbk1vdXNlT3Zlcjogb25Nb3VzZU92ZXIsIG9uTW91c2VMZWF2ZTogb25Nb3VzZUxlYXZlIH07XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJkaXZcIixcbiAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInNsaWNrLXRyYWNrXCIsXG4gICAgICAgIHN0eWxlOiB0aGlzLnByb3BzLnRyYWNrU3R5bGVcbiAgICAgIH0sIG1vdXNlRXZlbnRzKSxcbiAgICAgIHNsaWRlc1xuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYWNrO1xufShfcmVhY3QyLmRlZmF1bHQuUHVyZUNvbXBvbmVudCk7IiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICByZXN1bHQgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nID8gbmF0aXZlTWluKHJlc3VsdCwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICBhbmltYXRpbmc6IGZhbHNlLFxuICBhdXRvcGxheWluZzogbnVsbCxcbiAgY3VycmVudERpcmVjdGlvbjogMCxcbiAgY3VycmVudExlZnQ6IG51bGwsXG4gIGN1cnJlbnRTbGlkZTogMCxcbiAgZGlyZWN0aW9uOiAxLFxuICBkcmFnZ2luZzogZmFsc2UsXG4gIGVkZ2VEcmFnZ2VkOiBmYWxzZSxcbiAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICBsYXp5TG9hZGVkTGlzdDogW10sXG4gIGxpc3RIZWlnaHQ6IG51bGwsXG4gIGxpc3RXaWR0aDogbnVsbCxcbiAgc2Nyb2xsaW5nOiBmYWxzZSxcbiAgc2xpZGVDb3VudDogbnVsbCxcbiAgc2xpZGVIZWlnaHQ6IG51bGwsXG4gIHNsaWRlV2lkdGg6IG51bGwsXG4gIHN3aXBlTGVmdDogbnVsbCxcbiAgc3dpcGVkOiBmYWxzZSwgLy8gdXNlZCBieSBzd2lwZUV2ZW50LiBkaWZmZXJlbnRpdGVzIGJldHdlZW4gdG91Y2ggYW5kIHN3aXBlLlxuICBzd2lwaW5nOiBmYWxzZSxcbiAgdG91Y2hPYmplY3Q6IHsgc3RhcnRYOiAwLCBzdGFydFk6IDAsIGN1clg6IDAsIGN1clk6IDAgfSxcbiAgdHJhY2tTdHlsZToge30sXG4gIHRyYWNrV2lkdGg6IDBcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGluaXRpYWxTdGF0ZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi40LjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLGNhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxwPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHY9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksZGE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksZWE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGhhPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKTtcbmZ1bmN0aW9uIEEoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTthYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWNhP3ZvaWQgMDpBKFwiMjI3XCIpO1xuZnVuY3Rpb24gaWEoYSxiLGMsZCxlLGYsZyxoLGspe3RoaXMuX2hhc0NhdWdodEVycm9yPSExO3RoaXMuX2NhdWdodEVycm9yPW51bGw7dmFyIG49QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbil9Y2F0Y2gocil7dGhpcy5fY2F1Z2h0RXJyb3I9cix0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMH19XG52YXIgQj17X2NhdWdodEVycm9yOm51bGwsX2hhc0NhdWdodEVycm9yOiExLF9yZXRocm93RXJyb3I6bnVsbCxfaGFzUmV0aHJvd0Vycm9yOiExLGludm9rZUd1YXJkZWRDYWxsYmFjazpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7aWEuYXBwbHkoQixhcmd1bWVudHMpfSxpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3I6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe0IuaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihCLmhhc0NhdWdodEVycm9yKCkpe3ZhciBuPUIuY2xlYXJDYXVnaHRFcnJvcigpO0IuX2hhc1JldGhyb3dFcnJvcnx8KEIuX2hhc1JldGhyb3dFcnJvcj0hMCxCLl9yZXRocm93RXJyb3I9bil9fSxyZXRocm93Q2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4ga2EuYXBwbHkoQixhcmd1bWVudHMpfSxoYXNDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBCLl9oYXNDYXVnaHRFcnJvcn0sY2xlYXJDYXVnaHRFcnJvcjpmdW5jdGlvbigpe2lmKEIuX2hhc0NhdWdodEVycm9yKXt2YXIgYT1cbkIuX2NhdWdodEVycm9yO0IuX2NhdWdodEVycm9yPW51bGw7Qi5faGFzQ2F1Z2h0RXJyb3I9ITE7cmV0dXJuIGF9QShcIjE5OFwiKX19O2Z1bmN0aW9uIGthKCl7aWYoQi5faGFzUmV0aHJvd0Vycm9yKXt2YXIgYT1CLl9yZXRocm93RXJyb3I7Qi5fcmV0aHJvd0Vycm9yPW51bGw7Qi5faGFzUmV0aHJvd0Vycm9yPSExO3Rocm93IGE7fX12YXIgbGE9bnVsbCxtYT17fTtcbmZ1bmN0aW9uIG5hKCl7aWYobGEpZm9yKHZhciBhIGluIG1hKXt2YXIgYj1tYVthXSxjPWxhLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6QShcIjk2XCIsYSk7aWYoIW9hW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOkEoXCI5N1wiLGEpO29hW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7cGEuaGFzT3duUHJvcGVydHkoaCk/QShcIjk5XCIsaCk6dm9pZCAwO3BhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnFhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhxYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOkEoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiBxYShhLGIsYyl7cmFbYV0/QShcIjEwMFwiLGEpOnZvaWQgMDtyYVthXT1iO3NhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIG9hPVtdLHBhPXt9LHJhPXt9LHNhPXt9O2Z1bmN0aW9uIHRhKGEpe2xhP0EoXCIxMDFcIik6dm9pZCAwO2xhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO25hKCl9ZnVuY3Rpb24gdWEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107bWEuaGFzT3duUHJvcGVydHkoYykmJm1hW2NdPT09ZHx8KG1hW2NdP0EoXCIxMDJcIixjKTp2b2lkIDAsbWFbY109ZCxiPSEwKX1iJiZuYSgpfVxudmFyIHZhPXtwbHVnaW5zOm9hLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpwYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczpyYSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOnNhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOnRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp1YX0sd2E9bnVsbCx4YT1udWxsLHlhPW51bGw7ZnVuY3Rpb24gemEoYSxiLGMsZCl7Yj1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD15YShkKTtCLmludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcihiLGMsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gQWEoYSxiKXtudWxsPT1iP0EoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIEJhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBDYT1udWxsO1xuZnVuY3Rpb24gRGEoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspemEoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZ6YShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBFYShhKXtyZXR1cm4gRGEoYSwhMCl9ZnVuY3Rpb24gRmEoYSl7cmV0dXJuIERhKGEsITEpfXZhciBHYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp0YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6dWF9O1xuZnVuY3Rpb24gSGEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD13YShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9BKFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gSWEoYSxiKXtudWxsIT09YSYmKENhPUFhKENhLGEpKTthPUNhO0NhPW51bGw7YSYmKGI/QmEoYSxFYSk6QmEoYSxGYSksQ2E/QShcIjk1XCIpOnZvaWQgMCxCLnJldGhyb3dDYXVnaHRFcnJvcigpKX1mdW5jdGlvbiBKYShhLGIsYyxkKXtmb3IodmFyIGU9bnVsbCxmPTA7ZjxvYS5sZW5ndGg7ZisrKXt2YXIgZz1vYVtmXTtnJiYoZz1nLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT1BYShlLGcpKX1JYShlLCExKX12YXIgS2E9e2luamVjdGlvbjpHYSxnZXRMaXN0ZW5lcjpIYSxydW5FdmVudHNJbkJhdGNoOklhLHJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2g6SmF9LExhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEM9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitMYSxNYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0xhO1xuZnVuY3Rpb24gTmEoYSl7aWYoYVtDXSlyZXR1cm4gYVtDXTtmb3IoOyFhW0NdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbQ107cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBPYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7QShcIjMzXCIpfWZ1bmN0aW9uIFBhKGEpe3JldHVybiBhW01hXXx8bnVsbH12YXIgUWE9e3ByZWNhY2hlRmliZXJOb2RlOmZ1bmN0aW9uKGEsYil7YltDXT1hfSxnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTpOYSxnZXRJbnN0YW5jZUZyb21Ob2RlOmZ1bmN0aW9uKGEpe2E9YVtDXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfSxnZXROb2RlRnJvbUluc3RhbmNlOk9hLGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU6UGEsdXBkYXRlRmliZXJQcm9wczpmdW5jdGlvbihhLGIpe2FbTWFdPWJ9fTtcbmZ1bmN0aW9uIEYoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBSYShhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPUYoYSk7Zm9yKGE9ZC5sZW5ndGg7MDxhLS07KWIoZFthXSxcImNhcHR1cmVkXCIsYyk7Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyliKGRbYV0sXCJidWJibGVkXCIsYyl9ZnVuY3Rpb24gU2EoYSxiLGMpe2lmKGI9SGEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1BYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1BYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBUYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZSYShhLl90YXJnZXRJbnN0LFNhLGEpfVxuZnVuY3Rpb24gVWEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7dmFyIGI9YS5fdGFyZ2V0SW5zdDtiPWI/RihiKTpudWxsO1JhKGIsU2EsYSl9fWZ1bmN0aW9uIFZhKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPUhhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1BYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1BYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gWGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWYShhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWWEoYSl7QmEoYSxUYSl9XG5mdW5jdGlvbiBaYShhLGIsYyxkKXtpZihjJiZkKWE6e3ZhciBlPWM7Zm9yKHZhciBmPWQsZz0wLGg9ZTtoO2g9RihoKSlnKys7aD0wO2Zvcih2YXIgaz1mO2s7az1GKGspKWgrKztmb3IoOzA8Zy1oOyllPUYoZSksZy0tO2Zvcig7MDxoLWc7KWY9RihmKSxoLS07Zm9yKDtnLS07KXtpZihlPT09Znx8ZT09PWYuYWx0ZXJuYXRlKWJyZWFrIGE7ZT1GKGUpO2Y9RihmKX1lPW51bGx9ZWxzZSBlPW51bGw7Zj1lO2ZvcihlPVtdO2MmJmMhPT1mOyl7Zz1jLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7ZS5wdXNoKGMpO2M9RihjKX1mb3IoYz1bXTtkJiZkIT09Zjspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2MucHVzaChkKTtkPUYoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKylWYShlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOylWYShjW2FdLFwiY2FwdHVyZWRcIixiKX1cbnZhciAkYT17YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczpZYSxhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtCYShhLFVhKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOlphLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0JhKGEsWGEpfX07ZnVuY3Rpb24gYWIoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciBiYj17YW5pbWF0aW9uZW5kOmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6YWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6YWIoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxjYj17fSxkYj17fTttLmNhblVzZURPTSYmKGRiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIGJiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIGJiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIGJiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIGJiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBlYihhKXtpZihjYlthXSlyZXR1cm4gY2JbYV07aWYoIWJiW2FdKXJldHVybiBhO3ZhciBiPWJiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIGRiKXJldHVybiBjYlthXT1iW2NdO3JldHVybiBhfXZhciBmYj1lYihcImFuaW1hdGlvbmVuZFwiKSxnYj1lYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxoYj1lYihcImFuaW1hdGlvbnN0YXJ0XCIpLGliPWViKFwidHJhbnNpdGlvbmVuZFwiKSxqYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksa2I9bnVsbDtcbmZ1bmN0aW9uIGxiKCl7IWtiJiZtLmNhblVzZURPTSYmKGtiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIGtifXZhciBHPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O2Z1bmN0aW9uIG1iKCl7aWYoRy5fZmFsbGJhY2tUZXh0KXJldHVybiBHLl9mYWxsYmFja1RleHQ7dmFyIGEsYj1HLl9zdGFydFRleHQsYz1iLmxlbmd0aCxkLGU9bmIoKSxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO0cuX2ZhbGxiYWNrVGV4dD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApO3JldHVybiBHLl9mYWxsYmFja1RleHR9ZnVuY3Rpb24gbmIoKXtyZXR1cm5cInZhbHVlXCJpbiBHLl9yb290P0cuX3Jvb3QudmFsdWU6Ry5fcm9vdFtsYigpXX1cbnZhciBvYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLHBiPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDp2LnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gSChhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/di50aGF0UmV0dXJuc1RydWU6di50aGF0UmV0dXJuc0ZhbHNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9di50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxucChILnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXYudGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXYudGhhdFJldHVybnNUcnVlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PXYudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6di50aGF0UmV0dXJuc0ZhbHNlLFxuZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPG9iLmxlbmd0aDthKyspdGhpc1tvYlthXV09bnVsbH19KTtILkludGVyZmFjZT1wYjtILmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtwKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1wKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO3FiKGMpO3JldHVybiBjfTtxYihIKTtcbmZ1bmN0aW9uIHJiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIHNiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDpBKFwiMjIzXCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBxYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1yYjthLnJlbGVhc2U9c2J9dmFyIHRiPUguZXh0ZW5kKHtkYXRhOm51bGx9KSx1Yj1ILmV4dGVuZCh7ZGF0YTpudWxsfSksdmI9WzksMTMsMjcsMzJdLHdiPW0uY2FuVXNlRE9NJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyx4Yj1udWxsO20uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJih4Yj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHliPW0uY2FuVXNlRE9NJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYheGIsemI9bS5jYW5Vc2VET00mJighd2J8fHhiJiY4PHhiJiYxMT49eGIpLEFiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLEJiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LENiPSExO1xuZnVuY3Rpb24gRGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT12Yi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEViKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIEZiPSExO2Z1bmN0aW9uIEdiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBFYihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7Q2I9ITA7cmV0dXJuIEFiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PUFiJiZDYj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBIYihhLGIpe2lmKEZiKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCF3YiYmRGIoYSxiKT8oYT1tYigpLEcuX3Jvb3Q9bnVsbCxHLl9zdGFydFRleHQ9bnVsbCxHLl9mYWxsYmFja1RleHQ9bnVsbCxGYj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gemI/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgSWI9e2V2ZW50VHlwZXM6QmIsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHdiKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9QmIuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9QmIuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPUJiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSBGYj9EYihhLGMpJiYoZT1CYi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPUJiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHpiJiYoRmJ8fGUhPT1CYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1CYi5jb21wb3NpdGlvbkVuZCYmRmImJihmPW1iKCkpOihHLl9yb290PWQsRy5fc3RhcnRUZXh0PW5iKCksRmI9ITApKSxlPXRiLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1cbmY6KGY9RWIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFlhKGUpLGY9ZSk6Zj1udWxsOyhhPXliP0diKGEsYyk6SGIoYSxjKSk/KGI9dWIuZ2V0UG9vbGVkKEJiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxZYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxKYj1udWxsLEtiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe0piPWF9fSxMYj1udWxsLE1iPW51bGw7ZnVuY3Rpb24gTmIoYSl7aWYoYT14YShhKSl7SmImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBKYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpBKFwiMTk0XCIpO3ZhciBiPXdhKGEuc3RhdGVOb2RlKTtKYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gT2IoYSl7TGI/TWI/TWIucHVzaChhKTpNYj1bYV06TGI9YX1cbmZ1bmN0aW9uIFBiKCl7cmV0dXJuIG51bGwhPT1MYnx8bnVsbCE9PU1ifWZ1bmN0aW9uIFFiKCl7aWYoTGIpe3ZhciBhPUxiLGI9TWI7TWI9TGI9bnVsbDtOYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspTmIoYlthXSl9fXZhciBSYj17aW5qZWN0aW9uOktiLGVucXVldWVTdGF0ZVJlc3RvcmU6T2IsbmVlZHNTdGF0ZVJlc3RvcmU6UGIscmVzdG9yZVN0YXRlSWZOZWVkZWQ6UWJ9O2Z1bmN0aW9uIFNiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gVGIoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gVWIoKXt9dmFyIFZiPSExO2Z1bmN0aW9uIFdiKGEsYil7aWYoVmIpcmV0dXJuIGEoYik7VmI9ITA7dHJ5e3JldHVybiBTYihhLGIpfWZpbmFsbHl7VmI9ITEsUGIoKSYmKFViKCksUWIoKSl9fVxudmFyIFhiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIFliKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhWGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIFpiKGEpe2E9YS50YXJnZXR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9XG5mdW5jdGlvbiAkYihhLGIpe2lmKCFtLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTthPVwib25cIithO2I9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIGFjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hYyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gY2MoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPWJjKGEpKX1mdW5jdGlvbiBkYyhhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9YWMoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBlYz1jYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixJPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsZmM9ST9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxnYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsaGM9ST9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsaWM9ST9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsamM9ST9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsbWM9ST9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksbmM9ST9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxvYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLHBjPUk/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHFjPUk/U3ltYm9sLmZvcihcInJlYWN0LnRpbWVvdXRcIik6XG42MDExMyxyYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gc2MoYSl7aWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXJjJiZhW3JjXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWU7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBiO3N3aXRjaChiKXtjYXNlIG9jOnJldHVyblwiQXN5bmNNb2RlXCI7Y2FzZSBuYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGhjOnJldHVyblwiUmVhY3RGcmFnbWVudFwiO2Nhc2UgZ2M6cmV0dXJuXCJSZWFjdFBvcnRhbFwiO2Nhc2UgamM6cmV0dXJuXCJQcm9maWxlcihcIithLnBlbmRpbmdQcm9wcy5pZCtcIilcIjtjYXNlIG1jOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgaWM6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBxYzpyZXR1cm5cIlRpbWVvdXRcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXN3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHBjOnJldHVybiBhPWIucmVuZGVyLmRpc3BsYXlOYW1lfHxiLnJlbmRlci5uYW1lfHxcIlwiLFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIitcbmErXCIpXCI6XCJGb3J3YXJkUmVmXCJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdmMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSA1OnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZTt2YXIgZT10YyhhKTt2YXIgZj1udWxsO2MmJihmPXRjKGMpKTtjPWQ7ZT1cIlxcbiAgICBpbiBcIisoZXx8XCJVbmtub3duXCIpKyhjP1wiIChhdCBcIitjLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIrYy5saW5lTnVtYmVyK1wiKVwiOmY/XCIgKGNyZWF0ZWQgYnkgXCIrZitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6ZT1cIlwifWIrPWU7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciB3Yz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8seGM9e30seWM9e307ZnVuY3Rpb24gemMoYSl7aWYoeWMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoeGMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITE7aWYod2MudGVzdChhKSlyZXR1cm4geWNbYV09ITA7eGNbYV09ITA7cmV0dXJuITF9XG5mdW5jdGlvbiBBYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBCYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxBYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfVxuZnVuY3Rpb24gSihhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEs9e307XCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMCwhMSxhLG51bGwpfSk7XG5bW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07S1tiXT1uZXcgSihiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDIsITEsYSxudWxsKX0pO1xuXCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDMsITAsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsNCwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsNiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciBDYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIERjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKENjLFxuRGMpO0tbYl09bmV3IEooYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKENjLERjKTtLW2JdPW5ldyBKKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKENjLERjKTtLW2JdPW5ldyBKKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7Sy50YWJJbmRleD1uZXcgSihcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiBFYyhhLGIsYyxkKXt2YXIgZT1LLmhhc093blByb3BlcnR5KGIpP0tbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChCYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/emMoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIEZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBwKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBHYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1IYyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIEljKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmRWMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIEpjKGEsYil7SWMoYSxiKTt2YXIgYz1IYyhiLnZhbHVlKTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1iLnR5cGUpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0tjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJktjKGEsYi50eXBlLEhjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gTGMoYSxiKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpXCJcIj09PWEudmFsdWUmJihhLnZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSksYS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2I9YS5uYW1lO1wiXCIhPT1iJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YiYmKGEubmFtZT1iKX1mdW5jdGlvbiBLYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9XG5mdW5jdGlvbiBIYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19dmFyIE1jPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIE5jKGEsYixjKXthPUguZ2V0UG9vbGVkKE1jLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7T2IoYyk7WWEoYSk7cmV0dXJuIGF9dmFyIE9jPW51bGwsUGM9bnVsbDtmdW5jdGlvbiBRYyhhKXtJYShhLCExKX1mdW5jdGlvbiBSYyhhKXt2YXIgYj1PYShhKTtpZihkYyhiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIFNjKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIFRjPSExO20uY2FuVXNlRE9NJiYoVGM9JGIoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gVWMoKXtPYyYmKE9jLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFZjKSxQYz1PYz1udWxsKX1mdW5jdGlvbiBWYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmUmMoUGMpJiYoYT1OYyhQYyxhLFpiKGEpKSxXYihRYyxhKSl9ZnVuY3Rpb24gV2MoYSxiLGMpe1wiZm9jdXNcIj09PWE/KFVjKCksT2M9YixQYz1jLE9jLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFZjKSk6XCJibHVyXCI9PT1hJiZVYygpfWZ1bmN0aW9uIFhjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIFJjKFBjKX1cbmZ1bmN0aW9uIFljKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gUmMoYil9ZnVuY3Rpb24gWmMoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gUmMoYil9XG52YXIgJGM9e2V2ZW50VHlwZXM6TWMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpUYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/T2EoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPVNjOlliKGUpP1RjP2Y9WmM6KGY9WGMsZz1XYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9WWMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIE5jKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJm51bGwhPWImJihhPWIuX3dyYXBwZXJTdGF0ZXx8ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZLYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxhZD1ILmV4dGVuZCh7dmlldzpudWxsLFxuZGV0YWlsOm51bGx9KSxiZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gY2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1iZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIGRkKCl7cmV0dXJuIGNkfVxudmFyIGVkPWFkLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpkZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KSxmZD1lZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLGdkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LFxubW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxoZD17ZXZlbnRUeXBlczpnZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fFxuZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP05hKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsaz12b2lkIDAsbj12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1lZCxoPWdkLm1vdXNlTGVhdmUsaz1nZC5tb3VzZUVudGVyLG49XCJtb3VzZVwiO2Vsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9ZmQsaD1nZC5wb2ludGVyTGVhdmUsaz1nZC5wb2ludGVyRW50ZXIsbj1cInBvaW50ZXJcIjthPW51bGw9PWY/ZTpPYShmKTtlPW51bGw9PWI/ZTpPYShiKTtoPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2gudHlwZT1uK1wibGVhdmVcIjtoLnRhcmdldD1hO2gucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQoayxiLGMsZCk7Yy50eXBlPW4rXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PWE7WmEoaCxcbmMsZixiKTtyZXR1cm5baCxjXX19O2Z1bmN0aW9uIGlkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGpkKGEpezIhPT1pZChhKT9BKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIGtkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWlkKGEpLDM9PT1iP0EoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGpkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGpkKGUpLGI7Zz1nLnNpYmxpbmd9QShcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xudm9pZCAwOkEoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9BKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/QShcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBsZChhKXthPWtkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gbWQoYSl7YT1rZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBuZD1ILmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksb2Q9SC5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxwZD1hZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gcWQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcmQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHNkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx0ZD1hZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cmRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9cWQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3NkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpkZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9xZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9xZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHVkPWVkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx2ZD1hZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpkZH0pLHdkPUguZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHhkPWVkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSkseWQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbZmIsXCJhbmltYXRpb25FbmRcIl0sW2diLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFtoYixcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sW2liLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0semQ9e30sQWQ9e307ZnVuY3Rpb24gQmQoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTt6ZFthXT1iO0FkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFtcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxcbltcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXtCZChhLCEwKX0pO3lkLmZvckVhY2goZnVuY3Rpb24oYSl7QmQoYSwhMSl9KTtcbnZhciBDZD17ZXZlbnRUeXBlczp6ZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1BZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9QWRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1xZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9dGQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPXBkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9ZWQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnVkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9dmQ7YnJlYWs7Y2FzZSBmYjpjYXNlIGdiOmNhc2UgaGI6YT1uZDticmVhaztjYXNlIGliOmE9d2Q7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9YWQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT14ZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPW9kO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9ZmQ7YnJlYWs7ZGVmYXVsdDphPUh9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtZYShiKTtyZXR1cm4gYn19LERkPUNkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbkVkPVtdO2Z1bmN0aW9uIEZkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2MucmV0dXJuOyljPWMucmV0dXJuO2M9MyE9PWMudGFnP251bGw6Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighYylicmVhazthLmFuY2VzdG9ycy5wdXNoKGIpO2I9TmEoYyl9d2hpbGUoYik7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspYj1hLmFuY2VzdG9yc1tjXSxKYShhLnRvcExldmVsVHlwZSxiLGEubmF0aXZlRXZlbnQsWmIoYS5uYXRpdmVFdmVudCkpfXZhciBHZD0hMDtmdW5jdGlvbiBJZChhKXtHZD0hIWF9ZnVuY3Rpb24gTChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShEZChhKT9KZDpLZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfVxuZnVuY3Rpb24gTGQoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRGQoYSk/SmQ6S2QpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBKZChhLGIpe1RiKEtkLGEsYil9ZnVuY3Rpb24gS2QoYSxiKXtpZihHZCl7dmFyIGM9WmIoYik7Yz1OYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWlkKGMpfHwoYz1udWxsKTtpZihFZC5sZW5ndGgpe3ZhciBkPUVkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e1diKEZkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+RWQubGVuZ3RoJiZFZC5wdXNoKGEpfX19XG52YXIgTWQ9e2dldCBfZW5hYmxlZCgpe3JldHVybiBHZH0sc2V0RW5hYmxlZDpJZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gR2R9LHRyYXBCdWJibGVkRXZlbnQ6TCx0cmFwQ2FwdHVyZWRFdmVudDpMZCxkaXNwYXRjaEV2ZW50OktkfSxOZD17fSxPZD0wLFBkPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBRZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxQZCl8fChhW1BkXT1PZCsrLE5kW2FbUGRdXT17fSk7cmV0dXJuIE5kW2FbUGRdXX1mdW5jdGlvbiBSZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBTZChhLGIpe3ZhciBjPVJkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPVJkKGMpfX1mdW5jdGlvbiBUZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgVWQ9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxWZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFdkPW51bGwsWGQ9bnVsbCxZZD1udWxsLFpkPSExO1xuZnVuY3Rpb24gJGQoYSxiKXtpZihaZHx8bnVsbD09V2R8fFdkIT09ZGEoKSlyZXR1cm4gbnVsbDt2YXIgYz1XZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZUZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIFlkJiZlYShZZCxjKT9udWxsOihZZD1jLGE9SC5nZXRQb29sZWQoVmQuc2VsZWN0LFhkLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9V2QsWWEoYSksYSl9XG52YXIgYWU9e2V2ZW50VHlwZXM6VmQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9UWQoZSk7Zj1zYS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShoKXx8IWVbaF0pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP09hKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoWWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpV2Q9ZSxYZD1iLFlkPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpZZD1YZD1XZD1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpaZD0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOnJldHVybiBaZD0hMSwkZChjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihVZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuICRkKGMsZCl9cmV0dXJuIG51bGx9fTtHYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3dhPVFhLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7eGE9UWEuZ2V0SW5zdGFuY2VGcm9tTm9kZTt5YT1RYS5nZXROb2RlRnJvbUluc3RhbmNlO0dhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46Q2QsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmhkLENoYW5nZUV2ZW50UGx1Z2luOiRjLFNlbGVjdEV2ZW50UGx1Z2luOmFlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46SWJ9KTt2YXIgYmU9dm9pZCAwO1xuYmU9XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdz9mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07dmFyIGNlPXZvaWQgMCxkZT12b2lkIDA7XG5pZihtLmNhblVzZURPTSl7dmFyIGVlPVtdLGZlPTAsZ2U9e30saGU9LTEsaWU9ITEsamU9ITEsa2U9MCxsZT0zMyxtZT0zMyxuZT17ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9a2UtYmUoKTtyZXR1cm4gMDxhP2E6MH19LG9lPWZ1bmN0aW9uKGEsYil7aWYoZ2VbYl0pdHJ5e2EobmUpfWZpbmFsbHl7ZGVsZXRlIGdlW2JdfX0scGU9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGEpe2lmKGEuc291cmNlPT09d2luZG93JiZhLmRhdGE9PT1wZSYmKGllPSExLDAhPT1lZS5sZW5ndGgpKXtpZigwIT09ZWUubGVuZ3RoJiYoYT1iZSgpLCEoLTE9PT1oZXx8aGU+YSkpKXtoZT0tMTtuZS5kaWRUaW1lb3V0PSEwO2Zvcih2YXIgYj0wLGM9ZWUubGVuZ3RoO2I8YztiKyspe3ZhciBkPWVlW2JdLGU9ZC50aW1lb3V0VGltZTstMSE9PVxuZSYmZTw9YT9vZShkLnNjaGVkdWxlZENhbGxiYWNrLGQuY2FsbGJhY2tJZCk6LTEhPT1lJiYoLTE9PT1oZXx8ZTxoZSkmJihoZT1lKX19Zm9yKGE9YmUoKTswPGtlLWEmJjA8ZWUubGVuZ3RoOylhPWVlLnNoaWZ0KCksbmUuZGlkVGltZW91dD0hMSxvZShhLnNjaGVkdWxlZENhbGxiYWNrLGEuY2FsbGJhY2tJZCksYT1iZSgpOzA8ZWUubGVuZ3RoJiYhamUmJihqZT0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUocWUpKX19LCExKTt2YXIgcWU9ZnVuY3Rpb24oYSl7amU9ITE7dmFyIGI9YS1rZSttZTtiPG1lJiZsZTxtZT8oOD5iJiYoYj04KSxtZT1iPGxlP2xlOmIpOmxlPWI7a2U9YSttZTtpZXx8KGllPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShwZSxcIipcIikpfTtjZT1mdW5jdGlvbihhLGIpe3ZhciBjPS0xO251bGwhPWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0JiYoYz1iZSgpK2IudGltZW91dCk7aWYoLTE9PT1oZXx8LTEhPT1jJiZjPGhlKWhlPWM7ZmUrKztiPWZlO2VlLnB1c2goe3NjaGVkdWxlZENhbGxiYWNrOmEsXG5jYWxsYmFja0lkOmIsdGltZW91dFRpbWU6Y30pO2dlW2JdPSEwO2plfHwoamU9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKHFlKSk7cmV0dXJuIGJ9O2RlPWZ1bmN0aW9uKGEpe2RlbGV0ZSBnZVthXX19ZWxzZXt2YXIgcmU9MCxzZT17fTtjZT1mdW5jdGlvbihhKXt2YXIgYj1yZSsrLGM9c2V0VGltZW91dChmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9LGRpZFRpbWVvdXQ6ITF9KX0pO3NlW2JdPWM7cmV0dXJuIGJ9O2RlPWZ1bmN0aW9uKGEpe3ZhciBiPXNlW2FdO2RlbGV0ZSBzZVthXTtjbGVhclRpbWVvdXQoYil9fWZ1bmN0aW9uIHRlKGEpe3ZhciBiPVwiXCI7Y2EuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHVlKGEsYil7YT1wKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9dGUoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIHZlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiB3ZShhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19ZnVuY3Rpb24geGUoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0EoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIHAoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24geWUoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9BKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6QShcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpcIlwiK2N9fVxuZnVuY3Rpb24gemUoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gQWUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIEJlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIENlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gRGUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP0NlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIEVlPXZvaWQgMCxGZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1CZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtFZT1FZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtFZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1FZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBHZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIEhlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LEllPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhIZSkuZm9yRWFjaChmdW5jdGlvbihhKXtJZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO0hlW2JdPUhlW2FdfSl9KTtcbmZ1bmN0aW9uIEplKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fEhlLmhhc093blByb3BlcnR5KGUpJiZIZVtlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBLZT1wKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gTGUoYSxiLGMpe2ImJihLZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/QShcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0EoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6QShcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/QShcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gTWUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBOZT12LnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gT2UoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9UWQoYSk7Yj1zYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6TGQoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkxkKFwiZm9jdXNcIixhKTtMZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6JGIoZSwhMCkmJkxkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWpiLmluZGV4T2YoZSkmJkwoZSxhKX1jW2VdPSEwfX19XG5mdW5jdGlvbiBQZShhLGIsYyxkKXtjPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2Q9PT1CZS5odG1sJiYoZD1DZShhKSk7ZD09PUJlLmh0bWw/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX1mdW5jdGlvbiBRZShhLGIpe3JldHVybig5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoYSl9XG5mdW5jdGlvbiBSZShhLGIsYyxkKXt2YXIgZT1NZShiLGMpO3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkwoXCJsb2FkXCIsYSk7dmFyIGY9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZj0wO2Y8amIubGVuZ3RoO2YrKylMKGpiW2ZdLGEpO2Y9YzticmVhaztjYXNlIFwic291cmNlXCI6TChcImVycm9yXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkwoXCJlcnJvclwiLGEpO0woXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6TChcInJlc2V0XCIsYSk7TChcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOkwoXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6R2MoYSxjKTtmPUZjKGEsYyk7TChcImludmFsaWRcIixhKTtPZShkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9dWUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6d2UoYSxjKTtmPXAoe30sYyx7dmFsdWU6dm9pZCAwfSk7XG5MKFwiaW52YWxpZFwiLGEpO09lKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp5ZShhLGMpO2Y9eGUoYSxjKTtMKFwiaW52YWxpZFwiLGEpO09lKGQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmY9Y31MZShiLGYsTmUpO3ZhciBnPWYsaDtmb3IoaCBpbiBnKWlmKGcuaGFzT3duUHJvcGVydHkoaCkpe3ZhciBrPWdbaF07XCJzdHlsZVwiPT09aD9KZShhLGssTmUpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmRmUoYSxrKSk6XCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWJ8fFwiXCIhPT1rKSYmR2UoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJkdlKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYocmEuaGFzT3duUHJvcGVydHkoaCk/bnVsbCE9ayYmT2UoZCxcbmgpOm51bGwhPWsmJkVjKGEsaCxrLGUpKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Y2MoYSk7TGMoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjYyhhKTtBZShhLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYy52YWx1ZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFjLm11bHRpcGxlO2I9Yy52YWx1ZTtudWxsIT1iP3ZlKGEsISFjLm11bHRpcGxlLGIsITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZ2ZShhLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfX1cbmZ1bmN0aW9uIFNlKGEsYixjLGQsZSl7dmFyIGY9bnVsbDtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Yz1GYyhhLGMpO2Q9RmMoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpjPXVlKGEsYyk7ZD11ZShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9cCh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtkPXAoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjPXhlKGEsYyk7ZD14ZShhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfUxlKGIsZCxOZSk7Yj1hPXZvaWQgMDt2YXIgZz1udWxsO2ZvcihhIGluIGMpaWYoIWQuaGFzT3duUHJvcGVydHkoYSkmJmMuaGFzT3duUHJvcGVydHkoYSkmJm51bGwhPWNbYV0paWYoXCJzdHlsZVwiPT09YSl7dmFyIGg9Y1thXTtmb3IoYiBpbiBoKWguaGFzT3duUHJvcGVydHkoYikmJihnfHxcbihnPXt9KSxnW2JdPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1hJiZcImNoaWxkcmVuXCIhPT1hJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJlwiYXV0b0ZvY3VzXCIhPT1hJiYocmEuaGFzT3duUHJvcGVydHkoYSk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGEsbnVsbCkpO2ZvcihhIGluIGQpe3ZhciBrPWRbYV07aD1udWxsIT1jP2NbYV06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYSkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09YSlpZihoKXtmb3IoYiBpbiBoKSFoLmhhc093blByb3BlcnR5KGIpfHxrJiZrLmhhc093blByb3BlcnR5KGIpfHwoZ3x8KGc9e30pLGdbYl09XCJcIik7Zm9yKGIgaW4gaylrLmhhc093blByb3BlcnR5KGIpJiZoW2JdIT09a1tiXSYmKGd8fChnPXt9KSxnW2JdPWtbYl0pfWVsc2UgZ3x8KGZ8fChmPVtdKSxmLnB1c2goYSxnKSksXG5nPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWE/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2goYSxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1hP2g9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmKHJhLmhhc093blByb3BlcnR5KGEpPyhudWxsIT1rJiZPZShlLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGEsaykpfWcmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixnKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIFRlKGEsYixjLGQsZSl7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJkljKGEsZSk7TWUoYyxkKTtkPU1lKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/SmUoYSxoLE5lKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP0ZlKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9HZShhLGgpOkVjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpKYyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnplKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwLGI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/dmUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP1xudmUoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsITApOnZlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1cbmZ1bmN0aW9uIFVlKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6TChcImxvYWRcIixhKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZD0wO2Q8amIubGVuZ3RoO2QrKylMKGpiW2RdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpMKFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpMKFwiZXJyb3JcIixhKTtMKFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6TChcInJlc2V0XCIsYSk7TChcInN1Ym1pdFwiLGEpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6TChcInRvZ2dsZVwiLGEpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkdjKGEsYyk7TChcImludmFsaWRcIixhKTtPZShlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOndlKGEsYyk7TChcImludmFsaWRcIixhKTtPZShlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eWUoYSxjKSxMKFwiaW52YWxpZFwiLGEpLE9lKGUsXCJvbkNoYW5nZVwiKX1MZShiLFxuYyxOZSk7ZD1udWxsO2Zvcih2YXIgZiBpbiBjKWlmKGMuaGFzT3duUHJvcGVydHkoZikpe3ZhciBnPWNbZl07XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGc/YS50ZXh0Q29udGVudCE9PWcmJihkPVtcImNoaWxkcmVuXCIsZ10pOlwibnVtYmVyXCI9PT10eXBlb2YgZyYmYS50ZXh0Q29udGVudCE9PVwiXCIrZyYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ddKTpyYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9ZyYmT2UoZSxmKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Y2MoYSk7TGMoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjYyhhKTtBZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfXJldHVybiBkfWZ1bmN0aW9uIFZlKGEsYil7cmV0dXJuIGEubm9kZVZhbHVlIT09Yn1cbnZhciBXZT17Y3JlYXRlRWxlbWVudDpQZSxjcmVhdGVUZXh0Tm9kZTpRZSxzZXRJbml0aWFsUHJvcGVydGllczpSZSxkaWZmUHJvcGVydGllczpTZSx1cGRhdGVQcm9wZXJ0aWVzOlRlLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6VWUsZGlmZkh5ZHJhdGVkVGV4dDpWZSx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpKYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO1xuYz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1QYShkKTtlP3ZvaWQgMDpBKFwiOTBcIik7ZGMoZCk7SmMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnplKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZ2ZShhLCEhYy5tdWx0aXBsZSxiLCExKX19fSxYZT1udWxsLFllPW51bGw7ZnVuY3Rpb24gWmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gJGUoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgYWY9YmUsYmY9Y2UsY2Y9ZGU7ZnVuY3Rpb24gZGYoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlZihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgZmY9W10sZ2Y9LTE7ZnVuY3Rpb24gaGYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBNKGEpezA+Z2Z8fChhLmN1cnJlbnQ9ZmZbZ2ZdLGZmW2dmXT1udWxsLGdmLS0pfWZ1bmN0aW9uIE4oYSxiKXtnZisrO2ZmW2dmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIGpmPWhmKGhhKSxPPWhmKCExKSxrZj1oYTtmdW5jdGlvbiBsZihhKXtyZXR1cm4gbWYoYSk/a2Y6amYuY3VycmVudH1cbmZ1bmN0aW9uIG5mKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gaGE7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gbWYoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIG9mKGEpe21mKGEpJiYoTShPLGEpLE0oamYsYSkpfWZ1bmN0aW9uIHBmKGEpe00oTyxhKTtNKGpmLGEpfVxuZnVuY3Rpb24gcWYoYSxiLGMpe2pmLmN1cnJlbnQhPT1oYT9BKFwiMTY4XCIpOnZvaWQgMDtOKGpmLGIsYSk7TihPLGMsYSl9ZnVuY3Rpb24gcmYoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6QShcIjEwOFwiLHRjKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gcCh7fSxiLGMpfWZ1bmN0aW9uIHNmKGEpe2lmKCFtZihhKSlyZXR1cm4hMTt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fGhhO2tmPWpmLmN1cnJlbnQ7TihqZixiLGEpO04oTyxPLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiB0ZihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkEoXCIxNjlcIik7aWYoYil7dmFyIGQ9cmYoYSxrZik7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1kO00oTyxhKTtNKGpmLGEpO04oamYsZCxhKX1lbHNlIE0oTyxhKTtOKE8sYixhKX1cbmZ1bmN0aW9uIHVmKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiB2ZihhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IHVmKGEudGFnLGIsYS5rZXksYS5tb2RlKSxkLnR5cGU9YS50eXBlLGQuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGQuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9ZCk6KGQucGVuZGluZ1Byb3BzPWIsZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLmNoaWxkPWEuY2hpbGQ7ZC5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztkLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2QudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtkLnNpYmxpbmc9YS5zaWJsaW5nO2QuaW5kZXg9YS5pbmRleDtkLnJlZj1hLnJlZjtyZXR1cm4gZH1cbmZ1bmN0aW9uIHdmKGEsYixjKXt2YXIgZD1hLnR5cGUsZT1hLmtleTthPWEucHJvcHM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpdmFyIGY9ZC5wcm90b3R5cGUmJmQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ/MjowO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkKWY9NTtlbHNlIHN3aXRjaChkKXtjYXNlIGhjOnJldHVybiB4ZihhLmNoaWxkcmVuLGIsYyxlKTtjYXNlIG9jOmY9MTE7Ynw9MzticmVhaztjYXNlIGljOmY9MTE7Ynw9MjticmVhaztjYXNlIGpjOnJldHVybiBkPW5ldyB1ZigxNSxhLGUsYnw0KSxkLnR5cGU9amMsZC5leHBpcmF0aW9uVGltZT1jLGQ7Y2FzZSBxYzpmPTE2O2J8PTI7YnJlYWs7ZGVmYXVsdDphOntzd2l0Y2goXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZD9kLiQkdHlwZW9mOm51bGwpe2Nhc2UgbWM6Zj0xMzticmVhayBhO2Nhc2UgbmM6Zj0xMjticmVhayBhO2Nhc2UgcGM6Zj0xNDticmVhayBhO2RlZmF1bHQ6QShcIjEzMFwiLG51bGw9PWQ/XG5kOnR5cGVvZiBkLFwiXCIpfWY9dm9pZCAwfX1iPW5ldyB1ZihmLGEsZSxiKTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24geGYoYSxiLGMsZCl7YT1uZXcgdWYoMTAsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiB5ZihhLGIsYyl7YT1uZXcgdWYoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIHpmKGEsYixjKXtiPW5ldyB1Zig0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFmKGEsYixjKXtiPW5ldyB1ZigzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxlYXJsaWVzdFBlbmRpbmdUaW1lOjAsbGF0ZXN0UGVuZGluZ1RpbWU6MCxlYXJsaWVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0UGluZ2VkVGltZTowLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxyZW1haW5pbmdFeHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYi5zdGF0ZU5vZGU9YX12YXIgQmY9bnVsbCxDZj1udWxsO2Z1bmN0aW9uIERmKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBFZihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtCZj1EZihmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7Q2Y9RGYoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBGZihhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQmYmJkJmKGEpfWZ1bmN0aW9uIEdmKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBDZiYmQ2YoYSl9dmFyIEhmPSExO1xuZnVuY3Rpb24gSWYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOjAsYmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gSmYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEuZXhwaXJhdGlvblRpbWUsYmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBLZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBMZihhLGIsYyl7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9Y31cbmZ1bmN0aW9uIE1mKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtpZihudWxsPT09ZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt2YXIgZj1udWxsO251bGw9PT1lJiYoZT1hLnVwZGF0ZVF1ZXVlPUlmKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZT1hLnVwZGF0ZVF1ZXVlLGY9ZC51cGRhdGVRdWV1ZSxudWxsPT09ZT9udWxsPT09Zj8oZT1hLnVwZGF0ZVF1ZXVlPUlmKGEubWVtb2l6ZWRTdGF0ZSksZj1kLnVwZGF0ZVF1ZXVlPUlmKGQubWVtb2l6ZWRTdGF0ZSkpOmU9YS51cGRhdGVRdWV1ZT1KZihmKTpudWxsPT09ZiYmKGY9ZC51cGRhdGVRdWV1ZT1KZihlKSk7bnVsbD09PWZ8fGU9PT1mP0xmKGUsYixjKTpudWxsPT09ZS5sYXN0VXBkYXRlfHxudWxsPT09Zi5sYXN0VXBkYXRlPyhMZihlLGIsYyksTGYoZixiLGMpKTooTGYoZSxiLGMpLGYubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIE5mKGEsYixjKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO2Q9bnVsbD09PWQ/YS51cGRhdGVRdWV1ZT1JZihhLm1lbW9pemVkU3RhdGUpOk9mKGEsZCk7bnVsbD09PWQubGFzdENhcHR1cmVkVXBkYXRlP2QuZmlyc3RDYXB0dXJlZFVwZGF0ZT1kLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihkLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsZC5sYXN0Q2FwdHVyZWRVcGRhdGU9Yik7aWYoMD09PWQuZXhwaXJhdGlvblRpbWV8fGQuZXhwaXJhdGlvblRpbWU+YylkLmV4cGlyYXRpb25UaW1lPWN9ZnVuY3Rpb24gT2YoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9SmYoYikpO3JldHVybiBifVxuZnVuY3Rpb24gUGYoYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSAzOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDY0O2Nhc2UgMDphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gcCh7fSxkLGUpO2Nhc2UgMjpIZj0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIFFmKGEsYixjLGQsZSl7SGY9ITE7aWYoISgwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5lKSl7Yj1PZihhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGs9Yi5maXJzdFVwZGF0ZSxuPWY7bnVsbCE9PWs7KXt2YXIgcj1rLmV4cGlyYXRpb25UaW1lO2lmKHI+ZSl7aWYobnVsbD09PWcmJihnPWssZj1uKSwwPT09aHx8aD5yKWg9cn1lbHNlIG49UGYoYSxiLGssbixjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpO2s9ay5uZXh0fXI9bnVsbDtmb3Ioaz1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWs7KXt2YXIgdz1rLmV4cGlyYXRpb25UaW1lO2lmKHc+ZSl7aWYobnVsbD09PXImJihyPWssbnVsbD09PVxuZyYmKGY9bikpLDA9PT1ofHxoPncpaD13fWVsc2Ugbj1QZihhLGIsayxuLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpO2s9ay5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1yP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09ciYmKGY9bik7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPXI7Yi5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1ufX1cbmZ1bmN0aW9uIFJmKGEsYil7XCJmdW5jdGlvblwiIT09dHlwZW9mIGE/QShcIjE5MVwiLGEpOnZvaWQgMDthLmNhbGwoYil9XG5mdW5jdGlvbiBTZihhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7YT1iLmZpcnN0RWZmZWN0O2ZvcihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO251bGwhPT1hOyl7dmFyIGQ9YS5jYWxsYmFjaztudWxsIT09ZCYmKGEuY2FsbGJhY2s9bnVsbCxSZihkLGMpKTthPWEubmV4dEVmZmVjdH1hPWIuZmlyc3RDYXB0dXJlZEVmZmVjdDtmb3IoYi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGw7bnVsbCE9PWE7KWI9YS5jYWxsYmFjayxudWxsIT09YiYmKGEuY2FsbGJhY2s9bnVsbCxSZihiLGMpKSxhPWEubmV4dEVmZmVjdH1cbmZ1bmN0aW9uIFRmKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6dmMoYil9fXZhciBVZj1oZihudWxsKSxWZj1oZihudWxsKSxXZj1oZigwKTtmdW5jdGlvbiBYZihhKXt2YXIgYj1hLnR5cGUuX2NvbnRleHQ7TihXZixiLl9jaGFuZ2VkQml0cyxhKTtOKFZmLGIuX2N1cnJlbnRWYWx1ZSxhKTtOKFVmLGEsYSk7Yi5fY3VycmVudFZhbHVlPWEucGVuZGluZ1Byb3BzLnZhbHVlO2IuX2NoYW5nZWRCaXRzPWEuc3RhdGVOb2RlfWZ1bmN0aW9uIFlmKGEpe3ZhciBiPVdmLmN1cnJlbnQsYz1WZi5jdXJyZW50O00oVWYsYSk7TShWZixhKTtNKFdmLGEpO2E9YS50eXBlLl9jb250ZXh0O2EuX2N1cnJlbnRWYWx1ZT1jO2EuX2NoYW5nZWRCaXRzPWJ9dmFyIFpmPXt9LCRmPWhmKFpmKSxhZz1oZihaZiksYmc9aGYoWmYpO2Z1bmN0aW9uIGNnKGEpe2E9PT1aZj9BKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRnKGEsYil7TihiZyxiLGEpO04oYWcsYSxhKTtOKCRmLFpmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOkRlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1EZShiLGMpfU0oJGYsYSk7TigkZixiLGEpfWZ1bmN0aW9uIGVnKGEpe00oJGYsYSk7TShhZyxhKTtNKGJnLGEpfWZ1bmN0aW9uIGZnKGEpe2FnLmN1cnJlbnQ9PT1hJiYoTSgkZixhKSxNKGFnLGEpKX1mdW5jdGlvbiBoZyhhLGIsYyl7dmFyIGQ9YS5tZW1vaXplZFN0YXRlO2I9YihjLGQpO2Q9bnVsbD09PWJ8fHZvaWQgMD09PWI/ZDpwKHt9LGQsYik7YS5tZW1vaXplZFN0YXRlPWQ7YT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1hJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGEuYmFzZVN0YXRlPWQpfVxudmFyIGxnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09aWQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9aWcoKTtkPWpnKGQsYSk7dmFyIGU9S2YoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO01mKGEsZSxkKTtrZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1pZygpO2Q9amcoZCxhKTt2YXIgZT1LZihkKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtNZihhLGUsZCk7a2coYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9aWcoKTtjPWpnKGMsYSk7dmFyIGQ9S2YoYyk7ZC50YWc9Mjt2b2lkIDAhPT1cbmImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtNZihhLGQsYyk7a2coYSxjKX19O2Z1bmN0aW9uIG1nKGEsYixjLGQsZSxmKXt2YXIgZz1hLnN0YXRlTm9kZTthPWEudHlwZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5zaG91bGRDb21wb25lbnRVcGRhdGU/Zy5zaG91bGRDb21wb25lbnRVcGRhdGUoYyxlLGYpOmEucHJvdG90eXBlJiZhLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hZWEoYixjKXx8IWVhKGQsZSk6ITB9XG5mdW5jdGlvbiBuZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmbGcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBvZyhhLGIpe3ZhciBjPWEudHlwZSxkPWEuc3RhdGVOb2RlLGU9YS5wZW5kaW5nUHJvcHMsZj1sZihhKTtkLnByb3BzPWU7ZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC5yZWZzPWhhO2QuY29udGV4dD1uZihhLGYpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKFFmKGEsZixlLGQsYiksZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGhnKGEsZixlKSxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50fHwoYz1kLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudCYmXG5kLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1kLnN0YXRlJiZsZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGQsZC5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJihRZihhLGYsZSxkLGIpLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIHBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBxZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigyIT09Yy50YWc/QShcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6QShcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PWhhP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/QShcIjE0OFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOkEoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIHJnKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZBKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBzZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXZmKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eWYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9cWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPXdmKGMsYS5tb2RlLGQpO2QucmVmPXFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIG4oYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuemYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPXhmKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiB3KGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj15ZihcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBmYzpyZXR1cm4gYz13ZihiLGEubW9kZSxjKSxjLnJlZj1xZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgZ2M6cmV0dXJuIGI9emYoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKHBnKGIpfHxzYyhiKSlyZXR1cm4gYj14ZihiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPVxuYSxiO3JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gUChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBmYzpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWhjP3IoYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBnYzpyZXR1cm4gYy5rZXk9PT1lP24oYSxiLGMsZCk6bnVsbH1pZihwZyhjKXx8c2MoYykpcmV0dXJuIG51bGwhPT1lP251bGw6cihhLGIsYyxkLG51bGwpO3JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24ga2MoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBmYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09aGM/cihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgZ2M6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLG4oYixhLGQsZSl9aWYocGcoZCl8fHNjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLHIoYixhLGQsZSxudWxsKTtyZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIEhkKGUsZyxoLGspe2Zvcih2YXIgdT1udWxsLHg9bnVsbCx0PWcscT1nPTAsbj1udWxsO251bGwhPT10JiZxPGgubGVuZ3RoO3ErKyl7dC5pbmRleD5xPyhuPXQsdD1udWxsKTpuPXQuc2libGluZzt2YXIgbD1QKGUsdCxoW3FdLGspO2lmKG51bGw9PT1sKXtudWxsPT09dCYmKHQ9bik7YnJlYWt9YSYmdCYmbnVsbD09PWwuYWx0ZXJuYXRlJiZiKGUsXG50KTtnPWYobCxnLHEpO251bGw9PT14P3U9bDp4LnNpYmxpbmc9bDt4PWw7dD1ufWlmKHE9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHQpLHU7aWYobnVsbD09PXQpe2Zvcig7cTxoLmxlbmd0aDtxKyspaWYodD13KGUsaFtxXSxrKSlnPWYodCxnLHEpLG51bGw9PT14P3U9dDp4LnNpYmxpbmc9dCx4PXQ7cmV0dXJuIHV9Zm9yKHQ9ZChlLHQpO3E8aC5sZW5ndGg7cSsrKWlmKG49a2ModCxlLHEsaFtxXSxrKSlhJiZudWxsIT09bi5hbHRlcm5hdGUmJnQuZGVsZXRlKG51bGw9PT1uLmtleT9xOm4ua2V5KSxnPWYobixnLHEpLG51bGw9PT14P3U9bjp4LnNpYmxpbmc9bix4PW47YSYmdC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gdX1mdW5jdGlvbiBFKGUsZyxoLGspe3ZhciB0PXNjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB0P0EoXCIxNTBcIik6dm9pZCAwO2g9dC5jYWxsKGgpO251bGw9PWg/QShcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciB1PXQ9bnVsbCxuPWcseD1cbmc9MCx5PW51bGwsbD1oLm5leHQoKTtudWxsIT09biYmIWwuZG9uZTt4KyssbD1oLm5leHQoKSl7bi5pbmRleD54Pyh5PW4sbj1udWxsKTp5PW4uc2libGluZzt2YXIgcj1QKGUsbixsLnZhbHVlLGspO2lmKG51bGw9PT1yKXtufHwobj15KTticmVha31hJiZuJiZudWxsPT09ci5hbHRlcm5hdGUmJmIoZSxuKTtnPWYocixnLHgpO251bGw9PT11P3Q9cjp1LnNpYmxpbmc9cjt1PXI7bj15fWlmKGwuZG9uZSlyZXR1cm4gYyhlLG4pLHQ7aWYobnVsbD09PW4pe2Zvcig7IWwuZG9uZTt4KyssbD1oLm5leHQoKSlsPXcoZSxsLnZhbHVlLGspLG51bGwhPT1sJiYoZz1mKGwsZyx4KSxudWxsPT09dT90PWw6dS5zaWJsaW5nPWwsdT1sKTtyZXR1cm4gdH1mb3Iobj1kKGUsbik7IWwuZG9uZTt4KyssbD1oLm5leHQoKSlsPWtjKG4sZSx4LGwudmFsdWUsayksbnVsbCE9PWwmJihhJiZudWxsIT09bC5hbHRlcm5hdGUmJm4uZGVsZXRlKG51bGw9PT1sLmtleT94Omwua2V5KSxnPWYobCxnLHgpLG51bGw9PT1cbnU/dD1sOnUuc2libGluZz1sLHU9bCk7YSYmbi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gdH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09aGMmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihrKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIGZjOmE6e3ZhciBuPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PW4paWYoMTA9PT1rLnRhZz9mLnR5cGU9PT1oYzprLnR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PWhjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1xZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1oYz8oZD14ZihmLnByb3BzLmNoaWxkcmVuLFxuYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD13ZihmLGEubW9kZSxoKSxoLnJlZj1xZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgZ2M6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD16ZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1cbmEsYT1kKTooYyhhLGQpLGQ9eWYoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYocGcoZikpcmV0dXJuIEhkKGEsZCxmLGgpO2lmKHNjKGYpKXJldHVybiBFKGEsZCxmLGgpO2smJnJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpoPWEudHlwZSxBKFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgdGc9c2coITApLHVnPXNnKCExKSx2Zz1udWxsLHdnPW51bGwseGc9ITE7ZnVuY3Rpb24geWcoYSxiKXt2YXIgYz1uZXcgdWYoNSxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiB6ZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBBZyhhKXtpZih4Zyl7dmFyIGI9d2c7aWYoYil7dmFyIGM9YjtpZighemcoYSxiKSl7Yj1kZihjKTtpZighYnx8IXpnKGEsYikpe2EuZWZmZWN0VGFnfD0yO3hnPSExO3ZnPWE7cmV0dXJufXlnKHZnLGMpfXZnPWE7d2c9ZWYoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix4Zz0hMSx2Zz1hfX1cbmZ1bmN0aW9uIEJnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hLnJldHVybjt2Zz1hfWZ1bmN0aW9uIENnKGEpe2lmKGEhPT12ZylyZXR1cm4hMTtpZigheGcpcmV0dXJuIEJnKGEpLHhnPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhJGUoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPXdnO2I7KXlnKGEsYiksYj1kZihiKTtCZyhhKTt3Zz12Zz9kZihhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBEZygpe3dnPXZnPW51bGw7eGc9ITF9ZnVuY3Rpb24gUShhLGIsYyl7RWcoYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gRWcoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT91ZyhiLG51bGwsYyxkKTp0ZyhiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIEZnKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gR2coYSxiLGMsZCxlKXtGZyhhLGIpO3ZhciBmPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFjJiYhZilyZXR1cm4gZCYmdGYoYiwhMSksUihhLGIpO2M9Yi5zdGF0ZU5vZGU7ZWMuY3VycmVudD1iO3ZhciBnPWY/bnVsbDpjLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2YmJihFZyhhLGIsbnVsbCxlKSxiLmNoaWxkPW51bGwpO0VnKGEsYixnLGUpO2IubWVtb2l6ZWRTdGF0ZT1jLnN0YXRlO2IubWVtb2l6ZWRQcm9wcz1jLnByb3BzO2QmJnRmKGIsITApO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gSGcoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9xZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZxZihhLGIuY29udGV4dCwhMSk7ZGcoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gSWcoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDtudWxsIT09ZSYmKGUucmV0dXJuPWEpO2Zvcig7bnVsbCE9PWU7KXtzd2l0Y2goZS50YWcpe2Nhc2UgMTI6dmFyIGY9ZS5zdGF0ZU5vZGV8MDtpZihlLnR5cGU9PT1iJiYwIT09KGYmYykpe2ZvcihmPWU7bnVsbCE9PWY7KXt2YXIgZz1mLmFsdGVybmF0ZTtpZigwPT09Zi5leHBpcmF0aW9uVGltZXx8Zi5leHBpcmF0aW9uVGltZT5kKWYuZXhwaXJhdGlvblRpbWU9ZCxudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpJiYoZy5leHBpcmF0aW9uVGltZT1kKTtlbHNlIGlmKG51bGwhPT1nJiYoMD09PWcuZXhwaXJhdGlvblRpbWV8fGcuZXhwaXJhdGlvblRpbWU+ZCkpZy5leHBpcmF0aW9uVGltZT1kO2Vsc2UgYnJlYWs7Zj1mLnJldHVybn1mPW51bGx9ZWxzZSBmPWUuY2hpbGQ7YnJlYWs7Y2FzZSAxMzpmPWUudHlwZT09PWEudHlwZT9udWxsOmUuY2hpbGQ7YnJlYWs7ZGVmYXVsdDpmPVxuZS5jaGlsZH1pZihudWxsIT09ZilmLnJldHVybj1lO2Vsc2UgZm9yKGY9ZTtudWxsIT09Zjspe2lmKGY9PT1hKXtmPW51bGw7YnJlYWt9ZT1mLnNpYmxpbmc7aWYobnVsbCE9PWUpe2UucmV0dXJuPWYucmV0dXJuO2Y9ZTticmVha31mPWYucmV0dXJufWU9Zn19XG5mdW5jdGlvbiBKZyhhLGIsYyl7dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkUHJvcHMsZz0hMDtpZihPLmN1cnJlbnQpZz0hMTtlbHNlIGlmKGY9PT1lKXJldHVybiBiLnN0YXRlTm9kZT0wLFhmKGIpLFIoYSxiKTt2YXIgaD1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO2lmKG51bGw9PT1mKWg9MTA3Mzc0MTgyMztlbHNlIGlmKGYudmFsdWU9PT1lLnZhbHVlKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxYZihiKSxSKGEsYik7aD0wfWVsc2V7dmFyIGs9Zi52YWx1ZTtpZihrPT09aCYmKDAhPT1rfHwxL2s9PT0xL2gpfHxrIT09ayYmaCE9PWgpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiZnKXJldHVybiBiLnN0YXRlTm9kZT0wLFhmKGIpLFIoYSxiKTtoPTB9ZWxzZSBpZihoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhrLFxuaCk6MTA3Mzc0MTgyMyxofD0wLDA9PT1oKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxYZihiKSxSKGEsYil9ZWxzZSBJZyhiLGQsaCxjKX1iLnN0YXRlTm9kZT1oO1hmKGIpO1EoYSxiLGUuY2hpbGRyZW4pO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFIoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/QShcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz12ZihhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz12ZihhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBLZyhhLGIsYyl7aWYoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+Yyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6SGcoYik7YnJlYWs7Y2FzZSAyOnNmKGIpO2JyZWFrO2Nhc2UgNDpkZyhiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTM6WGYoYil9cmV0dXJuIG51bGx9c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/QShcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1sZihiKTtmPW5mKGIsZik7ZD1kKGUsZik7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyJiZ2b2lkIDA9PT1kLiQkdHlwZW9mPyhmPWIudHlwZSxiLnRhZz0yLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZC5zdGF0ZSYmdm9pZCAwIT09ZC5zdGF0ZT9kLnN0YXRlOm51bGwsZj1mLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBmJiZoZyhiLGYsZSksZT1zZihiKSxkLnVwZGF0ZXI9bGcsYi5zdGF0ZU5vZGU9ZCxkLl9yZWFjdEludGVybmFsRmliZXI9YixvZyhiLGMpLGE9R2coYSxiLCEwLGUsYykpOihiLnRhZz0xLFEoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk7cmV0dXJuIGE7Y2FzZSAxOnJldHVybiBlPWIudHlwZSxjPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09Yz8oZD1sZihiKSxkPW5mKGIsZCksZT1lKGMsZCksYi5lZmZlY3RUYWd8PTEsUShhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMjplPXNmKGIpO2lmKG51bGw9PT1hKWlmKG51bGw9PT1iLnN0YXRlTm9kZSl7dmFyIGc9Yi5wZW5kaW5nUHJvcHMsaD1iLnR5cGU7ZD1sZihiKTt2YXIgaz0yPT09Yi50YWcmJm51bGwhPWIudHlwZS5jb250ZXh0VHlwZXM7Zj1rP25mKGIsZCk6aGE7Zz1uZXcgaChnLGYpO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09XG5nLnN0YXRlJiZ2b2lkIDAhPT1nLnN0YXRlP2cuc3RhdGU6bnVsbDtnLnVwZGF0ZXI9bGc7Yi5zdGF0ZU5vZGU9ZztnLl9yZWFjdEludGVybmFsRmliZXI9YjtrJiYoaz1iLnN0YXRlTm9kZSxrLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZCxrLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO29nKGIsYyk7ZD0hMH1lbHNle2g9Yi50eXBlO2Q9Yi5zdGF0ZU5vZGU7az1iLm1lbW9pemVkUHJvcHM7Zj1iLnBlbmRpbmdQcm9wcztkLnByb3BzPWs7dmFyIG49ZC5jb250ZXh0O2c9bGYoYik7Zz1uZihiLGcpO3ZhciByPWguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihrIT09Znx8biE9PWcpJiZuZyhiLGQsZixnKTtIZj0hMTt2YXIgdz1iLm1lbW9pemVkU3RhdGU7bj1kLnN0YXRlPXc7dmFyIFA9Yi51cGRhdGVRdWV1ZTtudWxsIT09UCYmKFFmKGIsUCxmLGQsYyksbj1iLm1lbW9pemVkU3RhdGUpO2shPT1mfHx3IT09bnx8Ty5jdXJyZW50fHxIZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHImJihoZyhiLHIsZiksbj1iLm1lbW9pemVkU3RhdGUpLChrPUhmfHxtZyhiLGssZix3LG4sZykpPyhofHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnQmJmQuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiZcbihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZixiLm1lbW9pemVkU3RhdGU9biksZC5wcm9wcz1mLGQuc3RhdGU9bixkLmNvbnRleHQ9ZyxkPWspOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGg9Yi50eXBlLGQ9Yi5zdGF0ZU5vZGUsZj1iLm1lbW9pemVkUHJvcHMsaz1iLnBlbmRpbmdQcm9wcyxkLnByb3BzPWYsbj1kLmNvbnRleHQsZz1sZihiKSxnPW5mKGIsZykscj1oLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oZiE9PWt8fG4hPT1nKSYmbmcoYixkLGssZyksSGY9ITEsbj1iLm1lbW9pemVkU3RhdGUsdz1kLnN0YXRlPW4sUD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1QJiYoUWYoYixQLGssZCxjKSx3PWIubWVtb2l6ZWRTdGF0ZSksZiE9PWt8fG4hPT13fHxPLmN1cnJlbnR8fEhmPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgciYmKGhnKGIscixrKSx3PWIubWVtb2l6ZWRTdGF0ZSksKHI9SGZ8fG1nKGIsZixrLG4sdyxnKSk/KGh8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVwZGF0ZSYmZC5jb21wb25lbnRXaWxsVXBkYXRlKGssdyxnKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShrLHcsZykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZFVwZGF0ZSYmXG4oYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ayxiLm1lbW9pemVkU3RhdGU9dyksZC5wcm9wcz1rLGQuc3RhdGU9dyxkLmNvbnRleHQ9ZyxkPXIpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFxuZj09PWEubWVtb2l6ZWRQcm9wcyYmbj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBHZyhhLGIsZCxlLGMpO2Nhc2UgMzpIZyhiKTtlPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWUpaWYoZD1iLm1lbW9pemVkU3RhdGUsZD1udWxsIT09ZD9kLmVsZW1lbnQ6bnVsbCxRZihiLGUsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKSxlPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50LGU9PT1kKURnKCksYT1SKGEsYik7ZWxzZXtkPWIuc3RhdGVOb2RlO2lmKGQ9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmQuaHlkcmF0ZSl3Zz1lZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSx2Zz1iLGQ9eGc9ITA7ZD8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD11ZyhiLG51bGwsZSxjKSk6KERnKCksUShhLGIsZSkpO2E9Yi5jaGlsZH1lbHNlIERnKCksYT1SKGEsYik7cmV0dXJuIGE7Y2FzZSA1OmE6e2NnKGJnLmN1cnJlbnQpO2U9Y2coJGYuY3VycmVudCk7ZD1EZShlLFxuYi50eXBlKTtlIT09ZCYmKE4oYWcsYixiKSxOKCRmLGQsYikpO251bGw9PT1hJiZBZyhiKTtlPWIudHlwZTtrPWIubWVtb2l6ZWRQcm9wcztkPWIucGVuZGluZ1Byb3BzO2Y9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7aWYoIU8uY3VycmVudCYmaz09PWQpe2lmKGs9Yi5tb2RlJjEmJiEhZC5oaWRkZW4pYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2lmKCFrfHwxMDczNzQxODIzIT09Yyl7YT1SKGEsYik7YnJlYWsgYX19az1kLmNoaWxkcmVuOyRlKGUsZCk/az1udWxsOmYmJiRlKGUsZikmJihiLmVmZmVjdFRhZ3w9MTYpO0ZnKGEsYik7MTA3Mzc0MTgyMyE9PWMmJmIubW9kZSYxJiZkLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGIubWVtb2l6ZWRQcm9wcz1kLGE9bnVsbCk6KFEoYSxiLGspLGIubWVtb2l6ZWRQcm9wcz1kLGE9Yi5jaGlsZCl9cmV0dXJuIGE7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQWcoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLFxubnVsbDtjYXNlIDE2OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZGcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxlPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09ZT8obnVsbD09PWE/Yi5jaGlsZD10ZyhiLG51bGwsZSxjKTpRKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUucmVuZGVyLGM9Yi5wZW5kaW5nUHJvcHMsZD1iLnJlZixPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWN8fGQhPT0obnVsbCE9PWE/YS5yZWY6bnVsbCk/KGU9ZShjLGQpLFEoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDEwOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09Yz8oUShhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTE6cmV0dXJuIGM9XG5iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixPLmN1cnJlbnR8fG51bGwhPT1jJiZiLm1lbW9pemVkUHJvcHMhPT1jPyhRKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxNTpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxiLm1lbW9pemVkUHJvcHM9PT1jP2E9UihhLGIpOihRKGEsYixjLmNoaWxkcmVuKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpLGE7Y2FzZSAxMzpyZXR1cm4gSmcoYSxiLGMpO2Nhc2UgMTI6YTppZihkPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGs9Yi5tZW1vaXplZFByb3BzLGU9ZC5fY3VycmVudFZhbHVlLGc9ZC5fY2hhbmdlZEJpdHMsTy5jdXJyZW50fHwwIT09Z3x8ayE9PWYpe2IubWVtb2l6ZWRQcm9wcz1mO2g9Zi51bnN0YWJsZV9vYnNlcnZlZEJpdHM7aWYodm9pZCAwPT09aHx8bnVsbD09PWgpaD0xMDczNzQxODIzO2Iuc3RhdGVOb2RlPWg7aWYoMCE9PShnJmgpKUlnKGIsZCxnLGMpO2Vsc2UgaWYoaz09PWYpe2E9XG5SKGEsYik7YnJlYWsgYX1jPWYuY2hpbGRyZW47Yz1jKGUpO2IuZWZmZWN0VGFnfD0xO1EoYSxiLGMpO2E9Yi5jaGlsZH1lbHNlIGE9UihhLGIpO3JldHVybiBhO2RlZmF1bHQ6QShcIjE1NlwiKX19ZnVuY3Rpb24gTGcoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIFBnPXZvaWQgMCxRZz12b2lkIDAsUmc9dm9pZCAwO1BnPWZ1bmN0aW9uKCl7fTtRZz1mdW5jdGlvbihhLGIsYyl7KGIudXBkYXRlUXVldWU9YykmJkxnKGIpfTtSZz1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmTGcoYil9O1xuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gbnVsbDtjYXNlIDI6cmV0dXJuIG9mKGIpLG51bGw7Y2FzZSAzOmVnKGIpO3BmKGIpO3ZhciBkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClDZyhiKSxiLmVmZmVjdFRhZyY9LTM7UGcoYik7cmV0dXJuIG51bGw7Y2FzZSA1OmZnKGIpO2Q9Y2coYmcuY3VycmVudCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9Yi5zdGF0ZU5vZGUsaD1jZygkZi5jdXJyZW50KTtnPVNlKGcsZSxmLGMsZCk7UWcoYSxiLGcsZSxmLGMsZCxoKTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighYylyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP1xuQShcIjE2NlwiKTp2b2lkIDAsbnVsbDthPWNnKCRmLmN1cnJlbnQpO2lmKENnKGIpKWM9Yi5zdGF0ZU5vZGUsZT1iLnR5cGUsZj1iLm1lbW9pemVkUHJvcHMsY1tDXT1iLGNbTWFdPWYsZD1VZShjLGUsZixhLGQpLGIudXBkYXRlUXVldWU9ZCxudWxsIT09ZCYmTGcoYik7ZWxzZXthPVBlKGUsYyxkLGEpO2FbQ109YjthW01hXT1jO2E6Zm9yKGY9Yi5jaGlsZDtudWxsIT09Zjspe2lmKDU9PT1mLnRhZ3x8Nj09PWYudGFnKWEuYXBwZW5kQ2hpbGQoZi5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWYudGFnJiZudWxsIT09Zi5jaGlsZCl7Zi5jaGlsZC5yZXR1cm49ZjtmPWYuY2hpbGQ7Y29udGludWV9aWYoZj09PWIpYnJlYWs7Zm9yKDtudWxsPT09Zi5zaWJsaW5nOyl7aWYobnVsbD09PWYucmV0dXJufHxmLnJldHVybj09PWIpYnJlYWsgYTtmPWYucmV0dXJufWYuc2libGluZy5yZXR1cm49Zi5yZXR1cm47Zj1mLnNpYmxpbmd9UmUoYSxlLGMsZCk7WmUoZSxjKSYmTGcoYik7Yi5zdGF0ZU5vZGU9XG5hfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlSZyhhLGIsYS5tZW1vaXplZFByb3BzLGMpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBjKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/QShcIjE2NlwiKTp2b2lkIDAsbnVsbDtkPWNnKGJnLmN1cnJlbnQpO2NnKCRmLmN1cnJlbnQpO0NnKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbQ109YixWZShkLGMpJiZMZyhiKSk6KGQ9UWUoYyxkKSxkW0NdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE2OnJldHVybiBudWxsO2Nhc2UgMTA6cmV0dXJuIG51bGw7Y2FzZSAxMTpyZXR1cm4gbnVsbDtjYXNlIDE1OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZWcoYiksUGcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBZZihiKSxudWxsO2Nhc2UgMTI6cmV0dXJuIG51bGw7Y2FzZSAwOkEoXCIxNjdcIik7XG5kZWZhdWx0OkEoXCIxNTZcIil9fWZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9Yi5zb3VyY2U7bnVsbD09PWIuc3RhY2smJm51bGwhPT1jJiZ2YyhjKTtudWxsIT09YyYmdGMoYyk7Yj1iLnZhbHVlO251bGwhPT1hJiYyPT09YS50YWcmJnRjKGEpO3RyeXtiJiZiLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZCl7ZCYmZC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGQpfX1mdW5jdGlvbiBVZyhhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtWZyhhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBXZyhhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgR2YmJkdmKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOlVnKGEpO3ZhciBiPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7VmcoYSxjKX1icmVhaztjYXNlIDU6VWcoYSk7YnJlYWs7Y2FzZSA0OlhnKGEpfX1mdW5jdGlvbiBZZyhhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFpnKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKFlnKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn1BKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6QShcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKEdlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxZZyhjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZj1iLGc9ZS5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGYpOmYuYXBwZW5kQ2hpbGQoZykpOmIuYXBwZW5kQ2hpbGQoZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09XG5lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIFhnKGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9Yi5yZXR1cm47YTpmb3IoOzspe251bGw9PT1jP0EoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Yy5yZXR1cm59Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyl7YTpmb3IodmFyIGY9YixnPWY7OylpZihXZyhnKSxudWxsIT09Zy5jaGlsZCYmNCE9PWcudGFnKWcuY2hpbGQucmV0dXJuPWcsZz1nLmNoaWxkO2Vsc2V7aWYoZz09PWYpYnJlYWs7Zm9yKDtudWxsPT09Zy5zaWJsaW5nOyl7aWYobnVsbD09PWcucmV0dXJufHxnLnJldHVybj09PWYpYnJlYWsgYTtnPWcucmV0dXJufWcuc2libGluZy5yZXR1cm49Zy5yZXR1cm47Zz1nLnNpYmxpbmd9ZT9cbihmPWQsZz1iLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6Zi5yZW1vdmVDaGlsZChnKSk6ZC5yZW1vdmVDaGlsZChiLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yi50YWc/ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOldnKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uICRnKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiYoY1tNYV09ZCxUZShjLGYsZSxhLGQpKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0EoXCIxNjJcIik6dm9pZCAwO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmJyZWFrO2Nhc2UgMTU6YnJlYWs7Y2FzZSAxNjpicmVhaztkZWZhdWx0OkEoXCIxNjNcIil9fWZ1bmN0aW9uIGFoKGEsYixjKXtjPUtmKGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe2JoKGQpO1RnKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gY2goYSxiLGMpe2M9S2YoYyk7Yy50YWc9Mzt2YXIgZD1hLnN0YXRlTm9kZTtudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7bnVsbD09PWRoP2RoPW5ldyBTZXQoW3RoaXNdKTpkaC5hZGQodGhpcyk7dmFyIGM9Yi52YWx1ZSxkPWIuc3RhY2s7VGcoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1kP2Q6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBlaChhLGIsYyxkLGUsZil7Yy5lZmZlY3RUYWd8PTUxMjtjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsO2Q9VGYoZCxjKTthPWI7ZG97c3dpdGNoKGEudGFnKXtjYXNlIDM6YS5lZmZlY3RUYWd8PTEwMjQ7ZD1haChhLGQsZik7TmYoYSxkLGYpO3JldHVybjtjYXNlIDI6aWYoYj1kLGM9YS5zdGF0ZU5vZGUsMD09PShhLmVmZmVjdFRhZyY2NCkmJm51bGwhPT1jJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1kaHx8IWRoLmhhcyhjKSkpe2EuZWZmZWN0VGFnfD0xMDI0O2Q9Y2goYSxiLGYpO05mKGEsZCxmKTtyZXR1cm59fWE9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpfVxuZnVuY3Rpb24gZmgoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6b2YoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gZWcoYSkscGYoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIGZnKGEpLG51bGw7Y2FzZSAxNjpyZXR1cm4gYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDQ6cmV0dXJuIGVnKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gWWYoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgZ2g9YWYoKSxoaD0yLGloPWdoLGpoPTAsa2g9MCxsaD0hMSxTPW51bGwsbWg9bnVsbCxUPTAsbmg9LTEsb2g9ITEsVT1udWxsLHBoPSExLHFoPSExLGRoPW51bGw7XG5mdW5jdGlvbiByaCgpe2lmKG51bGwhPT1TKWZvcih2YXIgYT1TLnJldHVybjtudWxsIT09YTspe3ZhciBiPWE7c3dpdGNoKGIudGFnKXtjYXNlIDI6b2YoYik7YnJlYWs7Y2FzZSAzOmVnKGIpO3BmKGIpO2JyZWFrO2Nhc2UgNTpmZyhiKTticmVhaztjYXNlIDQ6ZWcoYik7YnJlYWs7Y2FzZSAxMzpZZihiKX1hPWEucmV0dXJufW1oPW51bGw7VD0wO25oPS0xO29oPSExO1M9bnVsbDtxaD0hMX1cbmZ1bmN0aW9uIHNoKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjUxMikpe2I9U2coYixhLFQpO3ZhciBlPWE7aWYoMTA3Mzc0MTgyMz09PVR8fDEwNzM3NDE4MjMhPT1lLmV4cGlyYXRpb25UaW1lKXt2YXIgZj0wO3N3aXRjaChlLnRhZyl7Y2FzZSAzOmNhc2UgMjp2YXIgZz1lLnVwZGF0ZVF1ZXVlO251bGwhPT1nJiYoZj1nLmV4cGlyYXRpb25UaW1lKX1mb3IoZz1lLmNoaWxkO251bGwhPT1nOykwIT09Zy5leHBpcmF0aW9uVGltZSYmKDA9PT1mfHxmPmcuZXhwaXJhdGlvblRpbWUpJiYoZj1nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiZcbihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZXtxaD0hMDticmVha319ZWxzZXthPWZoKGEsb2gsVCk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj01MTEsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTUxMik7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gdGgoYSl7dmFyIGI9S2coYS5hbHRlcm5hdGUsYSxUKTtudWxsPT09YiYmKGI9c2goYSkpO2VjLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIHVoKGEsYixjKXtsaD9BKFwiMjQzXCIpOnZvaWQgMDtsaD0hMDtpZihiIT09VHx8YSE9PW1ofHxudWxsPT09UylyaCgpLG1oPWEsVD1iLG5oPS0xLFM9dmYobWguY3VycmVudCxudWxsLFQpLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGQ9ITE7b2g9IWN8fFQ8PWhoO2Rve3RyeXtpZihjKWZvcig7bnVsbCE9PVMmJiF2aCgpOylTPXRoKFMpO2Vsc2UgZm9yKDtudWxsIT09UzspUz10aChTKX1jYXRjaChmKXtpZihudWxsPT09UylkPSEwLGJoKGYpO2Vsc2V7bnVsbD09PVM/QShcIjI3MVwiKTp2b2lkIDA7Yz1TO3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKXtkPSEwO2JoKGYpO2JyZWFrfWVoKGEsZSxjLGYsb2gsVCxpaCk7Uz1zaChjKX19YnJlYWt9d2hpbGUoMSk7bGg9ITE7aWYoZClyZXR1cm4gbnVsbDtpZihudWxsPT09Uyl7aWYocWgpcmV0dXJuIGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWIsYS5jdXJyZW50LmFsdGVybmF0ZTtvaD9BKFwiMjYyXCIpOlxudm9pZCAwOzA8PW5oJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGI9YS5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzAhPT1iJiYoMD09PWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWV8fGEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU8YikmJndoKGEsYil9LG5oKTt4aChhLmN1cnJlbnQuZXhwaXJhdGlvblRpbWUpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gVmcoYSxiKXt2YXIgYzthOntsaCYmIXBoP0EoXCIyNjNcIik6dm9pZCAwO2ZvcihjPWEucmV0dXJuO251bGwhPT1jOyl7c3dpdGNoKGMudGFnKXtjYXNlIDI6dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2h8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWRofHwhZGguaGFzKGQpKSl7YT1UZihiLGEpO2E9Y2goYyxhLDEpO01mKGMsYSwxKTtrZyhjLDEpO2M9dm9pZCAwO2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmE9VGYoYixhKTthPWFoKGMsYSwxKTtNZihjLGEsMSk7a2coYywxKTtjPXZvaWQgMDticmVhayBhfWM9Yy5yZXR1cm59Mz09PWEudGFnJiYoYz1UZihiLGEpLGM9YWgoYSxjLDEpLE1mKGEsYywxKSxrZyhhLDEpKTtjPXZvaWQgMH1yZXR1cm4gY31cbmZ1bmN0aW9uIHloKCl7dmFyIGE9MisyNSooKChpZygpLTIrNTAwKS8yNXwwKSsxKTthPD1qaCYmKGE9amgrMSk7cmV0dXJuIGpoPWF9ZnVuY3Rpb24gamcoYSxiKXthPTAhPT1raD9raDpsaD9waD8xOlQ6Yi5tb2RlJjE/emg/MisxMCooKChhLTIrMTUpLzEwfDApKzEpOjIrMjUqKCgoYS0yKzUwMCkvMjV8MCkrMSk6MTt6aCYmKDA9PT1BaHx8YT5BaCkmJihBaD1hKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGtnKGEsYil7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIpYS5leHBpcmF0aW9uVGltZT1iO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU+YikmJihhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09YS5yZXR1cm4paWYoMz09PWEudGFnKXt2YXIgYz1hLnN0YXRlTm9kZTshbGgmJjAhPT1UJiZiPFQmJnJoKCk7dmFyIGQ9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lO2xoJiYhcGgmJm1oPT09Y3x8d2goYyxkKTtCaD5DaCYmQShcIjE4NVwiKX1lbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIGlnKCl7aWg9YWYoKS1naDtyZXR1cm4gaGg9KGloLzEwfDApKzJ9XG5mdW5jdGlvbiBEaChhKXt2YXIgYj1raDtraD0yKzI1KigoKGlnKCktMis1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7a2g9Yn19ZnVuY3Rpb24gRWgoYSxiLGMsZCxlKXt2YXIgZj1raDtraD0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2toPWZ9fXZhciBGaD1udWxsLFY9bnVsbCxHaD0wLEhoPS0xLFc9ITEsWD1udWxsLFk9MCxBaD0wLEloPSExLEpoPSExLEtoPW51bGwsTGg9bnVsbCxaPSExLE1oPSExLHpoPSExLE5oPW51bGwsQ2g9MUUzLEJoPTAsT2g9MTtmdW5jdGlvbiBQaChhKXtpZigwIT09R2gpe2lmKGE+R2gpcmV0dXJuO2NmKEhoKX12YXIgYj1hZigpLWdoO0doPWE7SGg9YmYoUWgse3RpbWVvdXQ6MTAqKGEtMiktYn0pfVxuZnVuY3Rpb24gd2goYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PVY/KEZoPVY9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihWPVYubmV4dFNjaGVkdWxlZFJvb3Q9YSxWLm5leHRTY2hlZHVsZWRSb290PUZoKTtlbHNle3ZhciBjPWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWN8fGI8YylhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9V3x8KFo/TWgmJihYPWEsWT0xLFJoKGEsMSwhMSkpOjE9PT1iP1NoKCk6UGgoYikpfVxuZnVuY3Rpb24gVGgoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Vilmb3IodmFyIGM9VixkPUZoO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1WP0EoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtGaD1WPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1GaClGaD1lPWQubmV4dFNjaGVkdWxlZFJvb3QsVi5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1WKXtWPWM7Vi5uZXh0U2NoZWR1bGVkUm9vdD1GaDtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2lmKDA9PT1hfHxlPGEpYT1lLGI9ZDtpZihkPT09VilicmVhaztcbmM9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9WDtudWxsIT09YyYmYz09PWImJjE9PT1hP0JoKys6Qmg9MDtYPWI7WT1hfWZ1bmN0aW9uIFFoKGEpe1VoKDAsITAsYSl9ZnVuY3Rpb24gU2goKXtVaCgxLCExLG51bGwpfWZ1bmN0aW9uIFVoKGEsYixjKXtMaD1jO1RoKCk7aWYoYilmb3IoO251bGwhPT1YJiYwIT09WSYmKDA9PT1hfHxhPj1ZKSYmKCFJaHx8aWcoKT49WSk7KWlnKCksUmgoWCxZLCFJaCksVGgoKTtlbHNlIGZvcig7bnVsbCE9PVgmJjAhPT1ZJiYoMD09PWF8fGE+PVkpOylSaChYLFksITEpLFRoKCk7bnVsbCE9PUxoJiYoR2g9MCxIaD0tMSk7MCE9PVkmJlBoKFkpO0xoPW51bGw7SWg9ITE7VmgoKX1mdW5jdGlvbiBXaChhLGIpe1c/QShcIjI1M1wiKTp2b2lkIDA7WD1hO1k9YjtSaChhLGIsITEpO1NoKCk7VmgoKX1cbmZ1bmN0aW9uIFZoKCl7Qmg9MDtpZihudWxsIT09Tmgpe3ZhciBhPU5oO05oPW51bGw7Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtKaHx8KEpoPSEwLEtoPWQpfX19aWYoSmgpdGhyb3cgYT1LaCxLaD1udWxsLEpoPSExLGE7fWZ1bmN0aW9uIFJoKGEsYixjKXtXP0EoXCIyNDVcIik6dm9pZCAwO1c9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9YaChhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz11aChhLGIsITApLG51bGwhPT1jJiYodmgoKT9hLmZpbmlzaGVkV29yaz1jOlhoKGEsYyxiKSkpKTooYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9YaChhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz11aChhLGIsITEpLG51bGwhPT1jJiZYaChhLGMsYikpKTtXPSExfVxuZnVuY3Rpb24gWGgoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWMmJihudWxsPT09Tmg/Tmg9W2RdOk5oLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDtwaD1saD0hMDtjPWIuc3RhdGVOb2RlO2MuY3VycmVudD09PWI/QShcIjE3N1wiKTp2b2lkIDA7ZD1jLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09ZD9BKFwiMjYxXCIpOnZvaWQgMDtjLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO2lnKCk7ZWMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZT1iLmZpcnN0RWZmZWN0fWVsc2UgZT1iO2Vsc2UgZT1iLmZpcnN0RWZmZWN0O1hlPUdkO3ZhciBmPWRhKCk7aWYoVGQoZikpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluXG5mKXZhciBnPXtzdGFydDpmLnNlbGVjdGlvblN0YXJ0LGVuZDpmLnNlbGVjdGlvbkVuZH07ZWxzZSBhOnt2YXIgaD13aW5kb3cuZ2V0U2VsZWN0aW9uJiZ3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7aWYoaCYmMCE9PWgucmFuZ2VDb3VudCl7Zz1oLmFuY2hvck5vZGU7dmFyIGs9aC5hbmNob3JPZmZzZXQsbj1oLmZvY3VzTm9kZTtoPWguZm9jdXNPZmZzZXQ7dHJ5e2cubm9kZVR5cGUsbi5ub2RlVHlwZX1jYXRjaChXYSl7Zz1udWxsO2JyZWFrIGF9dmFyIHI9MCx3PS0xLFA9LTEsa2M9MCxIZD0wLEU9Zix0PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeDs7KXtFIT09Z3x8MCE9PWsmJjMhPT1FLm5vZGVUeXBlfHwodz1yK2spO0UhPT1ufHwwIT09aCYmMyE9PUUubm9kZVR5cGV8fChQPXIraCk7Mz09PUUubm9kZVR5cGUmJihyKz1FLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeD1FLmZpcnN0Q2hpbGQpKWJyZWFrO3Q9RTtFPXh9Zm9yKDs7KXtpZihFPT09ZilicmVhayBiO3Q9PT1nJiZcbisra2M9PT1rJiYodz1yKTt0PT09biYmKytIZD09PWgmJihQPXIpO2lmKG51bGwhPT0oeD1FLm5leHRTaWJsaW5nKSlicmVhaztFPXQ7dD1FLnBhcmVudE5vZGV9RT14fWc9LTE9PT13fHwtMT09PVA/bnVsbDp7c3RhcnQ6dyxlbmQ6UH19ZWxzZSBnPW51bGx9Zz1nfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBnPW51bGw7WWU9e2ZvY3VzZWRFbGVtOmYsc2VsZWN0aW9uUmFuZ2U6Z307SWQoITEpO2ZvcihVPWU7bnVsbCE9PVU7KXtmPSExO2c9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1VOyl7aWYoVS5lZmZlY3RUYWcmMjU2KXt2YXIgdT1VLmFsdGVybmF0ZTtrPVU7c3dpdGNoKGsudGFnKXtjYXNlIDI6aWYoay5lZmZlY3RUYWcmMjU2JiZudWxsIT09dSl7dmFyIHk9dS5tZW1vaXplZFByb3BzLEQ9dS5tZW1vaXplZFN0YXRlLGphPWsuc3RhdGVOb2RlO2phLnByb3BzPWsubWVtb2l6ZWRQcm9wcztqYS5zdGF0ZT1rLm1lbW9pemVkU3RhdGU7dmFyIGhpPWphLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHksXG5EKTtqYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1oaX1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpBKFwiMTYzXCIpfX1VPVUubmV4dEVmZmVjdH19Y2F0Y2goV2Epe2Y9ITAsZz1XYX1mJiYobnVsbD09PVU/QShcIjE3OFwiKTp2b2lkIDAsVmcoVSxnKSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9Zm9yKFU9ZTtudWxsIT09VTspe3U9ITE7eT12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVU7KXt2YXIgcT1VLmVmZmVjdFRhZztxJjE2JiZHZShVLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIHo9VS5hbHRlcm5hdGU7aWYobnVsbCE9PXope3ZhciBsPXoucmVmO251bGwhPT1sJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGw/bChudWxsKTpsLmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjE0KXtjYXNlIDI6WmcoVSk7VS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpaZyhVKTtVLmVmZmVjdFRhZyY9LTM7JGcoVS5hbHRlcm5hdGUsXG5VKTticmVhaztjYXNlIDQ6JGcoVS5hbHRlcm5hdGUsVSk7YnJlYWs7Y2FzZSA4OkQ9VSxYZyhEKSxELnJldHVybj1udWxsLEQuY2hpbGQ9bnVsbCxELmFsdGVybmF0ZSYmKEQuYWx0ZXJuYXRlLmNoaWxkPW51bGwsRC5hbHRlcm5hdGUucmV0dXJuPW51bGwpfVU9VS5uZXh0RWZmZWN0fX1jYXRjaChXYSl7dT0hMCx5PVdhfXUmJihudWxsPT09VT9BKFwiMTc4XCIpOnZvaWQgMCxWZyhVLHkpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1sPVllO3o9ZGEoKTtxPWwuZm9jdXNlZEVsZW07dT1sLnNlbGVjdGlvblJhbmdlO2lmKHohPT1xJiZmYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe1RkKHEpJiYoej11LnN0YXJ0LGw9dS5lbmQsdm9pZCAwPT09bCYmKGw9eiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD16LHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKGwscS52YWx1ZS5sZW5ndGgpKTp3aW5kb3cuZ2V0U2VsZWN0aW9uJiYoej13aW5kb3cuZ2V0U2VsZWN0aW9uKCksXG55PXFbbGIoKV0ubGVuZ3RoLGw9TWF0aC5taW4odS5zdGFydCx5KSx1PXZvaWQgMD09PXUuZW5kP2w6TWF0aC5taW4odS5lbmQseSksIXouZXh0ZW5kJiZsPnUmJih5PXUsdT1sLGw9eSkseT1TZChxLGwpLEQ9U2QocSx1KSx5JiZEJiYoMSE9PXoucmFuZ2VDb3VudHx8ei5hbmNob3JOb2RlIT09eS5ub2RlfHx6LmFuY2hvck9mZnNldCE9PXkub2Zmc2V0fHx6LmZvY3VzTm9kZSE9PUQubm9kZXx8ei5mb2N1c09mZnNldCE9PUQub2Zmc2V0KSYmKGphPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCksamEuc2V0U3RhcnQoeS5ub2RlLHkub2Zmc2V0KSx6LnJlbW92ZUFsbFJhbmdlcygpLGw+dT8oei5hZGRSYW5nZShqYSksei5leHRlbmQoRC5ub2RlLEQub2Zmc2V0KSk6KGphLnNldEVuZChELm5vZGUsRC5vZmZzZXQpLHouYWRkUmFuZ2UoamEpKSkpKTt6PVtdO2ZvcihsPXE7bD1sLnBhcmVudE5vZGU7KTE9PT1sLm5vZGVUeXBlJiZ6LnB1c2goe2VsZW1lbnQ6bCxsZWZ0Omwuc2Nyb2xsTGVmdCxcbnRvcDpsLnNjcm9sbFRvcH0pO3EuZm9jdXMoKTtmb3IocT0wO3E8ei5sZW5ndGg7cSsrKWw9eltxXSxsLmVsZW1lbnQuc2Nyb2xsTGVmdD1sLmxlZnQsbC5lbGVtZW50LnNjcm9sbFRvcD1sLnRvcH1ZZT1udWxsO0lkKFhlKTtYZT1udWxsO2MuY3VycmVudD1iO2ZvcihVPWU7bnVsbCE9PVU7KXtlPSExO3E9dm9pZCAwO3RyeXtmb3Ioej1kO251bGwhPT1VOyl7dmFyIGdnPVUuZWZmZWN0VGFnO2lmKGdnJjM2KXt2YXIgbGM9VS5hbHRlcm5hdGU7bD1VO3U9ejtzd2l0Y2gobC50YWcpe2Nhc2UgMjp2YXIgYmE9bC5zdGF0ZU5vZGU7aWYobC5lZmZlY3RUYWcmNClpZihudWxsPT09bGMpYmEucHJvcHM9bC5tZW1vaXplZFByb3BzLGJhLnN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxiYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIHJpPWxjLm1lbW9pemVkUHJvcHMsc2k9bGMubWVtb2l6ZWRTdGF0ZTtiYS5wcm9wcz1sLm1lbW9pemVkUHJvcHM7YmEuc3RhdGU9bC5tZW1vaXplZFN0YXRlO1xuYmEuY29tcG9uZW50RGlkVXBkYXRlKHJpLHNpLGJhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgTWc9bC51cGRhdGVRdWV1ZTtudWxsIT09TWcmJihiYS5wcm9wcz1sLm1lbW9pemVkUHJvcHMsYmEuc3RhdGU9bC5tZW1vaXplZFN0YXRlLFNmKGwsTWcsYmEsdSkpO2JyZWFrO2Nhc2UgMzp2YXIgTmc9bC51cGRhdGVRdWV1ZTtpZihudWxsIT09Tmcpe3k9bnVsbDtpZihudWxsIT09bC5jaGlsZClzd2l0Y2gobC5jaGlsZC50YWcpe2Nhc2UgNTp5PWwuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMjp5PWwuY2hpbGQuc3RhdGVOb2RlfVNmKGwsTmcseSx1KX1icmVhaztjYXNlIDU6dmFyIHRpPWwuc3RhdGVOb2RlO251bGw9PT1sYyYmbC5lZmZlY3RUYWcmNCYmWmUobC50eXBlLGwubWVtb2l6ZWRQcm9wcykmJnRpLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDE1OmJyZWFrO2Nhc2UgMTY6YnJlYWs7ZGVmYXVsdDpBKFwiMTYzXCIpfX1pZihnZyZcbjEyOCl7bD12b2lkIDA7dmFyIHVjPVUucmVmO2lmKG51bGwhPT11Yyl7dmFyIE9nPVUuc3RhdGVOb2RlO3N3aXRjaChVLnRhZyl7Y2FzZSA1Omw9T2c7YnJlYWs7ZGVmYXVsdDpsPU9nfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yz91YyhsKTp1Yy5jdXJyZW50PWx9fXZhciB1aT1VLm5leHRFZmZlY3Q7VS5uZXh0RWZmZWN0PW51bGw7VT11aX19Y2F0Y2goV2Epe2U9ITAscT1XYX1lJiYobnVsbD09PVU/QShcIjE3OFwiKTp2b2lkIDAsVmcoVSxxKSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9bGg9cGg9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIEZmJiZGZihiLnN0YXRlTm9kZSk7Yj1jLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MD09PWImJihkaD1udWxsKTthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9ZnVuY3Rpb24gdmgoKXtyZXR1cm4gbnVsbD09PUxofHxMaC50aW1lUmVtYWluaW5nKCk+T2g/ITE6SWg9ITB9XG5mdW5jdGlvbiBiaChhKXtudWxsPT09WD9BKFwiMjQ2XCIpOnZvaWQgMDtYLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7Smh8fChKaD0hMCxLaD1hKX1mdW5jdGlvbiB4aChhKXtudWxsPT09WD9BKFwiMjQ2XCIpOnZvaWQgMDtYLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWF9ZnVuY3Rpb24gWWgoYSxiKXt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFo9Yyl8fFd8fFNoKCl9fWZ1bmN0aW9uIFpoKGEsYil7aWYoWiYmIU1oKXtNaD0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtNaD0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gJGgoYSxiKXtXP0EoXCIxODdcIik6dm9pZCAwO3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIEVoKGEsYil9ZmluYWxseXtaPWMsU2goKX19ZnVuY3Rpb24gYWkoYSl7dmFyIGI9WjtaPSEwO3RyeXtFaChhKX1maW5hbGx5eyhaPWIpfHxXfHxVaCgxLCExLG51bGwpfX1cbmZ1bmN0aW9uIGJpKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBnO2I6ezI9PT1pZChjKSYmMj09PWMudGFnP3ZvaWQgMDpBKFwiMTcwXCIpO2ZvcihnPWM7MyE9PWcudGFnOyl7aWYobWYoZykpe2c9Zy5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn0oZz1nLnJldHVybik/dm9pZCAwOkEoXCIxNzFcIil9Zz1nLnN0YXRlTm9kZS5jb250ZXh0fWM9bWYoYyk/cmYoYyxnKTpnfWVsc2UgYz1oYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1LZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7TWYoZixlLGQpO2tnKGYsZCk7cmV0dXJuIGR9XG5mdW5jdGlvbiBjaShhKXt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj9BKFwiMTg4XCIpOkEoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9bGQoYik7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9ZnVuY3Rpb24gZGkoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9aWcoKTtlPWpnKGYsZSk7cmV0dXJuIGJpKGEsYixjLGUsZCl9ZnVuY3Rpb24gZWkoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIGZpKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEVmKHAoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1sZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX1cbnZhciBnaT17dXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZTpiaSxjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBBZihhLGIsYyl9LHVwZGF0ZUNvbnRhaW5lcjpkaSxmbHVzaFJvb3Q6V2gscmVxdWVzdFdvcms6d2gsY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjp5aCxiYXRjaGVkVXBkYXRlczpZaCx1bmJhdGNoZWRVcGRhdGVzOlpoLGRlZmVycmVkVXBkYXRlczpEaCxzeW5jVXBkYXRlczpFaCxpbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oYSxiLGMpe2lmKHpoKXJldHVybiBhKGIsYyk7Wnx8V3x8MD09PUFofHwoVWgoQWgsITEsbnVsbCksQWg9MCk7dmFyIGQ9emgsZT1aO1o9emg9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXt6aD1kLChaPWUpfHxXfHxTaCgpfX0sZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oKXtXfHwwPT09QWh8fChVaChBaCwhMSxudWxsKSxBaD0wKX0sZmx1c2hDb250cm9sbGVkOmFpLGZsdXNoU3luYzokaCxcbmdldFB1YmxpY1Jvb3RJbnN0YW5jZTplaSxmaW5kSG9zdEluc3RhbmNlOmNpLGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9bWQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpmaX07ZnVuY3Rpb24gaWkoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpnYyxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1LYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KFdlKTtcbmZ1bmN0aW9uIGppKGEpe3RoaXMuX2V4cGlyYXRpb25UaW1lPXloKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1qaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpBKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcga2k7YmkoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O2ppLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbmppLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpBKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0EoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7V2goYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07amkucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIGtpKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9a2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbmtpLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0EoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIGxpKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9QWYoYSxiLGMpfWxpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcga2k7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO2RpKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5saS5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcga2k7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO2RpKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307bGkucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IGtpO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtkaShiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xubGkucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IGppKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gbWkoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVNiPWdpLmJhdGNoZWRVcGRhdGVzO1RiPWdpLmludGVyYWN0aXZlVXBkYXRlcztVYj1naS5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIG5pKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgbGkoYSwhMSxiKX1cbmZ1bmN0aW9uIG9pKGEsYixjLGQsZSl7bWkoYyk/dm9pZCAwOkEoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1laShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPW5pKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWVpKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1aaChmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gZWkoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIHBpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7bWkoYik/dm9pZCAwOkEoXCIyMDBcIik7cmV0dXJuIGlpKGEsYixudWxsLGMpfVxudmFyIHFpPXtjcmVhdGVQb3J0YWw6cGksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/bnVsbDoxPT09YS5ub2RlVHlwZT9hOmNpKGEpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gb2kobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG9pKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/QShcIjM4XCIpOnZvaWQgMDtyZXR1cm4gb2koYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7bWkoYSk/dm9pZCAwOkEoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhaaChmdW5jdGlvbigpe29pKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIHBpLmFwcGx5KHZvaWQgMCxcbmFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOlloLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpEaCxmbHVzaFN5bmM6JGgsdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmFpLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpLYSxFdmVudFBsdWdpblJlZ2lzdHJ5OnZhLEV2ZW50UHJvcGFnYXRvcnM6JGEsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OlJiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpRYSxSZWFjdERPTUV2ZW50TGlzdGVuZXI6TWR9LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IGxpKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07Zmkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOk5hLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuNC4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7XG52YXIgdmk9e2RlZmF1bHQ6cWl9LHdpPXZpJiZxaXx8dmk7bW9kdWxlLmV4cG9ydHM9d2kuZGVmYXVsdD93aS5kZWZhdWx0OndpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLklubmVyU2xpZGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfaW5pdGlhbFN0YXRlID0gcmVxdWlyZShcIi4vaW5pdGlhbC1zdGF0ZVwiKTtcblxudmFyIF9pbml0aWFsU3RhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5pdGlhbFN0YXRlKTtcblxudmFyIF9sb2Rhc2ggPSByZXF1aXJlKFwibG9kYXNoLmRlYm91bmNlXCIpO1xuXG52YXIgX2xvZGFzaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2Rhc2gpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSByZXF1aXJlKFwiY2xhc3NuYW1lc1wiKTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG52YXIgX2lubmVyU2xpZGVyVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9pbm5lclNsaWRlclV0aWxzXCIpO1xuXG52YXIgX3RyYWNrID0gcmVxdWlyZShcIi4vdHJhY2tcIik7XG5cbnZhciBfZG90cyA9IHJlcXVpcmUoXCIuL2RvdHNcIik7XG5cbnZhciBfYXJyb3dzID0gcmVxdWlyZShcIi4vYXJyb3dzXCIpO1xuXG52YXIgX3Jlc2l6ZU9ic2VydmVyUG9seWZpbGwgPSByZXF1aXJlKFwicmVzaXplLW9ic2VydmVyLXBvbHlmaWxsXCIpO1xuXG52YXIgX3Jlc2l6ZU9ic2VydmVyUG9seWZpbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzaXplT2JzZXJ2ZXJQb2x5ZmlsbCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSW5uZXJTbGlkZXIgPSBleHBvcnRzLklubmVyU2xpZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKElubmVyU2xpZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBJbm5lclNsaWRlcihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbm5lclNsaWRlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmxpc3RSZWZIYW5kbGVyID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgcmV0dXJuIF90aGlzLmxpc3QgPSByZWY7XG4gICAgfTtcblxuICAgIF90aGlzLnRyYWNrUmVmSGFuZGxlciA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIHJldHVybiBfdGhpcy50cmFjayA9IHJlZjtcbiAgICB9O1xuXG4gICAgX3RoaXMuYWRhcHRIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuYWRhcHRpdmVIZWlnaHQgJiYgX3RoaXMubGlzdCkge1xuICAgICAgICB2YXIgZWxlbSA9IF90aGlzLmxpc3QucXVlcnlTZWxlY3RvcihcIltkYXRhLWluZGV4PVxcXCJcIiArIF90aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSArIFwiXFxcIl1cIik7XG4gICAgICAgIF90aGlzLmxpc3Quc3R5bGUuaGVpZ2h0ID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldEhlaWdodCkoZWxlbSkgKyBcInB4XCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNzckluaXQoKTtcbiAgICAgIF90aGlzLnByb3BzLm9uSW5pdCAmJiBfdGhpcy5wcm9wcy5vbkluaXQoKTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5sYXp5TG9hZCkge1xuICAgICAgICB2YXIgc2xpZGVzVG9Mb2FkID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldE9uRGVtYW5kTGF6eVNsaWRlcykoX2V4dGVuZHMoe30sIF90aGlzLnByb3BzLCBfdGhpcy5zdGF0ZSkpO1xuICAgICAgICBpZiAoc2xpZGVzVG9Mb2FkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBsYXp5TG9hZGVkTGlzdDogcHJldlN0YXRlLmxhenlMb2FkZWRMaXN0LmNvbmNhdChzbGlkZXNUb0xvYWQpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkxhenlMb2FkKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkxhenlMb2FkKHNsaWRlc1RvTG9hZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNwZWMgPSBfZXh0ZW5kcyh7IGxpc3RSZWY6IF90aGlzLmxpc3QsIHRyYWNrUmVmOiBfdGhpcy50cmFjayB9LCBfdGhpcy5wcm9wcyk7XG4gICAgICBfdGhpcy51cGRhdGVTdGF0ZShzcGVjLCB0cnVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmFkYXB0SGVpZ2h0KCk7XG4gICAgICAgIF90aGlzLnByb3BzLmF1dG9wbGF5ICYmIF90aGlzLmF1dG9QbGF5KFwidXBkYXRlXCIpO1xuICAgICAgfSk7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubGF6eUxvYWQgPT09IFwicHJvZ3Jlc3NpdmVcIikge1xuICAgICAgICBfdGhpcy5sYXp5TG9hZFRpbWVyID0gc2V0SW50ZXJ2YWwoX3RoaXMucHJvZ3Jlc3NpdmVMYXp5TG9hZCwgMTAwMCk7XG4gICAgICB9XG4gICAgICBfdGhpcy5ybyA9IG5ldyBfcmVzaXplT2JzZXJ2ZXJQb2x5ZmlsbDIuZGVmYXVsdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5zdGF0ZS5hbmltYXRpbmcpIHtcbiAgICAgICAgICBfdGhpcy5vbldpbmRvd1Jlc2l6ZWQoZmFsc2UpOyAvLyBkb24ndCBzZXQgdHJhY2tTdHlsZSBoZW5jZSBkb24ndCBicmVhayBhbmltYXRpb25cbiAgICAgICAgICBfdGhpcy5jYWxsYmFja1RpbWVycy5wdXNoKHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9uV2luZG93UmVzaXplZCgpO1xuICAgICAgICAgIH0sIF90aGlzLnByb3BzLnNwZWVkKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMub25XaW5kb3dSZXNpemVkKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgX3RoaXMucm8ub2JzZXJ2ZShfdGhpcy5saXN0KTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zbGljay1zbGlkZVwiKSwgZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICAgIHNsaWRlLm9uZm9jdXMgPSBfdGhpcy5wcm9wcy5wYXVzZU9uRm9jdXMgPyBfdGhpcy5vblNsaWRlRm9jdXMgOiBudWxsO1xuICAgICAgICBzbGlkZS5vbmJsdXIgPSBfdGhpcy5wcm9wcy5wYXVzZU9uRm9jdXMgPyBfdGhpcy5vblNsaWRlQmx1ciA6IG51bGw7XG4gICAgICB9KTtcbiAgICAgIC8vIFRvIHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nXG4gICAgICBpZiAoIXdpbmRvdykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgX3RoaXMub25XaW5kb3dSZXNpemVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5hdHRhY2hFdmVudChcIm9ucmVzaXplXCIsIF90aGlzLm9uV2luZG93UmVzaXplZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5hbmltYXRpb25FbmRDYWxsYmFjayk7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMubGF6eUxvYWRUaW1lcikge1xuICAgICAgICBjbGVhckludGVydmFsKF90aGlzLmxhenlMb2FkVGltZXIpO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLmNhbGxiYWNrVGltZXJzLmxlbmd0aCkge1xuICAgICAgICBfdGhpcy5jYWxsYmFja1RpbWVycy5mb3JFYWNoKGZ1bmN0aW9uICh0aW1lcikge1xuICAgICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuY2FsbGJhY2tUaW1lcnMgPSBbXTtcbiAgICAgIH1cbiAgICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBfdGhpcy5vbldpbmRvd1Jlc2l6ZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmRldGFjaEV2ZW50KFwib25yZXNpemVcIiwgX3RoaXMub25XaW5kb3dSZXNpemVkKTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5hdXRvcGxheVRpbWVyKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoX3RoaXMuYXV0b3BsYXlUaW1lcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgICB2YXIgc3BlYyA9IF9leHRlbmRzKHtcbiAgICAgICAgbGlzdFJlZjogX3RoaXMubGlzdCxcbiAgICAgICAgdHJhY2tSZWY6IF90aGlzLnRyYWNrXG4gICAgICB9LCBuZXh0UHJvcHMsIF90aGlzLnN0YXRlKTtcbiAgICAgIHZhciBzZXRUcmFja1N0eWxlID0gZmFsc2U7XG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBPYmplY3Qua2V5cyhfdGhpcy5wcm9wcyksIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IpLCBfaSA9IDAsIF9pdGVyYXRvciA9IF9pc0FycmF5ID8gX2l0ZXJhdG9yIDogX2l0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgICAgIHZhciBfcmVmO1xuXG4gICAgICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgICAgIGlmIChfaSA+PSBfaXRlcmF0b3IubGVuZ3RoKSBicmVhaztcbiAgICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9pID0gX2l0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleSA9IF9yZWY7XG5cbiAgICAgICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIHNldFRyYWNrU3R5bGUgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdHlwZW9mKG5leHRQcm9wc1trZXldKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgbmV4dFByb3BzW2tleV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gX3RoaXMucHJvcHNba2V5XSkge1xuICAgICAgICAgIHNldFRyYWNrU3R5bGUgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy51cGRhdGVTdGF0ZShzcGVjLCBzZXRUcmFja1N0eWxlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUgPj0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KG5leHRQcm9wcy5jaGlsZHJlbikpIHtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBtZXNzYWdlOiBcImluZGV4XCIsXG4gICAgICAgICAgICBpbmRleDogX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KG5leHRQcm9wcy5jaGlsZHJlbikgLSBuZXh0UHJvcHMuc2xpZGVzVG9TaG93LFxuICAgICAgICAgICAgY3VycmVudFNsaWRlOiBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dFByb3BzLmF1dG9wbGF5KSB7XG4gICAgICAgICAgX3RoaXMuYXV0b1BsYXkoXCJ1cGRhdGVcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMucGF1c2UoXCJwYXVzZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jaGVja0ltYWdlc0xvYWQoKTtcbiAgICAgIF90aGlzLnByb3BzLm9uUmVJbml0ICYmIF90aGlzLnByb3BzLm9uUmVJbml0KCk7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubGF6eUxvYWQpIHtcbiAgICAgICAgdmFyIHNsaWRlc1RvTG9hZCA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRPbkRlbWFuZExhenlTbGlkZXMpKF9leHRlbmRzKHt9LCBfdGhpcy5wcm9wcywgX3RoaXMuc3RhdGUpKTtcbiAgICAgICAgaWYgKHNsaWRlc1RvTG9hZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbGF6eUxvYWRlZExpc3Q6IHByZXZTdGF0ZS5sYXp5TG9hZGVkTGlzdC5jb25jYXQoc2xpZGVzVG9Mb2FkKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoX3RoaXMucHJvcHMub25MYXp5TG9hZCkge1xuICAgICAgICAgICAgX3RoaXMucHJvcHMub25MYXp5TG9hZChzbGlkZXNUb0xvYWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gaWYgKHRoaXMucHJvcHMub25MYXp5TG9hZCkge1xuICAgICAgLy8gICB0aGlzLnByb3BzLm9uTGF6eUxvYWQoW2xlZnRNb3N0U2xpZGVdKVxuICAgICAgLy8gfVxuICAgICAgX3RoaXMuYWRhcHRIZWlnaHQoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25XaW5kb3dSZXNpemVkID0gZnVuY3Rpb24gKHNldFRyYWNrU3R5bGUpIHtcbiAgICAgIGlmIChfdGhpcy5kZWJvdW5jZWRSZXNpemUpIF90aGlzLmRlYm91bmNlZFJlc2l6ZS5jYW5jZWwoKTtcbiAgICAgIF90aGlzLmRlYm91bmNlZFJlc2l6ZSA9ICgwLCBfbG9kYXNoMi5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5yZXNpemVXaW5kb3coc2V0VHJhY2tTdHlsZSk7XG4gICAgICB9LCA1MCk7XG4gICAgICBfdGhpcy5kZWJvdW5jZWRSZXNpemUoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVzaXplV2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNldFRyYWNrU3R5bGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG5cbiAgICAgIGlmICghX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKF90aGlzLnRyYWNrKSkgcmV0dXJuO1xuICAgICAgdmFyIHNwZWMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIGxpc3RSZWY6IF90aGlzLmxpc3QsXG4gICAgICAgIHRyYWNrUmVmOiBfdGhpcy50cmFja1xuICAgICAgfSwgX3RoaXMucHJvcHMsIF90aGlzLnN0YXRlKTtcbiAgICAgIF90aGlzLnVwZGF0ZVN0YXRlKHNwZWMsIHNldFRyYWNrU3R5bGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmF1dG9wbGF5KSBfdGhpcy5hdXRvUGxheShcInVwZGF0ZVwiKTtlbHNlIF90aGlzLnBhdXNlKFwicGF1c2VkXCIpO1xuICAgICAgfSk7XG4gICAgICAvLyBhbmltYXRpbmcgc3RhdGUgc2hvdWxkIGJlIGNsZWFyZWQgd2hpbGUgcmVzaXppbmcsIG90aGVyd2lzZSBhdXRvcGxheSBzdG9wcyB3b3JraW5nXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGFuaW1hdGluZzogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrKTtcbiAgICAgIGRlbGV0ZSBfdGhpcy5hbmltYXRpb25FbmRDYWxsYmFjaztcbiAgICB9O1xuXG4gICAgX3RoaXMudXBkYXRlU3RhdGUgPSBmdW5jdGlvbiAoc3BlYywgc2V0VHJhY2tTdHlsZSwgY2FsbGJhY2spIHtcbiAgICAgIHZhciB1cGRhdGVkU3RhdGUgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuaW5pdGlhbGl6ZWRTdGF0ZSkoc3BlYyk7XG4gICAgICBzcGVjID0gX2V4dGVuZHMoe30sIHNwZWMsIHVwZGF0ZWRTdGF0ZSwgeyBzbGlkZUluZGV4OiB1cGRhdGVkU3RhdGUuY3VycmVudFNsaWRlIH0pO1xuICAgICAgdmFyIHRhcmdldExlZnQgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0VHJhY2tMZWZ0KShzcGVjKTtcbiAgICAgIHNwZWMgPSBfZXh0ZW5kcyh7fSwgc3BlYywgeyBsZWZ0OiB0YXJnZXRMZWZ0IH0pO1xuICAgICAgdmFyIHRyYWNrU3R5bGUgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0VHJhY2tDU1MpKHNwZWMpO1xuICAgICAgaWYgKHNldFRyYWNrU3R5bGUgfHwgX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KF90aGlzLnByb3BzLmNoaWxkcmVuKSAhPT0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KHNwZWMuY2hpbGRyZW4pKSB7XG4gICAgICAgIHVwZGF0ZWRTdGF0ZVtcInRyYWNrU3R5bGVcIl0gPSB0cmFja1N0eWxlO1xuICAgICAgfVxuICAgICAgX3RoaXMuc2V0U3RhdGUodXBkYXRlZFN0YXRlLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIF90aGlzLnNzckluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMudmFyaWFibGVXaWR0aCkge1xuICAgICAgICB2YXIgX3RyYWNrV2lkdGggPSAwLFxuICAgICAgICAgICAgX3RyYWNrTGVmdCA9IDA7XG4gICAgICAgIHZhciBjaGlsZHJlbldpZHRocyA9IFtdO1xuICAgICAgICB2YXIgcHJlQ2xvbmVzID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldFByZUNsb25lcykoX2V4dGVuZHMoe30sIF90aGlzLnByb3BzLCBfdGhpcy5zdGF0ZSwge1xuICAgICAgICAgIHNsaWRlQ291bnQ6IF90aGlzLnByb3BzLmNoaWxkcmVuLmxlbmd0aFxuICAgICAgICB9KSk7XG4gICAgICAgIHZhciBwb3N0Q2xvbmVzID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldFBvc3RDbG9uZXMpKF9leHRlbmRzKHt9LCBfdGhpcy5wcm9wcywgX3RoaXMuc3RhdGUsIHtcbiAgICAgICAgICBzbGlkZUNvdW50OiBfdGhpcy5wcm9wcy5jaGlsZHJlbi5sZW5ndGhcbiAgICAgICAgfSkpO1xuICAgICAgICBfdGhpcy5wcm9wcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgIGNoaWxkcmVuV2lkdGhzLnB1c2goY2hpbGQucHJvcHMuc3R5bGUud2lkdGgpO1xuICAgICAgICAgIF90cmFja1dpZHRoICs9IGNoaWxkLnByb3BzLnN0eWxlLndpZHRoO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVDbG9uZXM7IGkrKykge1xuICAgICAgICAgIF90cmFja0xlZnQgKz0gY2hpbGRyZW5XaWR0aHNbY2hpbGRyZW5XaWR0aHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICAgIF90cmFja1dpZHRoICs9IGNoaWxkcmVuV2lkdGhzW2NoaWxkcmVuV2lkdGhzLmxlbmd0aCAtIDEgLSBpXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBwb3N0Q2xvbmVzOyBfaTIrKykge1xuICAgICAgICAgIF90cmFja1dpZHRoICs9IGNoaWxkcmVuV2lkdGhzW19pMl07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlOyBfaTMrKykge1xuICAgICAgICAgIF90cmFja0xlZnQgKz0gY2hpbGRyZW5XaWR0aHNbX2kzXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RyYWNrU3R5bGUgPSB7XG4gICAgICAgICAgd2lkdGg6IF90cmFja1dpZHRoICsgXCJweFwiLFxuICAgICAgICAgIGxlZnQ6IC1fdHJhY2tMZWZ0ICsgXCJweFwiXG4gICAgICAgIH07XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5jZW50ZXJNb2RlKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRXaWR0aCA9IGNoaWxkcmVuV2lkdGhzW190aGlzLnN0YXRlLmN1cnJlbnRTbGlkZV0gKyBcInB4XCI7XG4gICAgICAgICAgX3RyYWNrU3R5bGUubGVmdCA9IFwiY2FsYyhcIiArIF90cmFja1N0eWxlLmxlZnQgKyBcIiArICgxMDAlIC0gXCIgKyBjdXJyZW50V2lkdGggKyBcIikgLyAyICkgXCI7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHRyYWNrU3R5bGU6IF90cmFja1N0eWxlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW5Db3VudCA9IF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5jb3VudChfdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgICB2YXIgc3BlYyA9IF9leHRlbmRzKHt9LCBfdGhpcy5wcm9wcywgX3RoaXMuc3RhdGUsIHsgc2xpZGVDb3VudDogY2hpbGRyZW5Db3VudCB9KTtcbiAgICAgIHZhciBzbGlkZUNvdW50ID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldFByZUNsb25lcykoc3BlYykgKyAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0UG9zdENsb25lcykoc3BlYykgKyBjaGlsZHJlbkNvdW50O1xuICAgICAgdmFyIHRyYWNrV2lkdGggPSAxMDAgLyBfdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cgKiBzbGlkZUNvdW50O1xuICAgICAgdmFyIHNsaWRlV2lkdGggPSAxMDAgLyBzbGlkZUNvdW50O1xuICAgICAgdmFyIHRyYWNrTGVmdCA9IC1zbGlkZVdpZHRoICogKCgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRQcmVDbG9uZXMpKHNwZWMpICsgX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlKSAqIHRyYWNrV2lkdGggLyAxMDA7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuY2VudGVyTW9kZSkge1xuICAgICAgICB0cmFja0xlZnQgKz0gKDEwMCAtIHNsaWRlV2lkdGggKiB0cmFja1dpZHRoIC8gMTAwKSAvIDI7XG4gICAgICB9XG4gICAgICB2YXIgdHJhY2tTdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6IHRyYWNrV2lkdGggKyBcIiVcIixcbiAgICAgICAgbGVmdDogdHJhY2tMZWZ0ICsgXCIlXCJcbiAgICAgIH07XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNsaWRlV2lkdGg6IHNsaWRlV2lkdGggKyBcIiVcIixcbiAgICAgICAgdHJhY2tTdHlsZTogdHJhY2tTdHlsZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmNoZWNrSW1hZ2VzTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbWFnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNsaWNrLXNsaWRlIGltZ1wiKTtcbiAgICAgIHZhciBpbWFnZXNDb3VudCA9IGltYWdlcy5sZW5ndGgsXG4gICAgICAgICAgbG9hZGVkQ291bnQgPSAwO1xuICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChpbWFnZXMsIGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgICAgcmV0dXJuICsrbG9hZGVkQ291bnQgJiYgbG9hZGVkQ291bnQgPj0gaW1hZ2VzQ291bnQgJiYgX3RoaXMub25XaW5kb3dSZXNpemVkKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICghaW1hZ2Uub25jbGljaykge1xuICAgICAgICAgIGltYWdlLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gaW1hZ2UucGFyZW50Tm9kZS5mb2N1cygpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZDbGlja0hhbmRsZXIgPSBpbWFnZS5vbmNsaWNrO1xuICAgICAgICAgIGltYWdlLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBwcmV2Q2xpY2tIYW5kbGVyKCk7XG4gICAgICAgICAgICBpbWFnZS5wYXJlbnROb2RlLmZvY3VzKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWltYWdlLm9ubG9hZCkge1xuICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5sYXp5TG9hZCkge1xuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5hZGFwdEhlaWdodCgpO1xuICAgICAgICAgICAgICBfdGhpcy5jYWxsYmFja1RpbWVycy5wdXNoKHNldFRpbWVvdXQoX3RoaXMub25XaW5kb3dSZXNpemVkLCBfdGhpcy5wcm9wcy5zcGVlZCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gaGFuZGxlcjtcbiAgICAgICAgICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25MYXp5TG9hZEVycm9yICYmIF90aGlzLnByb3BzLm9uTGF6eUxvYWRFcnJvcigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5wcm9ncmVzc2l2ZUxhenlMb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNsaWRlc1RvTG9hZCA9IFtdO1xuICAgICAgdmFyIHNwZWMgPSBfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMsIF90aGlzLnN0YXRlKTtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlOyBpbmRleCA8IF90aGlzLnN0YXRlLnNsaWRlQ291bnQgKyAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0UG9zdENsb25lcykoc3BlYyk7IGluZGV4KyspIHtcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLmxhenlMb2FkZWRMaXN0LmluZGV4T2YoaW5kZXgpIDwgMCkge1xuICAgICAgICAgIHNsaWRlc1RvTG9hZC5wdXNoKGluZGV4KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgX2luZGV4ID0gX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlIC0gMTsgX2luZGV4ID49IC0oMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0UHJlQ2xvbmVzKShzcGVjKTsgX2luZGV4LS0pIHtcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLmxhenlMb2FkZWRMaXN0LmluZGV4T2YoX2luZGV4KSA8IDApIHtcbiAgICAgICAgICBzbGlkZXNUb0xvYWQucHVzaChfaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzVG9Mb2FkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhenlMb2FkZWRMaXN0OiBzdGF0ZS5sYXp5TG9hZGVkTGlzdC5jb25jYXQoc2xpZGVzVG9Mb2FkKVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMub25MYXp5TG9hZCkge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uTGF6eUxvYWQoc2xpZGVzVG9Mb2FkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF90aGlzLmxhenlMb2FkVGltZXIpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKF90aGlzLmxhenlMb2FkVGltZXIpO1xuICAgICAgICAgIGRlbGV0ZSBfdGhpcy5sYXp5TG9hZFRpbWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNsaWRlSGFuZGxlciA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgdmFyIGRvbnRBbmltYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGFzTmF2Rm9yID0gX3RoaXMkcHJvcHMuYXNOYXZGb3IsXG4gICAgICAgICAgY3VycmVudFNsaWRlID0gX3RoaXMkcHJvcHMuY3VycmVudFNsaWRlLFxuICAgICAgICAgIGJlZm9yZUNoYW5nZSA9IF90aGlzJHByb3BzLmJlZm9yZUNoYW5nZSxcbiAgICAgICAgICBvbkxhenlMb2FkID0gX3RoaXMkcHJvcHMub25MYXp5TG9hZCxcbiAgICAgICAgICBzcGVlZCA9IF90aGlzJHByb3BzLnNwZWVkLFxuICAgICAgICAgIGFmdGVyQ2hhbmdlID0gX3RoaXMkcHJvcHMuYWZ0ZXJDaGFuZ2U7XG5cbiAgICAgIHZhciBfc2xpZGVIYW5kbGVyID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLnNsaWRlSGFuZGxlcikoX2V4dGVuZHMoe1xuICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgIH0sIF90aGlzLnByb3BzLCBfdGhpcy5zdGF0ZSwge1xuICAgICAgICB0cmFja1JlZjogX3RoaXMudHJhY2ssXG4gICAgICAgIHVzZUNTUzogX3RoaXMucHJvcHMudXNlQ1NTICYmICFkb250QW5pbWF0ZVxuICAgICAgfSkpLFxuICAgICAgICAgIHN0YXRlID0gX3NsaWRlSGFuZGxlci5zdGF0ZSxcbiAgICAgICAgICBuZXh0U3RhdGUgPSBfc2xpZGVIYW5kbGVyLm5leHRTdGF0ZTtcblxuICAgICAgaWYgKCFzdGF0ZSkgcmV0dXJuO1xuICAgICAgYmVmb3JlQ2hhbmdlICYmIGJlZm9yZUNoYW5nZShjdXJyZW50U2xpZGUsIHN0YXRlLmN1cnJlbnRTbGlkZSk7XG4gICAgICB2YXIgc2xpZGVzVG9Mb2FkID0gc3RhdGUubGF6eUxvYWRlZExpc3QuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc3RhdGUubGF6eUxvYWRlZExpc3QuaW5kZXhPZih2YWx1ZSkgPCAwO1xuICAgICAgfSk7XG4gICAgICBvbkxhenlMb2FkICYmIHNsaWRlc1RvTG9hZC5sZW5ndGggPiAwICYmIG9uTGF6eUxvYWQoc2xpZGVzVG9Mb2FkKTtcbiAgICAgIF90aGlzLnNldFN0YXRlKHN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFzTmF2Rm9yICYmIGFzTmF2Rm9yLmlubmVyU2xpZGVyLnN0YXRlLmN1cnJlbnRTbGlkZSAhPT0gY3VycmVudFNsaWRlICYmIGFzTmF2Rm9yLmlubmVyU2xpZGVyLnNsaWRlSGFuZGxlcihpbmRleCk7XG4gICAgICAgIGlmICghbmV4dFN0YXRlKSByZXR1cm47XG4gICAgICAgIF90aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGFuaW1hdGluZyA9IG5leHRTdGF0ZS5hbmltYXRpbmcsXG4gICAgICAgICAgICAgIGZpcnN0QmF0Y2ggPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMobmV4dFN0YXRlLCBbXCJhbmltYXRpbmdcIl0pO1xuXG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoZmlyc3RCYXRjaCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY2FsbGJhY2tUaW1lcnMucHVzaChzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHsgYW5pbWF0aW5nOiBhbmltYXRpbmcgfSk7XG4gICAgICAgICAgICB9LCAxMCkpO1xuICAgICAgICAgICAgYWZ0ZXJDaGFuZ2UgJiYgYWZ0ZXJDaGFuZ2Uoc3RhdGUuY3VycmVudFNsaWRlKTtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5hbmltYXRpb25FbmRDYWxsYmFjaztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgc3BlZWQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmNoYW5nZVNsaWRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIHZhciBkb250QW5pbWF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgIHZhciBzcGVjID0gX2V4dGVuZHMoe30sIF90aGlzLnByb3BzLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB2YXIgdGFyZ2V0U2xpZGUgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuY2hhbmdlU2xpZGUpKHNwZWMsIG9wdGlvbnMpO1xuICAgICAgaWYgKHRhcmdldFNsaWRlICE9PSAwICYmICF0YXJnZXRTbGlkZSkgcmV0dXJuO1xuICAgICAgaWYgKGRvbnRBbmltYXRlID09PSB0cnVlKSB7XG4gICAgICAgIF90aGlzLnNsaWRlSGFuZGxlcih0YXJnZXRTbGlkZSwgZG9udEFuaW1hdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuc2xpZGVIYW5kbGVyKHRhcmdldFNsaWRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfdGhpcy5jbGlja2FibGUgPT09IGZhbHNlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLmNsaWNrYWJsZSA9IHRydWU7XG4gICAgfTtcblxuICAgIF90aGlzLmtleUhhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGRpciA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5rZXlIYW5kbGVyKShlLCBfdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5LCBfdGhpcy5wcm9wcy5ydGwpO1xuICAgICAgZGlyICE9PSBcIlwiICYmIF90aGlzLmNoYW5nZVNsaWRlKHsgbWVzc2FnZTogZGlyIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZWxlY3RIYW5kbGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIF90aGlzLmNoYW5nZVNsaWRlKG9wdGlvbnMpO1xuICAgIH07XG5cbiAgICBfdGhpcy5kaXNhYmxlQm9keVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGUpIHtcbiAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9O1xuICAgICAgd2luZG93Lm9udG91Y2htb3ZlID0gcHJldmVudERlZmF1bHQ7XG4gICAgfTtcblxuICAgIF90aGlzLmVuYWJsZUJvZHlTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3aW5kb3cub250b3VjaG1vdmUgPSBudWxsO1xuICAgIH07XG5cbiAgICBfdGhpcy5zd2lwZVN0YXJ0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy52ZXJ0aWNhbFN3aXBpbmcpIHtcbiAgICAgICAgX3RoaXMuZGlzYWJsZUJvZHlTY3JvbGwoKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdGF0ZSA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5zd2lwZVN0YXJ0KShlLCBfdGhpcy5wcm9wcy5zd2lwZSwgX3RoaXMucHJvcHMuZHJhZ2dhYmxlKTtcbiAgICAgIHN0YXRlICE9PSBcIlwiICYmIF90aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3dpcGVNb3ZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBzdGF0ZSA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5zd2lwZU1vdmUpKGUsIF9leHRlbmRzKHt9LCBfdGhpcy5wcm9wcywgX3RoaXMuc3RhdGUsIHtcbiAgICAgICAgdHJhY2tSZWY6IF90aGlzLnRyYWNrLFxuICAgICAgICBsaXN0UmVmOiBfdGhpcy5saXN0LFxuICAgICAgICBzbGlkZUluZGV4OiBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGVcbiAgICAgIH0pKTtcbiAgICAgIGlmICghc3RhdGUpIHJldHVybjtcbiAgICAgIGlmIChzdGF0ZVtcInN3aXBpbmdcIl0pIHtcbiAgICAgICAgX3RoaXMuY2xpY2thYmxlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBfdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gICAgfTtcblxuICAgIF90aGlzLnN3aXBlRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBzdGF0ZSA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5zd2lwZUVuZCkoZSwgX2V4dGVuZHMoe30sIF90aGlzLnByb3BzLCBfdGhpcy5zdGF0ZSwge1xuICAgICAgICB0cmFja1JlZjogX3RoaXMudHJhY2ssXG4gICAgICAgIGxpc3RSZWY6IF90aGlzLmxpc3QsXG4gICAgICAgIHNsaWRlSW5kZXg6IF90aGlzLnN0YXRlLmN1cnJlbnRTbGlkZVxuICAgICAgfSkpO1xuICAgICAgaWYgKCFzdGF0ZSkgcmV0dXJuO1xuICAgICAgdmFyIHRyaWdnZXJTbGlkZUhhbmRsZXIgPSBzdGF0ZVtcInRyaWdnZXJTbGlkZUhhbmRsZXJcIl07XG4gICAgICBkZWxldGUgc3RhdGVbXCJ0cmlnZ2VyU2xpZGVIYW5kbGVyXCJdO1xuICAgICAgX3RoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgICAgaWYgKHRyaWdnZXJTbGlkZUhhbmRsZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgX3RoaXMuc2xpZGVIYW5kbGVyKHRyaWdnZXJTbGlkZUhhbmRsZXIpO1xuICAgICAgaWYgKF90aGlzLnByb3BzLnZlcnRpY2FsU3dpcGluZykge1xuICAgICAgICBfdGhpcy5lbmFibGVCb2R5U2Nyb2xsKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNsaWNrUHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHRoaXMgYW5kIGZlbGxvdyBtZXRob2RzIGFyZSB3cmFwcGVkIGluIHNldFRpbWVvdXRcbiAgICAgIC8vIHRvIG1ha2Ugc3VyZSBpbml0aWFsaXplIHNldFN0YXRlIGhhcyBoYXBwZW5lZCBiZWZvcmVcbiAgICAgIC8vIGFueSBvZiBzdWNoIG1ldGhvZHMgYXJlIGNhbGxlZFxuICAgICAgX3RoaXMuY2FsbGJhY2tUaW1lcnMucHVzaChzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmNoYW5nZVNsaWRlKHsgbWVzc2FnZTogXCJwcmV2aW91c1wiIH0pO1xuICAgICAgfSwgMCkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zbGlja05leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsYmFja1RpbWVycy5wdXNoKHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuY2hhbmdlU2xpZGUoeyBtZXNzYWdlOiBcIm5leHRcIiB9KTtcbiAgICAgIH0sIDApKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2xpY2tHb1RvID0gZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICB2YXIgZG9udEFuaW1hdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICBzbGlkZSA9IE51bWJlcihzbGlkZSk7XG4gICAgICBpZiAoaXNOYU4oc2xpZGUpKSByZXR1cm4gXCJcIjtcbiAgICAgIF90aGlzLmNhbGxiYWNrVGltZXJzLnB1c2goc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgbWVzc2FnZTogXCJpbmRleFwiLFxuICAgICAgICAgIGluZGV4OiBzbGlkZSxcbiAgICAgICAgICBjdXJyZW50U2xpZGU6IF90aGlzLnN0YXRlLmN1cnJlbnRTbGlkZVxuICAgICAgICB9LCBkb250QW5pbWF0ZSk7XG4gICAgICB9LCAwKSk7XG4gICAgfTtcblxuICAgIF90aGlzLnBsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmV4dEluZGV4O1xuICAgICAgaWYgKF90aGlzLnByb3BzLnJ0bCkge1xuICAgICAgICBuZXh0SW5kZXggPSBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUgLSBfdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgoMCwgX2lubmVyU2xpZGVyVXRpbHMuY2FuR29OZXh0KShfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMsIF90aGlzLnN0YXRlKSkpIHtcbiAgICAgICAgICBuZXh0SW5kZXggPSBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUgKyBfdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2xpZGVIYW5kbGVyKG5leHRJbmRleCk7XG4gICAgfTtcblxuICAgIF90aGlzLmF1dG9QbGF5ID0gZnVuY3Rpb24gKHBsYXlUeXBlKSB7XG4gICAgICBpZiAoX3RoaXMuYXV0b3BsYXlUaW1lcikge1xuICAgICAgICBjbGVhckludGVydmFsKF90aGlzLmF1dG9wbGF5VGltZXIpO1xuICAgICAgfVxuICAgICAgdmFyIGF1dG9wbGF5aW5nID0gX3RoaXMuc3RhdGUuYXV0b3BsYXlpbmc7XG4gICAgICBpZiAocGxheVR5cGUgPT09IFwidXBkYXRlXCIpIHtcbiAgICAgICAgaWYgKGF1dG9wbGF5aW5nID09PSBcImhvdmVyZWRcIiB8fCBhdXRvcGxheWluZyA9PT0gXCJmb2N1c2VkXCIgfHwgYXV0b3BsYXlpbmcgPT09IFwicGF1c2VkXCIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGxheVR5cGUgPT09IFwibGVhdmVcIikge1xuICAgICAgICBpZiAoYXV0b3BsYXlpbmcgPT09IFwicGF1c2VkXCIgfHwgYXV0b3BsYXlpbmcgPT09IFwiZm9jdXNlZFwiKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBsYXlUeXBlID09PSBcImJsdXJcIikge1xuICAgICAgICBpZiAoYXV0b3BsYXlpbmcgPT09IFwicGF1c2VkXCIgfHwgYXV0b3BsYXlpbmcgPT09IFwiaG92ZXJlZFwiKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5hdXRvcGxheVRpbWVyID0gc2V0SW50ZXJ2YWwoX3RoaXMucGxheSwgX3RoaXMucHJvcHMuYXV0b3BsYXlTcGVlZCArIDUwKTtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgYXV0b3BsYXlpbmc6IFwicGxheWluZ1wiIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5wYXVzZSA9IGZ1bmN0aW9uIChwYXVzZVR5cGUpIHtcbiAgICAgIGlmIChfdGhpcy5hdXRvcGxheVRpbWVyKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoX3RoaXMuYXV0b3BsYXlUaW1lcik7XG4gICAgICAgIF90aGlzLmF1dG9wbGF5VGltZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIGF1dG9wbGF5aW5nID0gX3RoaXMuc3RhdGUuYXV0b3BsYXlpbmc7XG4gICAgICBpZiAocGF1c2VUeXBlID09PSBcInBhdXNlZFwiKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgYXV0b3BsYXlpbmc6IFwicGF1c2VkXCIgfSk7XG4gICAgICB9IGVsc2UgaWYgKHBhdXNlVHlwZSA9PT0gXCJmb2N1c2VkXCIpIHtcbiAgICAgICAgaWYgKGF1dG9wbGF5aW5nID09PSBcImhvdmVyZWRcIiB8fCBhdXRvcGxheWluZyA9PT0gXCJwbGF5aW5nXCIpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGF1dG9wbGF5aW5nOiBcImZvY3VzZWRcIiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcGF1c2VUeXBlICBpcyAnaG92ZXJlZCdcbiAgICAgICAgaWYgKGF1dG9wbGF5aW5nID09PSBcInBsYXlpbmdcIikge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgYXV0b3BsYXlpbmc6IFwiaG92ZXJlZFwiIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRG90c092ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuYXV0b3BsYXkgJiYgX3RoaXMucGF1c2UoXCJob3ZlcmVkXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkRvdHNMZWF2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5hdXRvcGxheSAmJiBfdGhpcy5zdGF0ZS5hdXRvcGxheWluZyA9PT0gXCJob3ZlcmVkXCIgJiYgX3RoaXMuYXV0b1BsYXkoXCJsZWF2ZVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25UcmFja092ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuYXV0b3BsYXkgJiYgX3RoaXMucGF1c2UoXCJob3ZlcmVkXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vblRyYWNrTGVhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuYXV0b3BsYXkgJiYgX3RoaXMuc3RhdGUuYXV0b3BsYXlpbmcgPT09IFwiaG92ZXJlZFwiICYmIF90aGlzLmF1dG9QbGF5KFwibGVhdmVcIik7XG4gICAgfTtcblxuICAgIF90aGlzLm9uU2xpZGVGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5hdXRvcGxheSAmJiBfdGhpcy5wYXVzZShcImZvY3VzZWRcIik7XG4gICAgfTtcblxuICAgIF90aGlzLm9uU2xpZGVCbHVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmF1dG9wbGF5ICYmIF90aGlzLnN0YXRlLmF1dG9wbGF5aW5nID09PSBcImZvY3VzZWRcIiAmJiBfdGhpcy5hdXRvUGxheShcImJsdXJcIik7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMyLmRlZmF1bHQpKFwic2xpY2stc2xpZGVyXCIsIF90aGlzLnByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICBcInNsaWNrLXZlcnRpY2FsXCI6IF90aGlzLnByb3BzLnZlcnRpY2FsLFxuICAgICAgICBcInNsaWNrLWluaXRpYWxpemVkXCI6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdmFyIHNwZWMgPSBfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMsIF90aGlzLnN0YXRlKTtcbiAgICAgIHZhciB0cmFja1Byb3BzID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmV4dHJhY3RPYmplY3QpKHNwZWMsIFtcImZhZGVcIiwgXCJjc3NFYXNlXCIsIFwic3BlZWRcIiwgXCJpbmZpbml0ZVwiLCBcImNlbnRlck1vZGVcIiwgXCJmb2N1c09uU2VsZWN0XCIsIFwiY3VycmVudFNsaWRlXCIsIFwibGF6eUxvYWRcIiwgXCJsYXp5TG9hZGVkTGlzdFwiLCBcInJ0bFwiLCBcInNsaWRlV2lkdGhcIiwgXCJzbGlkZUhlaWdodFwiLCBcImxpc3RIZWlnaHRcIiwgXCJ2ZXJ0aWNhbFwiLCBcInNsaWRlc1RvU2hvd1wiLCBcInNsaWRlc1RvU2Nyb2xsXCIsIFwic2xpZGVDb3VudFwiLCBcInRyYWNrU3R5bGVcIiwgXCJ2YXJpYWJsZVdpZHRoXCIsIFwidW5zbGlja1wiLCBcImNlbnRlclBhZGRpbmdcIl0pO1xuICAgICAgdmFyIHBhdXNlT25Ib3ZlciA9IF90aGlzLnByb3BzLnBhdXNlT25Ib3ZlcjtcblxuICAgICAgdHJhY2tQcm9wcyA9IF9leHRlbmRzKHt9LCB0cmFja1Byb3BzLCB7XG4gICAgICAgIG9uTW91c2VFbnRlcjogcGF1c2VPbkhvdmVyID8gX3RoaXMub25UcmFja092ZXIgOiBudWxsLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHBhdXNlT25Ib3ZlciA/IF90aGlzLm9uVHJhY2tMZWF2ZSA6IG51bGwsXG4gICAgICAgIG9uTW91c2VPdmVyOiBwYXVzZU9uSG92ZXIgPyBfdGhpcy5vblRyYWNrT3ZlciA6IG51bGwsXG4gICAgICAgIGZvY3VzT25TZWxlY3Q6IF90aGlzLnByb3BzLmZvY3VzT25TZWxlY3QgPyBfdGhpcy5zZWxlY3RIYW5kbGVyIDogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBkb3RzO1xuICAgICAgaWYgKF90aGlzLnByb3BzLmRvdHMgPT09IHRydWUgJiYgX3RoaXMuc3RhdGUuc2xpZGVDb3VudCA+PSBfdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgdmFyIGRvdFByb3BzID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmV4dHJhY3RPYmplY3QpKHNwZWMsIFtcImRvdHNDbGFzc1wiLCBcInNsaWRlQ291bnRcIiwgXCJzbGlkZXNUb1Nob3dcIiwgXCJjdXJyZW50U2xpZGVcIiwgXCJzbGlkZXNUb1Njcm9sbFwiLCBcImNsaWNrSGFuZGxlclwiLCBcImNoaWxkcmVuXCIsIFwiY3VzdG9tUGFnaW5nXCIsIFwiaW5maW5pdGVcIiwgXCJhcHBlbmREb3RzXCJdKTtcbiAgICAgICAgdmFyIHBhdXNlT25Eb3RzSG92ZXIgPSBfdGhpcy5wcm9wcy5wYXVzZU9uRG90c0hvdmVyO1xuXG4gICAgICAgIGRvdFByb3BzID0gX2V4dGVuZHMoe30sIGRvdFByb3BzLCB7XG4gICAgICAgICAgY2xpY2tIYW5kbGVyOiBfdGhpcy5jaGFuZ2VTbGlkZSxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IHBhdXNlT25Eb3RzSG92ZXIgPyBfdGhpcy5vbkRvdHNMZWF2ZSA6IG51bGwsXG4gICAgICAgICAgb25Nb3VzZU92ZXI6IHBhdXNlT25Eb3RzSG92ZXIgPyBfdGhpcy5vbkRvdHNPdmVyIDogbnVsbCxcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHBhdXNlT25Eb3RzSG92ZXIgPyBfdGhpcy5vbkRvdHNMZWF2ZSA6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIGRvdHMgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZG90cy5Eb3RzLCBkb3RQcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2QXJyb3csIG5leHRBcnJvdztcbiAgICAgIHZhciBhcnJvd1Byb3BzID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmV4dHJhY3RPYmplY3QpKHNwZWMsIFtcImluZmluaXRlXCIsIFwiY2VudGVyTW9kZVwiLCBcImN1cnJlbnRTbGlkZVwiLCBcInNsaWRlQ291bnRcIiwgXCJzbGlkZXNUb1Nob3dcIiwgXCJwcmV2QXJyb3dcIiwgXCJuZXh0QXJyb3dcIl0pO1xuICAgICAgYXJyb3dQcm9wcy5jbGlja0hhbmRsZXIgPSBfdGhpcy5jaGFuZ2VTbGlkZTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLmFycm93cykge1xuICAgICAgICBwcmV2QXJyb3cgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYXJyb3dzLlByZXZBcnJvdywgYXJyb3dQcm9wcyk7XG4gICAgICAgIG5leHRBcnJvdyA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9hcnJvd3MuTmV4dEFycm93LCBhcnJvd1Byb3BzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHZlcnRpY2FsSGVpZ2h0U3R5bGUgPSBudWxsO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMudmVydGljYWwpIHtcbiAgICAgICAgdmVydGljYWxIZWlnaHRTdHlsZSA9IHtcbiAgICAgICAgICBoZWlnaHQ6IF90aGlzLnN0YXRlLmxpc3RIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNlbnRlclBhZGRpbmdTdHlsZSA9IG51bGw7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICBjZW50ZXJQYWRkaW5nU3R5bGUgPSB7XG4gICAgICAgICAgICBwYWRkaW5nOiBcIjBweCBcIiArIF90aGlzLnByb3BzLmNlbnRlclBhZGRpbmdcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNlbnRlclBhZGRpbmdTdHlsZSA9IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IF90aGlzLnByb3BzLmNlbnRlclBhZGRpbmcgKyBcIiAwcHhcIlxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGxpc3RTdHlsZSA9IF9leHRlbmRzKHt9LCB2ZXJ0aWNhbEhlaWdodFN0eWxlLCBjZW50ZXJQYWRkaW5nU3R5bGUpO1xuICAgICAgdmFyIHRvdWNoTW92ZSA9IF90aGlzLnByb3BzLnRvdWNoTW92ZTtcbiAgICAgIHZhciBsaXN0UHJvcHMgPSB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJzbGljay1saXN0XCIsXG4gICAgICAgIHN0eWxlOiBsaXN0U3R5bGUsXG4gICAgICAgIG9uQ2xpY2s6IF90aGlzLmNsaWNrSGFuZGxlcixcbiAgICAgICAgb25Nb3VzZURvd246IHRvdWNoTW92ZSA/IF90aGlzLnN3aXBlU3RhcnQgOiBudWxsLFxuICAgICAgICBvbk1vdXNlTW92ZTogX3RoaXMuc3RhdGUuZHJhZ2dpbmcgJiYgdG91Y2hNb3ZlID8gX3RoaXMuc3dpcGVNb3ZlIDogbnVsbCxcbiAgICAgICAgb25Nb3VzZVVwOiB0b3VjaE1vdmUgPyBfdGhpcy5zd2lwZUVuZCA6IG51bGwsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogX3RoaXMuc3RhdGUuZHJhZ2dpbmcgJiYgdG91Y2hNb3ZlID8gX3RoaXMuc3dpcGVFbmQgOiBudWxsLFxuICAgICAgICBvblRvdWNoU3RhcnQ6IHRvdWNoTW92ZSA/IF90aGlzLnN3aXBlU3RhcnQgOiBudWxsLFxuICAgICAgICBvblRvdWNoTW92ZTogX3RoaXMuc3RhdGUuZHJhZ2dpbmcgJiYgdG91Y2hNb3ZlID8gX3RoaXMuc3dpcGVNb3ZlIDogbnVsbCxcbiAgICAgICAgb25Ub3VjaEVuZDogdG91Y2hNb3ZlID8gX3RoaXMuc3dpcGVFbmQgOiBudWxsLFxuICAgICAgICBvblRvdWNoQ2FuY2VsOiBfdGhpcy5zdGF0ZS5kcmFnZ2luZyAmJiB0b3VjaE1vdmUgPyBfdGhpcy5zd2lwZUVuZCA6IG51bGwsXG4gICAgICAgIG9uS2V5RG93bjogX3RoaXMucHJvcHMuYWNjZXNzaWJpbGl0eSA/IF90aGlzLmtleUhhbmRsZXIgOiBudWxsXG4gICAgICB9O1xuXG4gICAgICB2YXIgaW5uZXJTbGlkZXJQcm9wcyA9IHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIGRpcjogXCJsdHJcIlxuICAgICAgfTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLnVuc2xpY2spIHtcbiAgICAgICAgbGlzdFByb3BzID0geyBjbGFzc05hbWU6IFwic2xpY2stbGlzdFwiIH07XG4gICAgICAgIGlubmVyU2xpZGVyUHJvcHMgPSB7IGNsYXNzTmFtZTogY2xhc3NOYW1lIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIGlubmVyU2xpZGVyUHJvcHMsXG4gICAgICAgICFfdGhpcy5wcm9wcy51bnNsaWNrID8gcHJldkFycm93IDogXCJcIixcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICBfZXh0ZW5kcyh7IHJlZjogX3RoaXMubGlzdFJlZkhhbmRsZXIgfSwgbGlzdFByb3BzKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIF90cmFjay5UcmFjayxcbiAgICAgICAgICAgIF9leHRlbmRzKHsgcmVmOiBfdGhpcy50cmFja1JlZkhhbmRsZXIgfSwgdHJhY2tQcm9wcyksXG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgIV90aGlzLnByb3BzLnVuc2xpY2sgPyBuZXh0QXJyb3cgOiBcIlwiLFxuICAgICAgICAhX3RoaXMucHJvcHMudW5zbGljayA/IGRvdHMgOiBcIlwiXG4gICAgICApO1xuICAgIH07XG5cbiAgICBfdGhpcy5saXN0ID0gbnVsbDtcbiAgICBfdGhpcy50cmFjayA9IG51bGw7XG4gICAgX3RoaXMuc3RhdGUgPSBfZXh0ZW5kcyh7fSwgX2luaXRpYWxTdGF0ZTIuZGVmYXVsdCwge1xuICAgICAgY3VycmVudFNsaWRlOiBfdGhpcy5wcm9wcy5pbml0aWFsU2xpZGUsXG4gICAgICBzbGlkZUNvdW50OiBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4uY291bnQoX3RoaXMucHJvcHMuY2hpbGRyZW4pXG4gICAgfSk7XG4gICAgX3RoaXMuY2FsbGJhY2tUaW1lcnMgPSBbXTtcbiAgICBfdGhpcy5jbGlja2FibGUgPSB0cnVlO1xuICAgIF90aGlzLmRlYm91bmNlZFJlc2l6ZSA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIElubmVyU2xpZGVyO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfaW5uZXJTbGlkZXIgPSByZXF1aXJlKFwiLi9pbm5lci1zbGlkZXJcIik7XG5cbnZhciBfanNvbjJtcSA9IHJlcXVpcmUoXCJqc29uMm1xXCIpO1xuXG52YXIgX2pzb24ybXEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanNvbjJtcSk7XG5cbnZhciBfZGVmYXVsdFByb3BzID0gcmVxdWlyZShcIi4vZGVmYXVsdC1wcm9wc1wiKTtcblxudmFyIF9kZWZhdWx0UHJvcHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmYXVsdFByb3BzKTtcblxudmFyIF9pbm5lclNsaWRlclV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvaW5uZXJTbGlkZXJVdGlsc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgZW5xdWlyZSA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5jYW5Vc2VET00pKCkgJiYgcmVxdWlyZShcImVucXVpcmUuanNcIik7XG5cbnZhciBTbGlkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2xpZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTbGlkZXIocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2xpZGVyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuaW5uZXJTbGlkZXJSZWZIYW5kbGVyID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgcmV0dXJuIF90aGlzLmlubmVyU2xpZGVyID0gcmVmO1xuICAgIH07XG5cbiAgICBfdGhpcy5zbGlja1ByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuaW5uZXJTbGlkZXIuc2xpY2tQcmV2KCk7XG4gICAgfTtcblxuICAgIF90aGlzLnNsaWNrTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5pbm5lclNsaWRlci5zbGlja05leHQoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2xpY2tHb1RvID0gZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICB2YXIgZG9udEFuaW1hdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgICAgcmV0dXJuIF90aGlzLmlubmVyU2xpZGVyLnNsaWNrR29UbyhzbGlkZSwgZG9udEFuaW1hdGUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zbGlja1BhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmlubmVyU2xpZGVyLnBhdXNlKFwicGF1c2VkXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zbGlja1BsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuaW5uZXJTbGlkZXIuYXV0b1BsYXkoXCJwbGF5XCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGJyZWFrcG9pbnQ6IG51bGxcbiAgICB9O1xuICAgIF90aGlzLl9yZXNwb25zaXZlTWVkaWFIYW5kbGVycyA9IFtdO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFNsaWRlci5wcm90b3R5cGUubWVkaWEgPSBmdW5jdGlvbiBtZWRpYShxdWVyeSwgaGFuZGxlcikge1xuICAgIC8vIGphdmFzY3JpcHQgaGFuZGxlciBmb3IgIGNzcyBtZWRpYSBxdWVyeVxuICAgIGVucXVpcmUucmVnaXN0ZXIocXVlcnksIGhhbmRsZXIpO1xuICAgIHRoaXMuX3Jlc3BvbnNpdmVNZWRpYUhhbmRsZXJzLnB1c2goeyBxdWVyeTogcXVlcnksIGhhbmRsZXI6IGhhbmRsZXIgfSk7XG4gIH07XG5cbiAgLy8gaGFuZGxlcyByZXNwb25zaXZlIGJyZWFrcG9pbnRzXG5cblxuICBTbGlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIC8vIHBlcmZvcm1hbmNlIG1vbml0b3JpbmdcbiAgICAvL2lmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy9jb25zdCB7IHdoeURpZFlvdVVwZGF0ZSB9ID0gcmVxdWlyZSgnd2h5LWRpZC15b3UtdXBkYXRlJylcbiAgICAvL3doeURpZFlvdVVwZGF0ZShSZWFjdClcbiAgICAvL31cbiAgICBpZiAodGhpcy5wcm9wcy5yZXNwb25zaXZlKSB7XG4gICAgICB2YXIgYnJlYWtwb2ludHMgPSB0aGlzLnByb3BzLnJlc3BvbnNpdmUubWFwKGZ1bmN0aW9uIChicmVha3B0KSB7XG4gICAgICAgIHJldHVybiBicmVha3B0LmJyZWFrcG9pbnQ7XG4gICAgICB9KTtcbiAgICAgIC8vIHNvcnQgdGhlbSBpbiBpbmNyZWFzaW5nIG9yZGVyIG9mIHRoZWlyIG51bWVyaWNhbCB2YWx1ZVxuICAgICAgYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICByZXR1cm4geCAtIHk7XG4gICAgICB9KTtcblxuICAgICAgYnJlYWtwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoYnJlYWtwb2ludCwgaW5kZXgpIHtcbiAgICAgICAgLy8gbWVkaWEgcXVlcnkgZm9yIGVhY2ggYnJlYWtwb2ludFxuICAgICAgICB2YXIgYlF1ZXJ5ID0gdm9pZCAwO1xuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICBiUXVlcnkgPSAoMCwgX2pzb24ybXEyLmRlZmF1bHQpKHsgbWluV2lkdGg6IDAsIG1heFdpZHRoOiBicmVha3BvaW50IH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJRdWVyeSA9ICgwLCBfanNvbjJtcTIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgbWluV2lkdGg6IGJyZWFrcG9pbnRzW2luZGV4IC0gMV0gKyAxLFxuICAgICAgICAgICAgbWF4V2lkdGg6IGJyZWFrcG9pbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyB3aGVuIG5vdCB1c2luZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmdcbiAgICAgICAgKDAsIF9pbm5lclNsaWRlclV0aWxzLmNhblVzZURPTSkoKSAmJiBfdGhpczIubWVkaWEoYlF1ZXJ5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgYnJlYWtwb2ludDogYnJlYWtwb2ludCB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gUmVnaXN0ZXIgbWVkaWEgcXVlcnkgZm9yIGZ1bGwgc2NyZWVuLiBOZWVkIHRvIHN1cHBvcnQgcmVzaXplIGZyb20gc21hbGwgdG8gbGFyZ2VcbiAgICAgIC8vIGNvbnZlcnQgamF2YXNjcmlwdCBvYmplY3QgdG8gbWVkaWEgcXVlcnkgc3RyaW5nXG4gICAgICB2YXIgcXVlcnkgPSAoMCwgX2pzb24ybXEyLmRlZmF1bHQpKHsgbWluV2lkdGg6IGJyZWFrcG9pbnRzLnNsaWNlKC0xKVswXSB9KTtcblxuICAgICAgKDAsIF9pbm5lclNsaWRlclV0aWxzLmNhblVzZURPTSkoKSAmJiB0aGlzLm1lZGlhKHF1ZXJ5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IGJyZWFrcG9pbnQ6IG51bGwgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgU2xpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX3Jlc3BvbnNpdmVNZWRpYUhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgZW5xdWlyZS51bnJlZ2lzdGVyKG9iai5xdWVyeSwgb2JqLmhhbmRsZXIpO1xuICAgIH0pO1xuICB9O1xuXG4gIFNsaWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIHNldHRpbmdzO1xuICAgIHZhciBuZXdQcm9wcztcbiAgICBpZiAodGhpcy5zdGF0ZS5icmVha3BvaW50KSB7XG4gICAgICBuZXdQcm9wcyA9IHRoaXMucHJvcHMucmVzcG9uc2l2ZS5maWx0ZXIoZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgcmV0dXJuIHJlc3AuYnJlYWtwb2ludCA9PT0gX3RoaXMzLnN0YXRlLmJyZWFrcG9pbnQ7XG4gICAgICB9KTtcbiAgICAgIHNldHRpbmdzID0gbmV3UHJvcHNbMF0uc2V0dGluZ3MgPT09IFwidW5zbGlja1wiID8gXCJ1bnNsaWNrXCIgOiBfZXh0ZW5kcyh7fSwgX2RlZmF1bHRQcm9wczIuZGVmYXVsdCwgdGhpcy5wcm9wcywgbmV3UHJvcHNbMF0uc2V0dGluZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXR0aW5ncyA9IF9leHRlbmRzKHt9LCBfZGVmYXVsdFByb3BzMi5kZWZhdWx0LCB0aGlzLnByb3BzKTtcbiAgICB9XG5cbiAgICAvLyBmb3JjZSBzY3JvbGxpbmcgYnkgb25lIGlmIGNlbnRlck1vZGUgaXMgb25cbiAgICBpZiAoc2V0dGluZ3MuY2VudGVyTW9kZSkge1xuICAgICAgaWYgKHNldHRpbmdzLnNsaWRlc1RvU2Nyb2xsID4gMSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwic2xpZGVzVG9TY3JvbGwgc2hvdWxkIGJlIGVxdWFsIHRvIDEgaW4gY2VudGVyTW9kZSwgeW91IGFyZSB1c2luZyBcIiArIHNldHRpbmdzLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgIH1cbiAgICAgIHNldHRpbmdzLnNsaWRlc1RvU2Nyb2xsID0gMTtcbiAgICB9XG4gICAgLy8gZm9yY2Ugc2hvd2luZyBvbmUgc2xpZGUgYW5kIHNjcm9sbGluZyBieSBvbmUgaWYgdGhlIGZhZGUgbW9kZSBpcyBvblxuICAgIGlmIChzZXR0aW5ncy5mYWRlKSB7XG4gICAgICBpZiAoc2V0dGluZ3Muc2xpZGVzVG9TaG93ID4gMSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwic2xpZGVzVG9TaG93IHNob3VsZCBiZSBlcXVhbCB0byAxIHdoZW4gZmFkZSBpcyB0cnVlLCB5b3UncmUgdXNpbmcgXCIgKyBzZXR0aW5ncy5zbGlkZXNUb1Nob3cpO1xuICAgICAgfVxuICAgICAgaWYgKHNldHRpbmdzLnNsaWRlc1RvU2Nyb2xsID4gMSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwic2xpZGVzVG9TY3JvbGwgc2hvdWxkIGJlIGVxdWFsIHRvIDEgd2hlbiBmYWRlIGlzIHRydWUsIHlvdSdyZSB1c2luZyBcIiArIHNldHRpbmdzLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgIH1cbiAgICAgIHNldHRpbmdzLnNsaWRlc1RvU2hvdyA9IDE7XG4gICAgICBzZXR0aW5ncy5zbGlkZXNUb1Njcm9sbCA9IDE7XG4gICAgfVxuXG4gICAgLy8gbWFrZXMgc3VyZSB0aGF0IGNoaWxkcmVuIGlzIGFuIGFycmF5LCBldmVuIHdoZW4gdGhlcmUgaXMgb25seSAxIGNoaWxkXG4gICAgdmFyIGNoaWxkcmVuID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLnRvQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAvLyBDaGlsZHJlbiBtYXkgY29udGFpbiBmYWxzZSBvciBudWxsLCBzbyB3ZSBzaG91bGQgZmlsdGVyIHRoZW1cbiAgICAvLyBjaGlsZHJlbiBtYXkgYWxzbyBjb250YWluIHN0cmluZyBmaWxsZWQgd2l0aCBzcGFjZXMgKGluIGNlcnRhaW4gY2FzZXMgd2hlcmUgd2UgdXNlIGpzeCBzdHJpbmdzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gISFjaGlsZC50cmltKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gISFjaGlsZDtcbiAgICB9KTtcblxuICAgIC8vIHJvd3MgYW5kIHNsaWRlc1BlclJvdyBsb2dpYyBpcyBoYW5kbGVkIGhlcmVcbiAgICBpZiAoc2V0dGluZ3MudmFyaWFibGVXaWR0aCAmJiAoc2V0dGluZ3Mucm93cyA+IDEgfHwgc2V0dGluZ3Muc2xpZGVzUGVyUm93ID4gMSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcInZhcmlhYmxlV2lkdGggaXMgbm90IHN1cHBvcnRlZCBpbiBjYXNlIG9mIHJvd3MgPiAxIG9yIHNsaWRlc1BlclJvdyA+IDFcIik7XG4gICAgICBzZXR0aW5ncy52YXJpYWJsZVdpZHRoID0gZmFsc2U7XG4gICAgfVxuICAgIHZhciBuZXdDaGlsZHJlbiA9IFtdO1xuICAgIHZhciBjdXJyZW50V2lkdGggPSBudWxsO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IHNldHRpbmdzLnJvd3MgKiBzZXR0aW5ncy5zbGlkZXNQZXJSb3cpIHtcbiAgICAgIHZhciBuZXdTbGlkZSA9IFtdO1xuICAgICAgZm9yICh2YXIgaiA9IGk7IGogPCBpICsgc2V0dGluZ3Mucm93cyAqIHNldHRpbmdzLnNsaWRlc1BlclJvdzsgaiArPSBzZXR0aW5ncy5zbGlkZXNQZXJSb3cpIHtcbiAgICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrID0gajsgayA8IGogKyBzZXR0aW5ncy5zbGlkZXNQZXJSb3c7IGsgKz0gMSkge1xuICAgICAgICAgIGlmIChzZXR0aW5ncy52YXJpYWJsZVdpZHRoICYmIGNoaWxkcmVuW2tdLnByb3BzLnN0eWxlKSB7XG4gICAgICAgICAgICBjdXJyZW50V2lkdGggPSBjaGlsZHJlbltrXS5wcm9wcy5zdHlsZS53aWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGsgPj0gY2hpbGRyZW4ubGVuZ3RoKSBicmVhaztcbiAgICAgICAgICByb3cucHVzaChfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkcmVuW2tdLCB7XG4gICAgICAgICAgICBrZXk6IDEwMCAqIGkgKyAxMCAqIGogKyBrLFxuICAgICAgICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgd2lkdGg6IDEwMCAvIHNldHRpbmdzLnNsaWRlc1BlclJvdyArIFwiJVwiLFxuICAgICAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIG5ld1NsaWRlLnB1c2goX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IGtleTogMTAgKiBpICsgaiB9LFxuICAgICAgICAgIHJvd1xuICAgICAgICApKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZXR0aW5ncy52YXJpYWJsZVdpZHRoKSB7XG4gICAgICAgIG5ld0NoaWxkcmVuLnB1c2goX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IGtleTogaSwgc3R5bGU6IHsgd2lkdGg6IGN1cnJlbnRXaWR0aCB9IH0sXG4gICAgICAgICAgbmV3U2xpZGVcbiAgICAgICAgKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdDaGlsZHJlbi5wdXNoKF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBrZXk6IGkgfSxcbiAgICAgICAgICBuZXdTbGlkZVxuICAgICAgICApKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2V0dGluZ3MgPT09IFwidW5zbGlja1wiKSB7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gXCJyZWd1bGFyIHNsaWRlciBcIiArICh0aGlzLnByb3BzLmNsYXNzTmFtZSB8fCBcIlwiKTtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSB9LFxuICAgICAgICBuZXdDaGlsZHJlblxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKG5ld0NoaWxkcmVuLmxlbmd0aCA8PSBzZXR0aW5ncy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgIHNldHRpbmdzLnVuc2xpY2sgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBfaW5uZXJTbGlkZXIuSW5uZXJTbGlkZXIsXG4gICAgICBfZXh0ZW5kcyh7IHJlZjogdGhpcy5pbm5lclNsaWRlclJlZkhhbmRsZXIgfSwgc2V0dGluZ3MpLFxuICAgICAgbmV3Q2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBTbGlkZXI7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTbGlkZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2xpZGVyID0gcmVxdWlyZShcIi4vc2xpZGVyXCIpO1xuXG52YXIgX3NsaWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zbGlkZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfc2xpZGVyMi5kZWZhdWx0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcbmltcG9ydCB7IE1vdXNlRXZlbnQsIE1vdXNlRXZlbnRIYW5kbGVyLCBSZWFjdEVsZW1lbnQgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFNsaWRlciBmcm9tIFwicmVhY3Qtc2xpY2tcIjtcclxuaW1wb3J0IFwiLi4vUHJvZHVjdENhcm91c2VsL19Qcm9kdWN0Q2Fyb3VzZWxTdHlsZXNoZWV0LnNjc3NcIjtcclxuaW1wb3J0IFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3NsaWNrLWNhcm91c2VsL3NsaWNrL3NsaWNrLnNjc3NcIjtcclxuaW1wb3J0IFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3NsaWNrLWNhcm91c2VsL3NsaWNrL3NsaWNrLXRoZW1lLnNjc3NcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9kdWN0Q2Fyb3VzZWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8e30sICB7fT4ge1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDYwMDAsXHJcbiAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6IFwiNjBweFwiLFxyXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwiY2VudGVyXCIsXHJcbiAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICBzd2lwZVRvU2xpZGU6IHRydWUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8U2xpZGVyIGNsYXNzTmFtZT1cInByb2R1Y3QtY2Fyb3VzZWxcIiB7Li4uc2V0dGluZ3N9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9kdWN0LWNhcm91c2VsX19wcm9kdWN0LWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwicHJvZHVjdC1jYXJvdXNlbF9fcHJvZHVjdC1pbWFnZVwiIHNyYz1cImh0dHA6Ly93d3cuZnVubnljYXRzaXRlLmNvbS9waWN0dXJlcy9GYW5jeV9DYXQ2ODcyLmpwZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZHVjdC1jYXJvdXNlbF9fcHJvZHVjdC1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInByb2R1Y3QtY2Fyb3VzZWxfX3Byb2R1Y3QtaW1hZ2VcIiBzcmM9XCJodHRwczovL21lZGlhLmRheXNvZnRoZXllYXIuY29tLzIwMTcxMjIzMTI1OTE4L2hhcHB5LWNhdC1tb250aC0xLmpwZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZHVjdC1jYXJvdXNlbF9fcHJvZHVjdC1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInByb2R1Y3QtY2Fyb3VzZWxfX3Byb2R1Y3QtaW1hZ2VcIiBzcmM9XCJodHRwOi8vaTAua3ltLWNkbi5jb20vcGhvdG9zL2ltYWdlcy9vcmlnaW5hbC8wMDEvMTYzLzU4My8wZDcuanBnXCIgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L1NsaWRlcj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFByb2R1Y3RDYXJvdXNlbDtcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IFByb2R1Y3RDYXJvdXNlbCBmcm9tIFwiLi4vUHJvZHVjdENhcm91c2VsL1Byb2R1Y3RDYXJvdXNlbFwiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi9CdXR0b24vQnV0dG9uXCI7XHJcbmltcG9ydCBcIi4uL1Byb2R1Y3RzL19Qcm9kdWN0c1N0eWxlc2hlZXQuc2Nzc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFByb2R1Y3RzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHt9LCB7fT4ge1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2R1Y3RzXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2R1Y3RzX19jb250YWluZXItZGVzY3JpcHRpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwicHJvZHVjdHNfX3RpdGxlXCI+UHJvZHVjdHM8L2g1PlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInByb2R1Y3RzX19kZXNjcmlwdGlvblwiPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBUZXh0PVwiTGVhcm4gTW9yZVwiIENvbG9yPVwiIzAwQjk5QVwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZHVjdHNfX2ltYWdlc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQcm9kdWN0Q2Fyb3VzZWwgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFByb2R1Y3RzO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5pbXBvcnQgXCIuLi9BYm91dFVzL19BYm91dFVzU3R5bGVzaGVldC5zY3NzXCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uL0J1dHRvbi9CdXR0b25cIjtcclxuaW1wb3J0IFwiLi4vLi4vLi4vU3R5bGVzaGVldHMvVmFyaWFibGVzL0NvbG9yVGhlbWVzLnNjc3NcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBYm91dFVzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHt9LCB7fT4ge1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFib3V0LXVzXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFib3V0LXVzX19jb250YWluZXItZGVzY3JpcHRpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwiYWJvdXQtdXNfX3RpdGxlXCI+V2hvIGFyZSB3ZT88L2g1PlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImFib3V0LXVzX19kZXNjcmlwdGlvblwiPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBUZXh0PVwiTGVhcm4gTW9yZVwiIENvbG9yPVwiI0VBNTk3QVwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJvdXQtdXNfX2ltYWdlc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiaHR0cDovL2kwLmt5bS1jZG4uY29tL2VudHJpZXMvaWNvbnMvb3JpZ2luYWwvMDAwLzAwMC84ODgvVmFuaWxsYUhhcHB5Q2F0LmpwZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCBBYm91dFVzO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5pbXBvcnQgXCIuLi9OYXZpZ2F0aW9uSWNvbnMvX05hdmlnYXRpb25JY29ucy5zY3NzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTmF2aWdhdGlvbkljb25zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHt9LCB7fT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmhhbmRsZU5hdmlnYXRpb25JY29uQ2xpY2sgPSB0aGlzLmhhbmRsZU5hdmlnYXRpb25JY29uQ2xpY2suYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmF2aWdhdGlvbi1pY29uc1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuYXZpZ2F0aW9uLWljb25zX19jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJuYXZpZ2F0aW9uLWljb25zX19pY29uXCIgZGF0YS1zaWJsaW5nLWlkPVwiYWJvdXRVc01vdW50XCIgb25DbGljaz17dGhpcy5oYW5kbGVOYXZpZ2F0aW9uSWNvbkNsaWNrfT5BYm91dCBVczwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJuYXZpZ2F0aW9uLWljb25zX19pY29uXCIgZGF0YS1zaWJsaW5nLWlkPVwicHJvZHVjdHNNb3VudFwiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlTmF2aWdhdGlvbkljb25DbGlja30+UHJvZHVjdHM8L3A+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwibmF2aWdhdGlvbi1pY29uc19faWNvbiBuYXZpZ2F0aW9uLWljb25zX19jb21wYW55LWxvZ29cIiBzcmM9XCJodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2EvYTcvUmVhY3QtaWNvbi5zdmcvMTI4MHB4LVJlYWN0LWljb24uc3ZnLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdmlnYXRpb24taWNvbnNfX2NvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm5hdmlnYXRpb24taWNvbnNfX2ljb25cIiBkYXRhLXNpYmxpbmctaWQ9XCJzZXJ2aWNlc01vdW50XCIgb25DbGljaz17dGhpcy5oYW5kbGVOYXZpZ2F0aW9uSWNvbkNsaWNrfT5TZXJ2aWNlczwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJuYXZpZ2F0aW9uLWljb25zX19pY29uXCIgZGF0YS1zaWJsaW5nLWlkPVwic2VydmljZXNNb3VudFwiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlTmF2aWdhdGlvbkljb25DbGlja30+Q29udGFjdCBVczwvcD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgaGFuZGxlTmF2aWdhdGlvbkljb25DbGljayhlKSB7XHJcbiAgICAgICAgY29uc3QgY2xpY2tlZEVsZTogSFRNTEVsZW1lbnQgPSBlLnRhcmdldDtcclxuICAgICAgICBpZiAoY2xpY2tlZEVsZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpYmxpbmdFbGVtZW50OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNsaWNrZWRFbGUuZGF0YXNldC5zaWJsaW5nSWQpO1xyXG4gICAgICAgICAgICBzaWJsaW5nRWxlbWVudC5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiBcInNtb290aFwiIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCBOYXZpZ2F0aW9uSWNvbnM7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0geyBwcmVmaXg6ICdmYXMnLCBpY29uTmFtZTogJ3JvY2tldCcsIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjEzNVwiLCBcIk01MDUuMSAxOS4xQzUwMy44IDEzIDQ5OSA4LjIgNDkyLjkgNi45IDQ2MC43IDAgNDM1LjUgMCA0MTAuNCAwIDMwNy4yIDAgMjQ1LjMgNTUuMiAxOTkuMSAxMjhIOTQuOWMtMTguMiAwLTM0LjggMTAuMy00Mi45IDI2LjVMMi42IDI1My4zYy04IDE2IDMuNiAzNC43IDIxLjUgMzQuN2g5NS4xYy01LjkgMTIuOC0xMS45IDI1LjUtMTggMzcuNy0zLjEgNi4yLTEuOSAxMy42IDMgMTguNWw2My42IDYzLjZjNC45IDQuOSAxMi4zIDYuMSAxOC41IDMgMTIuMi02LjEgMjQuOS0xMiAzNy43LTE3LjlWNDg4YzAgMTcuOCAxOC44IDI5LjQgMzQuNyAyMS41bDk4LjctNDkuNGMxNi4zLTguMSAyNi41LTI0LjggMjYuNS00Mi45VjMxMi44YzcyLjYtNDYuMyAxMjgtMTA4LjQgMTI4LTIxMS4xLjEtMjUuMi4xLTUwLjQtNi44LTgyLjZ6TTQwMCAxNjBjLTI2LjUgMC00OC0yMS41LTQ4LTQ4czIxLjUtNDggNDgtNDggNDggMjEuNSA0OCA0OC0yMS41IDQ4LTQ4IDQ4elwiXSB9OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCJpbXBvcnQgZm9udGF3ZXNvbWUgZnJvbSAnQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG52YXIgaHVtcHMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4vLyA9PT09PT09PT1cbi8vID0gaHVtcHMgPVxuLy8gPT09PT09PT09XG4vLyBVbmRlcnNjb3JlLXRvLWNhbWVsQ2FzZSBjb252ZXJ0ZXIgKGFuZCB2aWNlIHZlcnNhKVxuLy8gZm9yIHN0cmluZ3MgYW5kIG9iamVjdCBrZXlzXG5cbi8vIGh1bXBzIGlzIGNvcHlyaWdodCDCqSAyMDEyKyBEb20gQ2hyaXN0aWVcbi8vIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgdmFyIF9wcm9jZXNzS2V5cyA9IGZ1bmN0aW9uKGNvbnZlcnQsIG9iaiwgb3B0aW9ucykge1xuICAgIGlmKCFfaXNPYmplY3Qob2JqKSB8fCBfaXNEYXRlKG9iaikgfHwgX2lzUmVnRXhwKG9iaikgfHwgX2lzQm9vbGVhbihvYmopIHx8IF9pc0Z1bmN0aW9uKG9iaikpIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgdmFyIG91dHB1dCxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGwgPSAwO1xuXG4gICAgaWYoX2lzQXJyYXkob2JqKSkge1xuICAgICAgb3V0cHV0ID0gW107XG4gICAgICBmb3IobD1vYmoubGVuZ3RoOyBpPGw7IGkrKykge1xuICAgICAgICBvdXRwdXQucHVzaChfcHJvY2Vzc0tleXMoY29udmVydCwgb2JqW2ldLCBvcHRpb25zKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgb3V0cHV0ID0ge307XG4gICAgICBmb3IodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgIG91dHB1dFtjb252ZXJ0KGtleSwgb3B0aW9ucyldID0gX3Byb2Nlc3NLZXlzKGNvbnZlcnQsIG9ialtrZXldLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIC8vIFN0cmluZyBjb252ZXJzaW9uIG1ldGhvZHNcblxuICB2YXIgc2VwYXJhdGVXb3JkcyA9IGZ1bmN0aW9uKHN0cmluZywgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciBzZXBhcmF0b3IgPSBvcHRpb25zLnNlcGFyYXRvciB8fCAnXyc7XG4gICAgdmFyIHNwbGl0ID0gb3B0aW9ucy5zcGxpdCB8fCAvKD89W0EtWl0pLztcblxuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc3BsaXQpLmpvaW4oc2VwYXJhdG9yKTtcbiAgfTtcblxuICB2YXIgY2FtZWxpemUgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICBpZiAoX2lzTnVtZXJpY2FsKHN0cmluZykpIHtcbiAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9bXFwtX1xcc10rKC4pPy9nLCBmdW5jdGlvbihtYXRjaCwgY2hyKSB7XG4gICAgICByZXR1cm4gY2hyID8gY2hyLnRvVXBwZXJDYXNlKCkgOiAnJztcbiAgICB9KTtcbiAgICAvLyBFbnN1cmUgMXN0IGNoYXIgaXMgYWx3YXlzIGxvd2VyY2FzZVxuICAgIHJldHVybiBzdHJpbmcuc3Vic3RyKDAsIDEpLnRvTG93ZXJDYXNlKCkgKyBzdHJpbmcuc3Vic3RyKDEpO1xuICB9O1xuXG4gIHZhciBwYXNjYWxpemUgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgY2FtZWxpemVkID0gY2FtZWxpemUoc3RyaW5nKTtcbiAgICAvLyBFbnN1cmUgMXN0IGNoYXIgaXMgYWx3YXlzIHVwcGVyY2FzZVxuICAgIHJldHVybiBjYW1lbGl6ZWQuc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBjYW1lbGl6ZWQuc3Vic3RyKDEpO1xuICB9O1xuXG4gIHZhciBkZWNhbWVsaXplID0gZnVuY3Rpb24oc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHNlcGFyYXRlV29yZHMoc3RyaW5nLCBvcHRpb25zKS50b0xvd2VyQ2FzZSgpO1xuICB9O1xuXG4gIC8vIFV0aWxpdGllc1xuICAvLyBUYWtlbiBmcm9tIFVuZGVyc2NvcmUuanNcblxuICB2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4gIHZhciBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Yob2JqKSA9PT0gJ2Z1bmN0aW9uJztcbiAgfTtcbiAgdmFyIF9pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IE9iamVjdChvYmopO1xuICB9O1xuICB2YXIgX2lzQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG4gIHZhciBfaXNEYXRlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBEYXRlXSc7XG4gIH07XG4gIHZhciBfaXNSZWdFeHAgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0IFJlZ0V4cF0nO1xuICB9O1xuICB2YXIgX2lzQm9vbGVhbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1hbnQgd2F5IHRvIGRldGVybWluZSBpZiBvYmogY29lcmNlcyB0byBhIG51bWJlclxuICB2YXIgX2lzTnVtZXJpY2FsID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgb2JqID0gb2JqIC0gMDtcbiAgICByZXR1cm4gb2JqID09PSBvYmo7XG4gIH07XG5cbiAgLy8gU2V0cyB1cCBmdW5jdGlvbiB3aGljaCBoYW5kbGVzIHByb2Nlc3Npbmcga2V5c1xuICAvLyBhbGxvd2luZyB0aGUgY29udmVydCBmdW5jdGlvbiB0byBiZSBtb2RpZmllZCBieSBhIGNhbGxiYWNrXG4gIHZhciBfcHJvY2Vzc29yID0gZnVuY3Rpb24oY29udmVydCwgb3B0aW9ucykge1xuICAgIHZhciBjYWxsYmFjayA9IG9wdGlvbnMgJiYgJ3Byb2Nlc3MnIGluIG9wdGlvbnMgPyBvcHRpb25zLnByb2Nlc3MgOiBvcHRpb25zO1xuXG4gICAgaWYodHlwZW9mKGNhbGxiYWNrKSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNvbnZlcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKHN0cmluZywgY29udmVydCwgb3B0aW9ucyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBodW1wcyA9IHtcbiAgICBjYW1lbGl6ZTogY2FtZWxpemUsXG4gICAgZGVjYW1lbGl6ZTogZGVjYW1lbGl6ZSxcbiAgICBwYXNjYWxpemU6IHBhc2NhbGl6ZSxcbiAgICBkZXBhc2NhbGl6ZTogZGVjYW1lbGl6ZSxcbiAgICBjYW1lbGl6ZUtleXM6IGZ1bmN0aW9uKG9iamVjdCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIF9wcm9jZXNzS2V5cyhfcHJvY2Vzc29yKGNhbWVsaXplLCBvcHRpb25zKSwgb2JqZWN0KTtcbiAgICB9LFxuICAgIGRlY2FtZWxpemVLZXlzOiBmdW5jdGlvbihvYmplY3QsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfcHJvY2Vzc0tleXMoX3Byb2Nlc3NvcihkZWNhbWVsaXplLCBvcHRpb25zKSwgb2JqZWN0LCBvcHRpb25zKTtcbiAgICB9LFxuICAgIHBhc2NhbGl6ZUtleXM6IGZ1bmN0aW9uKG9iamVjdCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIF9wcm9jZXNzS2V5cyhfcHJvY2Vzc29yKHBhc2NhbGl6ZSwgb3B0aW9ucyksIG9iamVjdCk7XG4gICAgfSxcbiAgICBkZXBhc2NhbGl6ZUtleXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlY2FtZWxpemVLZXlzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xuXG4gIGlmICh0eXBlb2YgdW5kZWZpbmVkID09PSAnZnVuY3Rpb24nICYmIHVuZGVmaW5lZC5hbWQpIHtcbiAgICB1bmRlZmluZWQoaHVtcHMpO1xuICB9IGVsc2UgaWYgKCdvYmplY3QnICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gaHVtcHM7XG4gIH0gZWxzZSB7XG4gICAgZ2xvYmFsLmh1bXBzID0gaHVtcHM7XG4gIH1cblxufSkoY29tbW9uanNHbG9iYWwpO1xufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG5cblxuXG5cbnZhciBhc3luY0dlbmVyYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQXdhaXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEFzeW5jR2VuZXJhdG9yKGdlbikge1xuICAgIHZhciBmcm9udCwgYmFjaztcblxuICAgIGZ1bmN0aW9uIHNlbmQoa2V5LCBhcmcpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIGFyZzogYXJnLFxuICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgcmVqZWN0OiByZWplY3QsXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChiYWNrKSB7XG4gICAgICAgICAgYmFjayA9IGJhY2submV4dCA9IHJlcXVlc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnJvbnQgPSBiYWNrID0gcmVxdWVzdDtcbiAgICAgICAgICByZXN1bWUoa2V5LCBhcmcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN1bWUoa2V5LCBhcmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBnZW5ba2V5XShhcmcpO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXdhaXRWYWx1ZSkge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZS52YWx1ZSkudGhlbihmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXN1bWUoXCJuZXh0XCIsIGFyZyk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgcmVzdW1lKFwidGhyb3dcIiwgYXJnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXR0bGUocmVzdWx0LmRvbmUgPyBcInJldHVyblwiIDogXCJub3JtYWxcIiwgcmVzdWx0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHNldHRsZShcInRocm93XCIsIGVycik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dGxlKHR5cGUsIHZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInJldHVyblwiOlxuICAgICAgICAgIGZyb250LnJlc29sdmUoe1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJ0aHJvd1wiOlxuICAgICAgICAgIGZyb250LnJlamVjdCh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBmcm9udC5yZXNvbHZlKHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGZyb250ID0gZnJvbnQubmV4dDtcblxuICAgICAgaWYgKGZyb250KSB7XG4gICAgICAgIHJlc3VtZShmcm9udC5rZXksIGZyb250LmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYWNrID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbnZva2UgPSBzZW5kO1xuXG4gICAgaWYgKHR5cGVvZiBnZW4ucmV0dXJuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMucmV0dXJuID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHtcbiAgICBBc3luY0dlbmVyYXRvci5wcm90b3R5cGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgfVxuXG4gIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoXCJuZXh0XCIsIGFyZyk7XG4gIH07XG5cbiAgQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLnRocm93ID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoXCJ0aHJvd1wiLCBhcmcpO1xuICB9O1xuXG4gIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcInJldHVyblwiLCBhcmcpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgd3JhcDogZnVuY3Rpb24gKGZuKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFzeW5jR2VuZXJhdG9yKGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGF3YWl0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBuZXcgQXdhaXRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICB9O1xufSgpO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzKSB7XG4gIHZhciB0YXJnZXQgPSB7fTtcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7XG4gICAgdGFyZ2V0W2ldID0gb2JqW2ldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgdG9Db25zdW1hYmxlQXJyYXkgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gICAgcmV0dXJuIGFycjI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oYXJyKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2FwaXRhbGl6ZSh2YWwpIHtcbiAgcmV0dXJuIHZhbC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHZhbC5zbGljZSgxKTtcbn1cblxuZnVuY3Rpb24gc3R5bGVUb09iamVjdChzdHlsZSkge1xuICByZXR1cm4gc3R5bGUuc3BsaXQoJzsnKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcy50cmltKCk7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGFpcikge1xuICAgIHZhciBpID0gcGFpci5pbmRleE9mKCc6Jyk7XG4gICAgdmFyIHByb3AgPSBodW1wcy5jYW1lbGl6ZShwYWlyLnNsaWNlKDAsIGkpKTtcbiAgICB2YXIgdmFsdWUgPSBwYWlyLnNsaWNlKGkgKyAxKS50cmltKCk7XG5cbiAgICBwcm9wLnN0YXJ0c1dpdGgoJ3dlYmtpdCcpID8gYWNjW2NhcGl0YWxpemUocHJvcCldID0gdmFsdWUgOiBhY2NbcHJvcF0gPSB2YWx1ZTtcblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gY29udmVydChjcmVhdGVFbGVtZW50LCBlbGVtZW50KSB7XG4gIHZhciBleHRyYVByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICB2YXIgY2hpbGRyZW4gPSAoZWxlbWVudC5jaGlsZHJlbiB8fCBbXSkubWFwKGNvbnZlcnQuYmluZChudWxsLCBjcmVhdGVFbGVtZW50KSk7XG5cbiAgdmFyIG1peGlucyA9IE9iamVjdC5rZXlzKGVsZW1lbnQuYXR0cmlidXRlcyB8fCB7fSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIHZhciB2YWwgPSBlbGVtZW50LmF0dHJpYnV0ZXNba2V5XTtcblxuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdjbGFzcyc6XG4gICAgICAgIGFjYy5hdHRyc1snY2xhc3NOYW1lJ10gPSB2YWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmF0dHJpYnV0ZXNbJ2NsYXNzJ107XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3R5bGUnOlxuICAgICAgICBhY2MuYXR0cnNbJ3N0eWxlJ10gPSBzdHlsZVRvT2JqZWN0KHZhbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGtleS5pbmRleE9mKCdhcmlhLScpID09PSAwIHx8IGtleS5pbmRleE9mKCdkYXRhLScpID09PSAwKSB7XG4gICAgICAgICAgYWNjLmF0dHJzW2tleS50b0xvd2VyQ2FzZSgpXSA9IHZhbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY2MuYXR0cnNbaHVtcHMuY2FtZWxpemUoa2V5KV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7IGF0dHJzOiB7fSB9KTtcblxuICB2YXIgX2V4dHJhUHJvcHMkc3R5bGUgPSBleHRyYVByb3BzLnN0eWxlLFxuICAgICAgZXhpc3RpbmdTdHlsZSA9IF9leHRyYVByb3BzJHN0eWxlID09PSB1bmRlZmluZWQgPyB7fSA6IF9leHRyYVByb3BzJHN0eWxlLFxuICAgICAgcmVtYWluaW5nID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoZXh0cmFQcm9wcywgWydzdHlsZSddKTtcblxuXG4gIG1peGlucy5hdHRyc1snc3R5bGUnXSA9IF9leHRlbmRzKHt9LCBtaXhpbnMuYXR0cnNbJ3N0eWxlJ10sIGV4aXN0aW5nU3R5bGUpO1xuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KHVuZGVmaW5lZCwgW2VsZW1lbnQudGFnLCBfZXh0ZW5kcyh7fSwgbWl4aW5zLmF0dHJzLCByZW1haW5pbmcpXS5jb25jYXQodG9Db25zdW1hYmxlQXJyYXkoY2hpbGRyZW4pKSk7XG59XG5cbnZhciBQUk9EVUNUSU9OID0gZmFsc2U7XG5cbnRyeSB7XG4gIFBST0RVQ1RJT04gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xufSBjYXRjaCAoZSkge31cblxudmFyIGxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFQUk9EVUNUSU9OICYmIGNvbnNvbGUgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICAoX2NvbnNvbGUgPSBjb25zb2xlKS5lcnJvci5hcHBseShfY29uc29sZSwgYXJndW1lbnRzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gb2JqZWN0V2l0aEtleShrZXksIHZhbHVlKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPiAwIHx8ICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZSA/IGRlZmluZVByb3BlcnR5KHt9LCBrZXksIHZhbHVlKSA6IHt9O1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3QocHJvcHMpIHtcbiAgdmFyIF9jbGFzc2VzO1xuXG4gIHZhciBjbGFzc2VzID0gKF9jbGFzc2VzID0ge1xuICAgICdmYS1zcGluJzogcHJvcHMuc3BpbixcbiAgICAnZmEtcHVsc2UnOiBwcm9wcy5wdWxzZSxcbiAgICAnZmEtZncnOiBwcm9wcy5maXhlZFdpZHRoLFxuICAgICdmYS1ib3JkZXInOiBwcm9wcy5ib3JkZXIsXG4gICAgJ2ZhLWxpJzogcHJvcHMubGlzdEl0ZW0sXG4gICAgJ2ZhLWZsaXAtaG9yaXpvbnRhbCc6IHByb3BzLmZsaXAgPT09ICdob3Jpem9udGFsJyB8fCBwcm9wcy5mbGlwID09PSAnYm90aCcsXG4gICAgJ2ZhLWZsaXAtdmVydGljYWwnOiBwcm9wcy5mbGlwID09PSAndmVydGljYWwnIHx8IHByb3BzLmZsaXAgPT09ICdib3RoJ1xuICB9LCBkZWZpbmVQcm9wZXJ0eShfY2xhc3NlcywgJ2ZhLScgKyBwcm9wcy5zaXplLCBwcm9wcy5zaXplICE9PSBudWxsKSwgZGVmaW5lUHJvcGVydHkoX2NsYXNzZXMsICdmYS1yb3RhdGUtJyArIHByb3BzLnJvdGF0aW9uLCBwcm9wcy5yb3RhdGlvbiAhPT0gbnVsbCksIGRlZmluZVByb3BlcnR5KF9jbGFzc2VzLCAnZmEtcHVsbC0nICsgcHJvcHMucHVsbCwgcHJvcHMucHVsbCAhPT0gbnVsbCksIF9jbGFzc2VzKTtcblxuICByZXR1cm4gT2JqZWN0LmtleXMoY2xhc3NlcykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gY2xhc3Nlc1trZXldID8ga2V5IDogbnVsbDtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4ga2V5O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplSWNvbkFyZ3MoaWNvbikge1xuICBpZiAoaWNvbiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgaWNvbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoaWNvbikpID09PSAnb2JqZWN0JyAmJiBpY29uLnByZWZpeCAmJiBpY29uLmljb25OYW1lKSB7XG4gICAgcmV0dXJuIGljb247XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShpY29uKSAmJiBpY29uLmxlbmd0aCA9PT0gMikge1xuICAgIHJldHVybiB7IHByZWZpeDogaWNvblswXSwgaWNvbk5hbWU6IGljb25bMV0gfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaWNvbiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4geyBwcmVmaXg6ICdmYXMnLCBpY29uTmFtZTogaWNvbiB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIEZvbnRBd2Vzb21lSWNvbiQxKHByb3BzKSB7XG4gIHZhciBpY29uQXJncyA9IHByb3BzLmljb24sXG4gICAgICBtYXNrQXJncyA9IHByb3BzLm1hc2ssXG4gICAgICBzeW1ib2wgPSBwcm9wcy5zeW1ib2wsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWU7XG5cblxuICB2YXIgaWNvbiA9IG5vcm1hbGl6ZUljb25BcmdzKGljb25BcmdzKTtcbiAgdmFyIGNsYXNzZXMgPSBvYmplY3RXaXRoS2V5KCdjbGFzc2VzJywgW10uY29uY2F0KHRvQ29uc3VtYWJsZUFycmF5KGNsYXNzTGlzdChwcm9wcykpLCB0b0NvbnN1bWFibGVBcnJheShjbGFzc05hbWUuc3BsaXQoJyAnKSkpKTtcbiAgdmFyIHRyYW5zZm9ybSA9IG9iamVjdFdpdGhLZXkoJ3RyYW5zZm9ybScsIHR5cGVvZiBwcm9wcy50cmFuc2Zvcm0gPT09ICdzdHJpbmcnID8gZm9udGF3ZXNvbWUucGFyc2UudHJhbnNmb3JtKHByb3BzLnRyYW5zZm9ybSkgOiBwcm9wcy50cmFuc2Zvcm0pO1xuICB2YXIgbWFzayA9IG9iamVjdFdpdGhLZXkoJ21hc2snLCBub3JtYWxpemVJY29uQXJncyhtYXNrQXJncykpO1xuXG4gIHZhciByZW5kZXJlZEljb24gPSBmb250YXdlc29tZS5pY29uKGljb24sIF9leHRlbmRzKHt9LCBjbGFzc2VzLCB0cmFuc2Zvcm0sIG1hc2ssIHtcbiAgICBzeW1ib2w6IHN5bWJvbFxuICB9KSk7XG5cbiAgaWYgKCFyZW5kZXJlZEljb24pIHtcbiAgICBsb2coJ0NvdWxkIG5vdCBmaW5kIGljb24nLCBpY29uKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBhYnN0cmFjdCA9IHJlbmRlcmVkSWNvbi5hYnN0cmFjdDtcblxuICB2YXIgY29udmVydEN1cnJ5ID0gY29udmVydC5iaW5kKG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQpO1xuICB2YXIgZXh0cmFQcm9wcyA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIUZvbnRBd2Vzb21lSWNvbiQxLmRlZmF1bHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSBleHRyYVByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICB9KTtcblxuICByZXR1cm4gY29udmVydEN1cnJ5KGFic3RyYWN0WzBdLCBleHRyYVByb3BzKTtcbn1cblxuRm9udEF3ZXNvbWVJY29uJDEuZGlzcGxheU5hbWUgPSAnRm9udEF3ZXNvbWVJY29uJztcblxuRm9udEF3ZXNvbWVJY29uJDEucHJvcFR5cGVzID0ge1xuICBib3JkZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICBtYXNrOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYXJyYXksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICBmaXhlZFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICBmbGlwOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ2JvdGgnXSksXG5cbiAgaWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmFycmF5LCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgbGlzdEl0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIHB1bGw6IFByb3BUeXBlcy5vbmVPZihbJ3JpZ2h0JywgJ2xlZnQnXSksXG5cbiAgcHVsc2U6IFByb3BUeXBlcy5ib29sLFxuXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgcm90YXRpb246IFByb3BUeXBlcy5vbmVPZihbOTAsIDE4MCwgMjcwXSksXG5cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnbGcnLCAneHMnLCAnc20nLCAnMXgnLCAnMngnLCAnM3gnLCAnNHgnLCAnNXgnLCAnNngnLCAnN3gnLCAnOHgnLCAnOXgnLCAnMTB4J10pLFxuXG4gIHNwaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIHN5bWJvbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICB0cmFuc2Zvcm06IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxufTtcblxuRm9udEF3ZXNvbWVJY29uJDEuZGVmYXVsdFByb3BzID0ge1xuICBib3JkZXI6IGZhbHNlLFxuICBjbGFzc05hbWU6ICcnLFxuICBtYXNrOiBudWxsLFxuICBmaXhlZFdpZHRoOiBmYWxzZSxcbiAgZmxpcDogbnVsbCxcbiAgaWNvbjogbnVsbCxcbiAgbGlzdEl0ZW06IGZhbHNlLFxuICBwdWxsOiBudWxsLFxuICBwdWxzZTogZmFsc2UsXG4gIG5hbWU6ICcnLFxuICByb3RhdGlvbjogbnVsbCxcbiAgc2l6ZTogbnVsbCxcbiAgc3BpbjogZmFsc2UsXG4gIHN5bWJvbDogZmFsc2UsXG4gIHRyYW5zZm9ybTogbnVsbFxufTtcblxuZm9udGF3ZXNvbWUubm9BdXRvKCk7XG5cbmV4cG9ydCBkZWZhdWx0IEZvbnRBd2Vzb21lSWNvbiQxO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IFwiLi4vQ29tcGFueU1vdHRvL19Db21wYW55TW90dG9TdHlsZXNoZWV0LnNjc3NcIjtcclxuaW1wb3J0IEZvbnRBd2Vzb21lSWNvbiBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XHJcbmltcG9ydCAqIGFzIGZhUm9ja2V0IGZyb20gXCJAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS1zb2xpZC9mYVJvY2tldFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbXBhbnlNb3R0byBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7fSwge30+IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXItY29tcGFueS1tb3R0b1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wYW55LW5hbWVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8cD5TZWxzdGljZTwvcD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wYW55LW1vdHRvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+Q29tZSBmbHkgd2l0aCB1czwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lci1pY29uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFSb2NrZXR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCBDb21wYW55TW90dG87XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcbmltcG9ydCBcIi4uL01vb24vTW9vblN0eWxlc2hlZXQuY3NzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTW9vbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7fSwge30+IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXItbW9vblwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb29uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjcmF0ZXIgc21hbGxcIj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNyYXRlciBtZWRpdW1cIj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNyYXRlciBsYXJnZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgTW9vbjtcclxuIiwiIWZ1bmN0aW9uKGUsIHQpIHtcbiAgICBcIm9iamVjdFwiID09IHR5cGVvZiBleHBvcnRzICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSA/IG1vZHVsZS5leHBvcnRzID0gdChyZXF1aXJlKFwicmVhY3RcIikpIDogXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbIFwicmVhY3RcIiBdLCB0KSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgPyBleHBvcnRzLlBhcnRpY2xlcyA9IHQocmVxdWlyZShcInJlYWN0XCIpKSA6IGUuUGFydGljbGVzID0gdChlLlJlYWN0KTtcbn0oXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZnVuY3Rpb24gdChpKSB7XG4gICAgICAgICAgICBpZiAoYVtpXSkgcmV0dXJuIGFbaV0uZXhwb3J0cztcbiAgICAgICAgICAgIHZhciByID0gYVtpXSA9IHtcbiAgICAgICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgICAgIGw6ICExLFxuICAgICAgICAgICAgICAgIGV4cG9ydHM6IHt9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGVbaV0uY2FsbChyLmV4cG9ydHMsIHIsIHIuZXhwb3J0cywgdCksIHIubCA9ICEwLCByLmV4cG9ydHM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGEgPSB7fTtcbiAgICAgICAgcmV0dXJuIHQubSA9IGUsIHQuYyA9IGEsIHQuZCA9IGZ1bmN0aW9uKGUsIGEsIGkpIHtcbiAgICAgICAgICAgIHQubyhlLCBhKSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgYSwge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogITEsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgICAgICAgICAgZ2V0OiBpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgdC5uID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIGEgPSBlICYmIGUuX19lc01vZHVsZSA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmRlZmF1bHQ7XG4gICAgICAgICAgICB9IDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHQuZChhLCBcImFcIiwgYSksIGE7XG4gICAgICAgIH0sIHQubyA9IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgdCk7XG4gICAgICAgIH0sIHQucCA9IFwiXCIsIHQodC5zID0gMik7XG4gICAgfShbIGZ1bmN0aW9uKGUsIHQsIGEpIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIGZ1bmN0aW9uIGkoZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgYSBpbiBlKSB0Lmhhc093blByb3BlcnR5KGEpIHx8ICh0W2FdID0gZVthXSk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgICAgICAgICB2YWx1ZTogITBcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByID0gYSg3KTtcbiAgICAgICAgdC5JbnRlcmFjdCA9IHIuZGVmYXVsdDtcbiAgICAgICAgdmFyIG4gPSBhKDgpO1xuICAgICAgICB0Lk1vZGVzID0gbi5kZWZhdWx0O1xuICAgICAgICB2YXIgcyA9IGEoOSk7XG4gICAgICAgIHQuUGFydGljbGUgPSBzLmRlZmF1bHQ7XG4gICAgICAgIHZhciBvID0gYSgxMCk7XG4gICAgICAgIHQuUGFydGljbGVNYW5hZ2VyID0gby5kZWZhdWx0O1xuICAgICAgICB2YXIgYyA9IGEoMTEpO1xuICAgICAgICB0LlBhcnRpY2xlc0xpYnJhcnkgPSBjLmRlZmF1bHQ7XG4gICAgICAgIHZhciBsID0gYSgxMik7XG4gICAgICAgIHQuVmVuZG9ycyA9IGwuZGVmYXVsdCwgaShhKDEzKSksIGkoYSgxNCkpO1xuICAgIH0sIGZ1bmN0aW9uKHQsIGEpIHtcbiAgICAgICAgdC5leHBvcnRzID0gZTtcbiAgICB9LCBmdW5jdGlvbihlLCB0LCBhKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGkgPSBhKDMpO1xuICAgICAgICB0LlBhcnRpY2xlcyA9IGkuZGVmYXVsdCwgdC5kZWZhdWx0ID0gaS5kZWZhdWx0O1xuICAgIH0sIGZ1bmN0aW9uKGUsIHQsIGEpIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIGZ1bmN0aW9uIGkoZSwgdCkge1xuICAgICAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIHQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHIoZSwgdCkge1xuICAgICAgICAgICAgaWYgKCFlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gIXQgfHwgXCJvYmplY3RcIiAhPSB0eXBlb2YgdCAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQgPyBlIDogdDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBuKGUsIHQpIHtcbiAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQgJiYgbnVsbCAhPT0gdCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2YgdCk7XG4gICAgICAgICAgICBlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodCAmJiB0LnByb3RvdHlwZSwge1xuICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6ICEwLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIHQgJiYgKE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihlLCB0KSA6IGUuX19wcm90b19fID0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUoZSwgdCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwgdC5sZW5ndGg7IGErKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRbYV07XG4gICAgICAgICAgICAgICAgICAgIGkuZW51bWVyYWJsZSA9IGkuZW51bWVyYWJsZSB8fCAhMSwgaS5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIGkgJiYgKGkud3JpdGFibGUgPSAhMCksIFxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgaS5rZXksIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgJiYgZSh0LnByb3RvdHlwZSwgYSksIGkgJiYgZSh0LCBpKSwgdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oKSwgbyA9IGZ1bmN0aW9uIGUodCwgYSwgaSkge1xuICAgICAgICAgICAgbnVsbCA9PT0gdCAmJiAodCA9IEZ1bmN0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB2YXIgciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgYSk7XG4gICAgICAgICAgICBpZiAodm9pZCAwID09PSByKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IG4gPyB2b2lkIDAgOiBlKG4sIGEsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFwidmFsdWVcIiBpbiByKSByZXR1cm4gci52YWx1ZTtcbiAgICAgICAgICAgIHZhciBzID0gci5nZXQ7XG4gICAgICAgICAgICBpZiAodm9pZCAwICE9PSBzKSByZXR1cm4gcy5jYWxsKGkpO1xuICAgICAgICB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGMgPSBhKDEpLCBsID0gYSgxKSwgdSA9IGEoNCksIHAgPSBhKDApLCBoID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gdChlKSB7XG4gICAgICAgICAgICAgICAgaSh0aGlzLCB0KTtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHIodGhpcywgKHQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbCh0aGlzLCBlKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhczogdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgICBsaWJyYXJ5OiB2b2lkIDBcbiAgICAgICAgICAgICAgICB9LCBhLmxvYWRDYW52YXMgPSBhLmxvYWRDYW52YXMuYmluZChhKSwgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuKHQsIGUpLCBzKHQsIFsge1xuICAgICAgICAgICAgICAgIGtleTogXCJyZWZyZXNoXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmNhbnZhcyAmJiAodGhpcy5kZXN0cm95KCksIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlicmFyeTogbmV3IHAuUGFydGljbGVzTGlicmFyeShlLnBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmxvYWRDYW52YXModC5zdGF0ZS5jYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxpYnJhcnkuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwibG9hZENhbnZhc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgZSAmJiB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhczogZVxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc3RhdGUubGlicmFyeS5sb2FkQ2FudmFzKHQuc3RhdGUuY2FudmFzKSwgdC5zdGF0ZS5saWJyYXJ5LnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMgIT09IGUgJiYgdGhpcy5yZWZyZXNoKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiZm9yY2VVcGRhdGVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCh0aGlzLnByb3BzKSwgbyh0LnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSwgXCJmb3JjZVVwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiY29tcG9uZW50V2lsbE1vdW50XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpYnJhcnk6IG5ldyBwLlBhcnRpY2xlc0xpYnJhcnkodGhpcy5wcm9wcy5wYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpLCB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpYnJhcnk6IHZvaWQgMFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnByb3BzLCB0ID0gZS53aWR0aCwgYSA9IGUuaGVpZ2h0LCBpID0gZS5jbGFzc05hbWUsIHIgPSBlLmNhbnZhc0NsYXNzTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGlcbiAgICAgICAgICAgICAgICAgICAgfSwgYy5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogdGhpcy5sb2FkQ2FudmFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiByLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHAuZGVlcEV4dGVuZCh1KHRoaXMucHJvcHMuc3R5bGUpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBhXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBdKSwgdDtcbiAgICAgICAgfShsLkNvbXBvbmVudCk7XG4gICAgICAgIGguZGVmYXVsdFByb3BzID0ge1xuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgICAgIHBhcmFtczoge30sXG4gICAgICAgICAgICBzdHlsZToge31cbiAgICAgICAgfSwgdC5kZWZhdWx0ID0gaDtcbiAgICB9LCBmdW5jdGlvbihlLCB0LCBhKSB7XG4gICAgICAgIChmdW5jdGlvbihlLCBhKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBpKGUsIHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5zZXQodFswXSwgdFsxXSksIGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiByKGUsIHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5hZGQodCksIGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBuKGUsIHQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0gLTEsIGkgPSBlID8gZS5sZW5ndGggOiAwOyArK2EgPCBpICYmICExICE9PSB0KGVbYV0sIGEsIGUpOyApIDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHMoZSwgdCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSAtMSwgaSA9IHQubGVuZ3RoLCByID0gZS5sZW5ndGg7ICsrYSA8IGk7ICkgZVtyICsgYV0gPSB0W2FdO1xuICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbyhlLCB0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSAtMSwgbiA9IGUgPyBlLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICAgICAgZm9yIChpICYmIG4gJiYgKGEgPSBlWysrcl0pOyArK3IgPCBuOyApIGEgPSB0KGEsIGVbcl0sIHIsIGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYyhlLCB0KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IC0xLCBpID0gQXJyYXkoZSk7ICsrYSA8IGU7ICkgaVthXSA9IHQoYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBsKGUsIHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBlID8gdm9pZCAwIDogZVt0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHUoZSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gITE7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gZSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUudG9TdHJpbmcpIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHQgPSAhIShlICsgXCJcIik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHAoZSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gLTEsIGEgPSBBcnJheShlLnNpemUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICBhWysrdF0gPSBbIGksIGUgXTtcbiAgICAgICAgICAgICAgICB9KSwgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGgoZSwgdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlKHQoYSkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB2KGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IC0xLCBhID0gQXJyYXkoZS5zaXplKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYVsrK3RdID0gZTtcbiAgICAgICAgICAgICAgICB9KSwgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG0oZSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gLTEsIGEgPSBlID8gZS5sZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgIGZvciAodGhpcy5jbGVhcigpOyArK3QgPCBhOyApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlW3RdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldChpWzBdLCBpWzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBkKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19kYXRhX18gPSBMdCA/IEx0KG51bGwpIDoge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB5KGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5oYXMoZSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19bZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBmKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX19kYXRhX187XG4gICAgICAgICAgICAgICAgaWYgKEx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gdFtlXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgPT09IHplID8gdm9pZCAwIDogYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ0LmNhbGwodCwgZSkgPyB0W2VdIDogdm9pZCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgICAgICAgICAgIHJldHVybiBMdCA/IHZvaWQgMCAhPT0gdFtlXSA6IGZ0LmNhbGwodCwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBfKGUsIHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fX2RhdGFfX1tlXSA9IEx0ICYmIHZvaWQgMCA9PT0gdCA/IHplIDogdCwgdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGcoZSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gLTEsIGEgPSBlID8gZS5sZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgIGZvciAodGhpcy5jbGVhcigpOyArK3QgPCBhOyApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlW3RdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldChpWzBdLCBpWzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB4KCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHcoZSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fX2RhdGFfXywgYSA9IHEodCwgZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEoYSA8IDApICYmIChhID09IHQubGVuZ3RoIC0gMSA/IHQucG9wKCkgOiBNdC5jYWxsKHQsIGEsIDEpLCAhMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBrKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX19kYXRhX18sIGEgPSBxKHQsIGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhIDwgMCA/IHZvaWQgMCA6IHRbYV1bMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBqKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcSh0aGlzLl9fZGF0YV9fLCBlKSA+IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gUChlLCB0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLl9fZGF0YV9fLCBpID0gcShhLCBlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA8IDAgPyBhLnB1c2goWyBlLCB0IF0pIDogYVtpXVsxXSA9IHQsIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBNKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IC0xLCBhID0gZSA/IGUubGVuZ3RoIDogMDtcbiAgICAgICAgICAgICAgICBmb3IgKHRoaXMuY2xlYXIoKTsgKyt0IDwgYTsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gZVt0XTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoaVswXSwgaVsxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gTygpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAgICAgICAgICAgICBoYXNoOiBuZXcgbSgpLFxuICAgICAgICAgICAgICAgICAgICBtYXA6IG5ldyAoU3QgfHwgZykoKSxcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nOiBuZXcgbSgpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIEEoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZSh0aGlzLCBlKS5kZWxldGUoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB6KGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2UodGhpcywgZSkuZ2V0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gRihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlKHRoaXMsIGUpLmhhcyhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIFMoZSwgdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZSh0aGlzLCBlKS5zZXQoZSwgdCksIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBFKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IGcoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBJKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gQyhlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZGVsZXRlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gTChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gVChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gUihlLCB0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgICAgICAgICAgIGlmIChhIGluc3RhbmNlb2YgZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGEuX19kYXRhX187XG4gICAgICAgICAgICAgICAgICAgIGlmICghU3QgfHwgaS5sZW5ndGggPCBBZSAtIDEpIHJldHVybiBpLnB1c2goWyBlLCB0IF0pLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYS5zZXQoZSwgdCksIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBEKGUsIHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IE50KGUpIHx8IGJlKGUpID8gYyhlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLCBpID0gYS5sZW5ndGgsIHIgPSAhIWk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbiBpbiBlKSAhdCAmJiAhZnQuY2FsbChlLCBuKSB8fCByICYmIChcImxlbmd0aFwiID09IG4gfHwgcGUobiwgaSkpIHx8IGEucHVzaChuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIFcoZSwgdCwgYSkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gZVt0XTtcbiAgICAgICAgICAgICAgICBmdC5jYWxsKGUsIHQpICYmIGZlKGksIGEpICYmICh2b2lkIDAgIT09IGEgfHwgdCBpbiBlKSB8fCAoZVt0XSA9IGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcShlLCB0KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IGUubGVuZ3RoOyBhLS07ICkgaWYgKGZlKGVbYV1bMF0sIHQpKSByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBVKGUsIHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZSAmJiBpZSh0LCBQZSh0KSwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiAkKGUsIHQsIGEsIGksIHIsIHMsIG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgYztcbiAgICAgICAgICAgICAgICBpZiAoaSAmJiAoYyA9IHMgPyBpKGUsIHIsIHMsIG8pIDogaShlKSksIHZvaWQgMCAhPT0gYykgcmV0dXJuIGM7XG4gICAgICAgICAgICAgICAgaWYgKCFrZShlKSkgcmV0dXJuIGU7XG4gICAgICAgICAgICAgICAgdmFyIGwgPSBOdChlKTtcbiAgICAgICAgICAgICAgICBpZiAobCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYyA9IGNlKGUpLCAhdCkgcmV0dXJuIGFlKGUsIGMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwID0gWHQoZSksIGggPSBwID09IENlIHx8IHAgPT0gTGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChZdChlKSkgcmV0dXJuIFYoZSwgdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwID09IERlIHx8IHAgPT0gU2UgfHwgaCAmJiAhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHUoZSkpIHJldHVybiBzID8gZSA6IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPSBsZShoID8ge30gOiBlKSwgIXQpIHJldHVybiByZShlLCBVKGMsIGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcnRbcF0pIHJldHVybiBzID8gZSA6IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IHVlKGUsIHAsICQsIHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG8gfHwgKG8gPSBuZXcgRSgpKTtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IG8uZ2V0KGUpO1xuICAgICAgICAgICAgICAgIGlmICh2KSByZXR1cm4gdjtcbiAgICAgICAgICAgICAgICBpZiAoby5zZXQoZSwgYyksICFsKSB2YXIgbSA9IGEgPyBuZShlKSA6IFBlKGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuKG0gfHwgZSwgZnVuY3Rpb24ociwgbikge1xuICAgICAgICAgICAgICAgICAgICBtICYmIChuID0gciwgciA9IGVbbl0pLCBXKGMsIG4sICQociwgdCwgYSwgaSwgbiwgZSwgbykpO1xuICAgICAgICAgICAgICAgIH0pLCBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gQihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtlKGUpID8ganQoZSkgOiB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIFgoZSwgdCwgYSkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdChlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTnQoZSkgPyBpIDogcyhpLCBhKGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIE4oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBidC5jYWxsKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gWShlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEoIWtlKGUpIHx8IHZlKGUpKSAmJiAoeGUoZSkgfHwgdShlKSA/IF90IDogYXQpLnRlc3QoZGUoZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gSChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtZShlKSkgcmV0dXJuIHp0KGUpO1xuICAgICAgICAgICAgICAgIHZhciB0ID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYSBpbiBPYmplY3QoZSkpIGZ0LmNhbGwoZSwgYSkgJiYgXCJjb25zdHJ1Y3RvclwiICE9IGEgJiYgdC5wdXNoKGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gVihlLCB0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHQpIHJldHVybiBlLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBuZXcgZS5jb25zdHJ1Y3RvcihlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuY29weShhKSwgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIEcoZSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gbmV3IGUuY29uc3RydWN0b3IoZS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHd0KHQpLnNldChuZXcgd3QoZSkpLCB0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gSihlLCB0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0ID8gRyhlLmJ1ZmZlcikgOiBlLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGUuY29uc3RydWN0b3IoYSwgZS5ieXRlT2Zmc2V0LCBlLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gSyhlLCB0LCBhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG8odCA/IGEocChlKSwgITApIDogcChlKSwgaSwgbmV3IGUuY29uc3RydWN0b3IoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBRKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IG5ldyBlLmNvbnN0cnVjdG9yKGUuc291cmNlLCB0dC5leGVjKGUpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5sYXN0SW5kZXggPSBlLmxhc3RJbmRleCwgdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIFooZSwgdCwgYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvKHQgPyBhKHYoZSksICEwKSA6IHYoZSksIHIsIG5ldyBlLmNvbnN0cnVjdG9yKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZWUoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkdCA/IE9iamVjdCgkdC5jYWxsKGUpKSA6IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdGUoZSwgdCkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gdCA/IEcoZS5idWZmZXIpIDogZS5idWZmZXI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBlLmNvbnN0cnVjdG9yKGEsIGUuYnl0ZU9mZnNldCwgZS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYWUoZSwgdCkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gLTEsIGkgPSBlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKHQgfHwgKHQgPSBBcnJheShpKSk7ICsrYSA8IGk7ICkgdFthXSA9IGVbYV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpZShlLCB0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgYSB8fCAoYSA9IHt9KTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gLTEsIG4gPSB0Lmxlbmd0aDsgKytyIDwgbjsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gdFtyXSwgbyA9IGkgPyBpKGFbc10sIGVbc10sIHMsIGEsIGUpIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICBXKGEsIHMsIHZvaWQgMCA9PT0gbyA/IGVbc10gOiBvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiByZShlLCB0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGllKGUsIEJ0KGUpLCB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG5lKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWChlLCBQZSwgQnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc2UoZSwgdCkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gZS5fX2RhdGFfXztcbiAgICAgICAgICAgICAgICByZXR1cm4gaGUodCkgPyBhW1wic3RyaW5nXCIgPT0gdHlwZW9mIHQgPyBcInN0cmluZ1wiIDogXCJoYXNoXCJdIDogYS5tYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBvZShlLCB0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBsKGUsIHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBZKGEpID8gYSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNlKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IGUubGVuZ3RoLCBhID0gZS5jb25zdHJ1Y3Rvcih0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBlWzBdICYmIGZ0LmNhbGwoZSwgXCJpbmRleFwiKSAmJiAoYS5pbmRleCA9IGUuaW5kZXgsIFxuICAgICAgICAgICAgICAgIGEuaW5wdXQgPSBlLmlucHV0KSwgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxlKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlLmNvbnN0cnVjdG9yIHx8IG1lKGUpID8ge30gOiBCKGt0KGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVlKGUsIHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IGUuY29uc3RydWN0b3I7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIEJlOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRyhlKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSBFZTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgSWU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgcigrZSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgWGU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBKKGUsIGkpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIE5lOlxuICAgICAgICAgICAgICAgICAgY2FzZSBZZTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgSGU6XG4gICAgICAgICAgICAgICAgICBjYXNlIFZlOlxuICAgICAgICAgICAgICAgICAgY2FzZSBHZTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgSmU6XG4gICAgICAgICAgICAgICAgICBjYXNlIEtlOlxuICAgICAgICAgICAgICAgICAgY2FzZSBRZTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgWmU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZShlLCBpKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSBUZTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEsoZSwgaSwgYSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgUmU6XG4gICAgICAgICAgICAgICAgICBjYXNlIFVlOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHIoZSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgV2U6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBRKGUpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIHFlOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWihlLCBpLCBhKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAkZTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVlKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBlKGUsIHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISEodCA9IG51bGwgPT0gdCA/IEZlIDogdCkgJiYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIGUgfHwgaXQudGVzdChlKSkgJiYgZSA+IC0xICYmIGUgJSAxID09IDAgJiYgZSA8IHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBoZShlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0eXBlb2YgZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0IHx8IFwibnVtYmVyXCIgPT0gdCB8fCBcInN5bWJvbFwiID09IHQgfHwgXCJib29sZWFuXCIgPT0gdCA/IFwiX19wcm90b19fXCIgIT09IGUgOiBudWxsID09PSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdmUoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIWR0ICYmIGR0IGluIGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtZShlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBlICYmIGUuY29uc3RydWN0b3I7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgPT09IChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgJiYgdC5wcm90b3R5cGUgfHwgdnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZGUoZSkge1xuICAgICAgICAgICAgICAgIGlmIChudWxsICE9IGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5dC5jYWxsKGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgKyBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHllKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJChlLCAhMCwgITApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZmUoZSwgdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlID09PSB0IHx8IGUgIT09IGUgJiYgdCAhPT0gdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGJlKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2UoZSkgJiYgZnQuY2FsbChlLCBcImNhbGxlZVwiKSAmJiAoIVB0LmNhbGwoZSwgXCJjYWxsZWVcIikgfHwgYnQuY2FsbChlKSA9PSBTZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBfZShlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgIT0gZSAmJiB3ZShlLmxlbmd0aCkgJiYgIXhlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2UoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBqZShlKSAmJiBfZShlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHhlKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IGtlKGUpID8gYnQuY2FsbChlKSA6IFwiXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT0gQ2UgfHwgdCA9PSBMZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdlKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJudW1iZXJcIiA9PSB0eXBlb2YgZSAmJiBlID4gLTEgJiYgZSAlIDEgPT0gMCAmJiBlIDw9IEZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24ga2UoZSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gdHlwZW9mIGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhZSAmJiAoXCJvYmplY3RcIiA9PSB0IHx8IFwiZnVuY3Rpb25cIiA9PSB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGplKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFlICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBQZShlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9lKGUpID8gRChlKSA6IEgoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBNZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBPZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgQWUgPSAyMDAsIHplID0gXCJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fXCIsIEZlID0gOTAwNzE5OTI1NDc0MDk5MSwgU2UgPSBcIltvYmplY3QgQXJndW1lbnRzXVwiLCBFZSA9IFwiW29iamVjdCBCb29sZWFuXVwiLCBJZSA9IFwiW29iamVjdCBEYXRlXVwiLCBDZSA9IFwiW29iamVjdCBGdW5jdGlvbl1cIiwgTGUgPSBcIltvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dXCIsIFRlID0gXCJbb2JqZWN0IE1hcF1cIiwgUmUgPSBcIltvYmplY3QgTnVtYmVyXVwiLCBEZSA9IFwiW29iamVjdCBPYmplY3RdXCIsIFdlID0gXCJbb2JqZWN0IFJlZ0V4cF1cIiwgcWUgPSBcIltvYmplY3QgU2V0XVwiLCBVZSA9IFwiW29iamVjdCBTdHJpbmddXCIsICRlID0gXCJbb2JqZWN0IFN5bWJvbF1cIiwgQmUgPSBcIltvYmplY3QgQXJyYXlCdWZmZXJdXCIsIFhlID0gXCJbb2JqZWN0IERhdGFWaWV3XVwiLCBOZSA9IFwiW29iamVjdCBGbG9hdDMyQXJyYXldXCIsIFllID0gXCJbb2JqZWN0IEZsb2F0NjRBcnJheV1cIiwgSGUgPSBcIltvYmplY3QgSW50OEFycmF5XVwiLCBWZSA9IFwiW29iamVjdCBJbnQxNkFycmF5XVwiLCBHZSA9IFwiW29iamVjdCBJbnQzMkFycmF5XVwiLCBKZSA9IFwiW29iamVjdCBVaW50OEFycmF5XVwiLCBLZSA9IFwiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIiwgUWUgPSBcIltvYmplY3QgVWludDE2QXJyYXldXCIsIFplID0gXCJbb2JqZWN0IFVpbnQzMkFycmF5XVwiLCBldCA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZywgdHQgPSAvXFx3KiQvLCBhdCA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC8sIGl0ID0gL14oPzowfFsxLTldXFxkKikkLywgcnQgPSB7fTtcbiAgICAgICAgICAgIHJ0W1NlXSA9IHJ0W1wiW29iamVjdCBBcnJheV1cIl0gPSBydFtCZV0gPSBydFtYZV0gPSBydFtFZV0gPSBydFtJZV0gPSBydFtOZV0gPSBydFtZZV0gPSBydFtIZV0gPSBydFtWZV0gPSBydFtHZV0gPSBydFtUZV0gPSBydFtSZV0gPSBydFtEZV0gPSBydFtXZV0gPSBydFtxZV0gPSBydFtVZV0gPSBydFskZV0gPSBydFtKZV0gPSBydFtLZV0gPSBydFtRZV0gPSBydFtaZV0gPSAhMCwgXG4gICAgICAgICAgICBydFtcIltvYmplY3QgRXJyb3JdXCJdID0gcnRbQ2VdID0gcnRbXCJbb2JqZWN0IFdlYWtNYXBdXCJdID0gITE7XG4gICAgICAgICAgICB2YXIgbnQgPSBcIm9iamVjdFwiID09IHR5cGVvZiBlICYmIGUgJiYgZS5PYmplY3QgPT09IE9iamVjdCAmJiBlLCBzdCA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHNlbGYgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGYsIG90ID0gbnQgfHwgc3QgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpLCBjdCA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgJiYgdCAmJiAhdC5ub2RlVHlwZSAmJiB0LCBsdCA9IGN0ICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIGEgJiYgYSAmJiAhYS5ub2RlVHlwZSAmJiBhLCB1dCA9IGx0ICYmIGx0LmV4cG9ydHMgPT09IGN0LCBwdCA9IEFycmF5LnByb3RvdHlwZSwgaHQgPSBGdW5jdGlvbi5wcm90b3R5cGUsIHZ0ID0gT2JqZWN0LnByb3RvdHlwZSwgbXQgPSBvdFtcIl9fY29yZS1qc19zaGFyZWRfX1wiXSwgZHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IC9bXi5dKyQvLmV4ZWMobXQgJiYgbXQua2V5cyAmJiBtdC5rZXlzLklFX1BST1RPIHx8IFwiXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlID8gXCJTeW1ib2woc3JjKV8xLlwiICsgZSA6IFwiXCI7XG4gICAgICAgICAgICB9KCksIHl0ID0gaHQudG9TdHJpbmcsIGZ0ID0gdnQuaGFzT3duUHJvcGVydHksIGJ0ID0gdnQudG9TdHJpbmcsIF90ID0gUmVnRXhwKFwiXlwiICsgeXQuY2FsbChmdCkucmVwbGFjZShldCwgXCJcXFxcJCZcIikucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgXCIkMS4qP1wiKSArIFwiJFwiKSwgZ3QgPSB1dCA/IG90LkJ1ZmZlciA6IHZvaWQgMCwgeHQgPSBvdC5TeW1ib2wsIHd0ID0gb3QuVWludDhBcnJheSwga3QgPSBoKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSwganQgPSBPYmplY3QuY3JlYXRlLCBQdCA9IHZ0LnByb3BlcnR5SXNFbnVtZXJhYmxlLCBNdCA9IHB0LnNwbGljZSwgT3QgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLCBBdCA9IGd0ID8gZ3QuaXNCdWZmZXIgOiB2b2lkIDAsIHp0ID0gaChPYmplY3Qua2V5cywgT2JqZWN0KSwgRnQgPSBvZShvdCwgXCJEYXRhVmlld1wiKSwgU3QgPSBvZShvdCwgXCJNYXBcIiksIEV0ID0gb2Uob3QsIFwiUHJvbWlzZVwiKSwgSXQgPSBvZShvdCwgXCJTZXRcIiksIEN0ID0gb2Uob3QsIFwiV2Vha01hcFwiKSwgTHQgPSBvZShPYmplY3QsIFwiY3JlYXRlXCIpLCBUdCA9IGRlKEZ0KSwgUnQgPSBkZShTdCksIER0ID0gZGUoRXQpLCBXdCA9IGRlKEl0KSwgcXQgPSBkZShDdCksIFV0ID0geHQgPyB4dC5wcm90b3R5cGUgOiB2b2lkIDAsICR0ID0gVXQgPyBVdC52YWx1ZU9mIDogdm9pZCAwO1xuICAgICAgICAgICAgbS5wcm90b3R5cGUuY2xlYXIgPSBkLCBtLnByb3RvdHlwZS5kZWxldGUgPSB5LCBtLnByb3RvdHlwZS5nZXQgPSBmLCBtLnByb3RvdHlwZS5oYXMgPSBiLCBcbiAgICAgICAgICAgIG0ucHJvdG90eXBlLnNldCA9IF8sIGcucHJvdG90eXBlLmNsZWFyID0geCwgZy5wcm90b3R5cGUuZGVsZXRlID0gdywgZy5wcm90b3R5cGUuZ2V0ID0gaywgXG4gICAgICAgICAgICBnLnByb3RvdHlwZS5oYXMgPSBqLCBnLnByb3RvdHlwZS5zZXQgPSBQLCBNLnByb3RvdHlwZS5jbGVhciA9IE8sIE0ucHJvdG90eXBlLmRlbGV0ZSA9IEEsIFxuICAgICAgICAgICAgTS5wcm90b3R5cGUuZ2V0ID0geiwgTS5wcm90b3R5cGUuaGFzID0gRiwgTS5wcm90b3R5cGUuc2V0ID0gUywgRS5wcm90b3R5cGUuY2xlYXIgPSBJLCBcbiAgICAgICAgICAgIEUucHJvdG90eXBlLmRlbGV0ZSA9IEMsIEUucHJvdG90eXBlLmdldCA9IEwsIEUucHJvdG90eXBlLmhhcyA9IFQsIEUucHJvdG90eXBlLnNldCA9IFI7XG4gICAgICAgICAgICB2YXIgQnQgPSBPdCA/IGgoT3QsIE9iamVjdCkgOiBNZSwgWHQgPSBOO1xuICAgICAgICAgICAgKEZ0ICYmIFh0KG5ldyBGdChuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBYZSB8fCBTdCAmJiBYdChuZXcgU3QoKSkgIT0gVGUgfHwgRXQgJiYgXCJbb2JqZWN0IFByb21pc2VdXCIgIT0gWHQoRXQucmVzb2x2ZSgpKSB8fCBJdCAmJiBYdChuZXcgSXQoKSkgIT0gcWUgfHwgQ3QgJiYgXCJbb2JqZWN0IFdlYWtNYXBdXCIgIT0gWHQobmV3IEN0KCkpKSAmJiAoWHQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBidC5jYWxsKGUpLCBhID0gdCA9PSBEZSA/IGUuY29uc3RydWN0b3IgOiB2b2lkIDAsIGkgPSBhID8gZGUoYSkgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgaWYgKGkpIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBUdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFhlO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFJ0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVGU7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgRHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgUHJvbWlzZV1cIjtcblxuICAgICAgICAgICAgICAgICAgY2FzZSBXdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHFlO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIHF0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFdlYWtNYXBdXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgTnQgPSBBcnJheS5pc0FycmF5LCBZdCA9IEF0IHx8IE9lO1xuICAgICAgICAgICAgYS5leHBvcnRzID0geWU7XG4gICAgICAgIH0pLmNhbGwodCwgYSg1KSwgYSg2KShlKSk7XG4gICAgfSwgZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICB2YXIgYTtcbiAgICAgICAgYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0oKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGEgPSBhIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMCwgZXZhbCkoXCJ0aGlzXCIpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBcIm9iamVjdFwiID09IHR5cGVvZiB3aW5kb3cgJiYgKGEgPSB3aW5kb3cpO1xuICAgICAgICB9XG4gICAgICAgIGUuZXhwb3J0cyA9IGE7XG4gICAgfSwgZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gZS53ZWJwYWNrUG9seWZpbGwgfHwgKGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fSwgZS5wYXRocyA9IFtdLCBlLmNoaWxkcmVuIHx8IChlLmNoaWxkcmVuID0gW10pLCBcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcImxvYWRlZFwiLCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUubDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwiaWRcIiwge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIGUud2VicGFja1BvbHlmaWxsID0gMSksIGU7XG4gICAgICAgIH07XG4gICAgfSwgZnVuY3Rpb24oZSwgdCwgYSkge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgZnVuY3Rpb24gaShlLCB0KSB7XG4gICAgICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgdCkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUoZSwgdCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwgdC5sZW5ndGg7IGErKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRbYV07XG4gICAgICAgICAgICAgICAgICAgIGkuZW51bWVyYWJsZSA9IGkuZW51bWVyYWJsZSB8fCAhMSwgaS5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIGkgJiYgKGkud3JpdGFibGUgPSAhMCksIFxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgaS5rZXksIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgJiYgZSh0LnByb3RvdHlwZSwgYSksIGkgJiYgZSh0LCBpKSwgdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgICAgICAgICB2YWx1ZTogITBcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKHQsIGEpIHtcbiAgICAgICAgICAgICAgICBpKHRoaXMsIGUpLCB0aGlzLnBhcmFtcyA9IHQsIHRoaXMubGlicmFyeSA9IGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcihlLCBbIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwibGlua1BhcnRpY2xlc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gZS54IC0gdC54LCBpID0gZS55IC0gdC55LCByID0gTWF0aC5zcXJ0KGEgKiBhICsgaSAqIGkpLCBuID0gdGhpcy5saWJyYXJ5LmNhbnZhcywgcyA9IHRoaXMucGFyYW1zLnBhcnRpY2xlcy5saW5lX2xpbmtlZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIgPD0gdGhpcy5wYXJhbXMucGFydGljbGVzLmxpbmVfbGlua2VkLmRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHRoaXMucGFyYW1zLnBhcnRpY2xlcy5saW5lX2xpbmtlZC5vcGFjaXR5IC0gciAvICgxIC8gdGhpcy5wYXJhbXMucGFydGljbGVzLmxpbmVfbGlua2VkLm9wYWNpdHkpIC8gdGhpcy5wYXJhbXMucGFydGljbGVzLmxpbmVfbGlua2VkLmRpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMubGluZV9saW5rZWQuY29sb3JfcmdiX2xpbmUsIGwgPSBjLnIsIHUgPSBjLmcsIHAgPSBjLmI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5jdHguc2F2ZSgpLCBuLmN0eC5zdHJva2VTdHlsZSA9IFwicmdiYSggXCIgKyBsICsgXCIsIFwiICsgdSArIFwiLCBcIiArIHAgKyBcIiwgXCIgKyBvICsgXCIgKVwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmN0eC5saW5lV2lkdGggPSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMubGluZV9saW5rZWQud2lkdGgsIG4uY3R4LmJlZ2luUGF0aCgpLCBzLnNoYWRvdy5lbmFibGUgJiYgKG4uY3R4LnNoYWRvd0JsdXIgPSBzLnNoYWRvdy5ibHVyLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmN0eC5zaGFkb3dDb2xvciA9IHMuc2hhZG93LmNvbG9yKSwgbi5jdHgubW92ZVRvKGUueCwgZS55KSwgbi5jdHgubGluZVRvKHQueCwgdC55KSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5jdHguc3Ryb2tlKCksIG4uY3R4LmNsb3NlUGF0aCgpLCBuLmN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImF0dHJhY3RQYXJ0aWNsZXNcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGUueCAtIHQueCwgaSA9IGUueSAtIHQueTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguc3FydChhICogYSArIGkgKiBpKSA8PSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMubGluZV9saW5rZWQuZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gYSAvICgxZTMgKiB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5hdHRyYWN0LnJvdGF0ZVgpLCBuID0gaSAvICgxZTMgKiB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5hdHRyYWN0LnJvdGF0ZVkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS52eCAtPSByLCBlLnZ5IC09IG4sIHQudnggKz0gciwgdC52eSArPSBuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJib3VuY2VQYXJ0aWNsZXNcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGUueCAtIHQueCwgaSA9IGUueSAtIHQueTtcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5zcXJ0KGEgKiBhICsgaSAqIGkpIDw9IGUucmFkaXVzICsgdC5yYWRpdXMgJiYgKGUudnggPSAtZS52eCwgZS52eSA9IC1lLnZ5LCBcbiAgICAgICAgICAgICAgICAgICAgdC52eCA9IC10LnZ4LCB0LnZ5ID0gLXQudnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXSksIGU7XG4gICAgICAgIH0oKTtcbiAgICAgICAgdC5kZWZhdWx0ID0gbjtcbiAgICB9LCBmdW5jdGlvbihlLCB0LCBhKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBmdW5jdGlvbiBpKGUsIHQpIHtcbiAgICAgICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiB0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZShlLCB0KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCB0Lmxlbmd0aDsgYSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gdFthXTtcbiAgICAgICAgICAgICAgICAgICAgaS5lbnVtZXJhYmxlID0gaS5lbnVtZXJhYmxlIHx8ICExLCBpLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gaSAmJiAoaS53cml0YWJsZSA9ICEwKSwgXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBpLmtleSwgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSAmJiBlKHQucHJvdG90eXBlLCBhKSwgaSAmJiBlKHQsIGkpLCB0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSgpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG4gPSBhKDApLCBzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKHQsIGEpIHtcbiAgICAgICAgICAgICAgICBpKHRoaXMsIGUpLCB0aGlzLnBhcmFtcyA9IHQsIHRoaXMubGlicmFyeSA9IGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcihlLCBbIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwicHVzaFBhcnRpY2xlc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5saWJyYXJ5LCBpID0gYS5jYW52YXMsIHIgPSBhLnRtcCwgcyA9IGEubWFuYWdlcjtcbiAgICAgICAgICAgICAgICAgICAgci5wdXNoaW5nID0gITA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG8gPSAwOyBvIDwgZTsgbysrKSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuYXJyYXkucHVzaChuZXcgbi5QYXJ0aWNsZSh0aGlzLnBhcmFtcywgdGhpcy5saWJyYXJ5LCB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuY29sb3IsIHRoaXMucGFyYW1zLnBhcnRpY2xlcy5vcGFjaXR5LnZhbHVlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB0ID8gdC5wb3NfeCA6IE1hdGgucmFuZG9tKCkgKiBpLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogdCA/IHQucG9zX3kgOiBNYXRoLnJhbmRvbSgpICogaS5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgfSkpLCBvID09IGUgLSAxICYmICh0aGlzLnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5lbmFibGUgfHwgcy5wYXJ0aWNsZXNEcmF3KCksIHIucHVzaGluZyA9ICExKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcInJlbW92ZVBhcnRpY2xlc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5saWJyYXJ5Lm1hbmFnZXI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLnBhcnRpY2xlcy5hcnJheS5zcGxpY2UoMCwgZSksIHRoaXMucGFyYW1zLnBhcnRpY2xlcy5tb3ZlLmVuYWJsZSB8fCB0LnBhcnRpY2xlc0RyYXcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImJ1YmJsZVBhcnRpY2xlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLCBhID0gdGhpcy5saWJyYXJ5LnRtcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkuZXZlbnRzLm9uaG92ZXIuZW5hYmxlICYmIG4uaXNJbkFycmF5KFwiYnViYmxlXCIsIHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkuZXZlbnRzLm9uaG92ZXIubW9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gZS54IC0gdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb3VzZS5wb3NfeCwgciA9IGUueSAtIHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkubW91c2UucG9zX3ksIHMgPSBNYXRoLnNxcnQoaSAqIGkgKyByICogciksIG8gPSAxIC0gcyAvIHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLmRpc3RhbmNlLCBjID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5vcGFjaXR5X2J1YmJsZSA9IGUub3BhY2l0eSwgZS5yYWRpdXNfYnViYmxlID0gZS5yYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPD0gdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5idWJibGUuZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobyA+PSAwICYmIFwibW91c2Vtb3ZlXCIgPT0gdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLnNpemUgIT0gdGhpcy5wYXJhbXMucGFydGljbGVzLnNpemUudmFsdWUpIGlmICh0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5Lm1vZGVzLmJ1YmJsZS5zaXplID4gdGhpcy5wYXJhbXMucGFydGljbGVzLnNpemUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gZS5yYWRpdXMgKyB0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5Lm1vZGVzLmJ1YmJsZS5zaXplICogbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPj0gMCAmJiAoZS5yYWRpdXNfYnViYmxlID0gbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGUucmFkaXVzIC0gdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5idWJibGUuc2l6ZSwgcCA9IGUucmFkaXVzIC0gdSAqIG87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnJhZGl1c19idWJibGUgPSBwID4gMCA/IHAgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5Lm1vZGVzLmJ1YmJsZS5vcGFjaXR5ICE9IHRoaXMucGFyYW1zLnBhcnRpY2xlcy5vcGFjaXR5LnZhbHVlKSBpZiAodGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5idWJibGUub3BhY2l0eSA+IHRoaXMucGFyYW1zLnBhcnRpY2xlcy5vcGFjaXR5LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLm9wYWNpdHkgKiBvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA+IGUub3BhY2l0eSAmJiBoIDw9IHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLm9wYWNpdHkgJiYgKGUub3BhY2l0eV9idWJibGUgPSBoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ID0gZS5vcGFjaXR5IC0gKHRoaXMucGFyYW1zLnBhcnRpY2xlcy5vcGFjaXR5LnZhbHVlIC0gdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5idWJibGUub3BhY2l0eSkgKiBvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA8IGUub3BhY2l0eSAmJiB2ID49IHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLm9wYWNpdHkgJiYgKGUub3BhY2l0eV9idWJibGUgPSB2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIm1vdXNlbGVhdmVcIiA9PSB0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5LnN0YXR1cyAmJiBjKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25jbGljay5lbmFibGUgJiYgbi5pc0luQXJyYXkoXCJidWJibGVcIiwgdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25jbGljay5tb2RlKSAmJiBhLmJ1YmJsZV9jbGlja2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBlLnggLSB0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5Lm1vdXNlLmNsaWNrX3Bvc194LCBkID0gZS55IC0gdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb3VzZS5jbGlja19wb3NfeSwgeSA9IE1hdGguc3FydChtICogbSArIGQgKiBkKSwgZiA9IChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkubW91c2UuY2xpY2tfdGltZSkgLyAxZTM7XG4gICAgICAgICAgICAgICAgICAgICAgICBmID4gdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5idWJibGUuZHVyYXRpb24gJiYgKGEuYnViYmxlX2R1cmF0aW9uX2VuZCA9ICEwKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBmID4gMiAqIHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLmR1cmF0aW9uICYmIChhLmJ1YmJsZV9jbGlja2luZyA9ICExLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuYnViYmxlX2R1cmF0aW9uX2VuZCA9ICExKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gZnVuY3Rpb24oaSwgciwgbiwgcywgbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpICE9IHIpIGlmIChhLmJ1YmJsZV9kdXJhdGlvbl9lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPSBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHMgLSBmICogKHMgLSBpKSAvIHQucGFyYW1zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLmR1cmF0aW9uLCBsID0gaSAtIGMsIHUgPSBpICsgbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2l6ZVwiID09IG8gJiYgKGUucmFkaXVzX2J1YmJsZSA9IHUpLCBcIm9wYWNpdHlcIiA9PSBvICYmIChlLm9wYWNpdHlfYnViYmxlID0gdSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHkgPD0gdC5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5idWJibGUuZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh2b2lkIDAgIT0gbiA/IG4gOiBzKSAhPSBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IHMgLSBmICogKHMgLSBpKSAvIHQucGFyYW1zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLmR1cmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaXplXCIgPT0gbyAmJiAoZS5yYWRpdXNfYnViYmxlID0gcCksIFwib3BhY2l0eVwiID09IG8gJiYgKGUub3BhY2l0eV9idWJibGUgPSBwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBcInNpemVcIiA9PSBvICYmIChlLnJhZGl1c19idWJibGUgPSB2b2lkIDApLCBcIm9wYWNpdHlcIiA9PSBvICYmIChlLm9wYWNpdHlfYnViYmxlID0gdm9pZCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmJ1YmJsZV9jbGlja2luZyAmJiAoYih0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5Lm1vZGVzLmJ1YmJsZS5zaXplLCB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuc2l6ZS52YWx1ZSwgZS5yYWRpdXNfYnViYmxlLCBlLnJhZGl1cywgXCJzaXplXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGIodGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5idWJibGUub3BhY2l0eSwgdGhpcy5wYXJhbXMucGFydGljbGVzLm9wYWNpdHkudmFsdWUsIGUub3BhY2l0eV9idWJibGUsIGUub3BhY2l0eSwgXCJvcGFjaXR5XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwicmVwdWxzZVBhcnRpY2xlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLCBhID0gdGhpcy5saWJyYXJ5LCBpID0gYS5jYW52YXMsIHIgPSBhLnRtcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkuZXZlbnRzLm9uaG92ZXIuZW5hYmxlICYmIG4uaXNJbkFycmF5KFwicmVwdWxzZVwiLCB0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5LmV2ZW50cy5vbmhvdmVyLm1vZGUpICYmIFwibW91c2Vtb3ZlXCIgPT0gdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gZS54IC0gdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb3VzZS5wb3NfeCwgbyA9IGUueSAtIHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkubW91c2UucG9zX3ksIGMgPSBNYXRoLnNxcnQocyAqIHMgKyBvICogbyksIGwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogcyAvIGMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogbyAvIGNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHUgPSB0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5Lm1vZGVzLnJlcHVsc2UuZGlzdGFuY2UsIHAgPSBuLmNsYW1wKDEgLyB1ICogKC0xICogTWF0aC5wb3coYyAvIHUsIDIpICsgMSkgKiB1ICogMTAwLCAwLCA1MCksIGggPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogZS54ICsgbC54ICogcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBlLnkgKyBsLnkgKiBwXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJib3VuY2VcIiA9PSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5vdXRfbW9kZSA/IChoLnggLSBlLnJhZGl1cyA+IDAgJiYgaC54ICsgZS5yYWRpdXMgPCBpLndpZHRoICYmIChlLnggPSBoLngpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGgueSAtIGUucmFkaXVzID4gMCAmJiBoLnkgKyBlLnJhZGl1cyA8IGkuaGVpZ2h0ICYmIChlLnkgPSBoLnkpKSA6IChlLnggPSBoLngsIGUueSA9IGgueSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25jbGljay5lbmFibGUgJiYgbi5pc0luQXJyYXkoXCJyZXB1bHNlXCIsIHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkuZXZlbnRzLm9uY2xpY2subW9kZSkpIGlmIChyLnJlcHVsc2VfZmluaXNoIHx8ICsrci5yZXB1bHNlX2NvdW50ID09IHRoaXMucGFyYW1zLnBhcnRpY2xlcy5hcnJheS5sZW5ndGggJiYgKHIucmVwdWxzZV9maW5pc2ggPSAhMCksIFxuICAgICAgICAgICAgICAgICAgICByLnJlcHVsc2VfY2xpY2tpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ID0gTWF0aC5wb3codGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5yZXB1bHNlLmRpc3RhbmNlIC8gNiwgMyksIG0gPSB0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5Lm1vdXNlLmNsaWNrX3Bvc194IC0gZS54LCBkID0gdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb3VzZS5jbGlja19wb3NfeSAtIGUueSwgeSA9IG0gKiBtICsgZCAqIGQsIGYgPSAtdiAvIHkgKiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA8PSB2ICYmIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gTWF0aC5hdGFuMihkLCBtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS52eCA9IGYgKiBNYXRoLmNvcyhhKSwgZS52eSA9IGYgKiBNYXRoLnNpbihhKSwgXCJib3VuY2VcIiA9PSB0LnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5vdXRfbW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IGUueCArIGUudngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBlLnkgKyBlLnZ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIueCArIGUucmFkaXVzID4gaS53aWR0aCA/IGUudnggPSAtZS52eCA6IHIueCAtIGUucmFkaXVzIDwgMCAmJiAoZS52eCA9IC1lLnZ4KSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIueSArIGUucmFkaXVzID4gaS5oZWlnaHQgPyBlLnZ5ID0gLWUudnkgOiByLnkgLSBlLnJhZGl1cyA8IDAgJiYgKGUudnkgPSAtZS52eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgMCA9PSByLnJlcHVsc2VfY2xpY2tpbmcgJiYgKGUudnggPSBlLnZ4X2ksIGUudnkgPSBlLnZ5X2kpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiZ3JhYlBhcnRpY2xlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmxpYnJhcnkuY2FudmFzLCBhID0gdGhpcy5wYXJhbXMsIGkgPSBhLmludGVyYWN0aXZpdHksIHIgPSBhLnBhcnRpY2xlcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkuZXZlbnRzLm9uaG92ZXIuZW5hYmxlICYmIFwibW91c2Vtb3ZlXCIgPT0gaS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZS54IC0gaS5tb3VzZS5wb3NfeCwgcyA9IGUueSAtIGkubW91c2UucG9zX3ksIG8gPSBNYXRoLnNxcnQobiAqIG4gKyBzICogcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobyA8PSBpLm1vZGVzLmdyYWIuZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGkubW9kZXMuZ3JhYiwgbCA9IGMubGluZV9saW5rZWQub3BhY2l0eSAtIG8gLyAoMSAvIGMubGluZV9saW5rZWQub3BhY2l0eSkgLyBjLmRpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IHIubGluZV9saW5rZWQuY29sb3JfcmdiX2xpbmUsIHAgPSB1LnIsIGggPSB1LmcsIHYgPSB1LmI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuY3R4LnN0cm9rZVN0eWxlID0gXCJyZ2JhKCBcIiArIHAgKyBcIiwgXCIgKyBoICsgXCIsIFwiICsgdiArIFwiLCBcIiArIGwgKyBcIiApXCIsIHQuY3R4LmxpbmVXaWR0aCA9IHIubGluZV9saW5rZWQud2lkdGgsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmN0eC5iZWdpblBhdGgoKSwgdC5jdHgubW92ZVRvKGUueCwgZS55KSwgdC5jdHgubGluZVRvKGkubW91c2UucG9zX3gsIGkubW91c2UucG9zX3kpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jdHguc3Ryb2tlKCksIHQuY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXSksIGU7XG4gICAgICAgIH0oKTtcbiAgICAgICAgdC5kZWZhdWx0ID0gcztcbiAgICB9LCBmdW5jdGlvbihlLCB0LCBhKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBmdW5jdGlvbiBpKGUsIHQpIHtcbiAgICAgICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiB0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZTtcbiAgICAgICAgfSA6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlO1xuICAgICAgICB9LCBuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKGUsIHQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0gMDsgYSA8IHQubGVuZ3RoOyBhKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0W2FdO1xuICAgICAgICAgICAgICAgICAgICBpLmVudW1lcmFibGUgPSBpLmVudW1lcmFibGUgfHwgITEsIGkuY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBpICYmIChpLndyaXRhYmxlID0gITApLCBcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIGkua2V5LCBpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgYSwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhICYmIGUodC5wcm90b3R5cGUsIGEpLCBpICYmIGUodCwgaSksIHQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcIl9fZXNNb2R1bGVcIiwge1xuICAgICAgICAgICAgdmFsdWU6ICEwXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcyA9IGEoMCksIG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUodCwgYSwgciwgbiwgcykge1xuICAgICAgICAgICAgICAgIGkodGhpcywgZSksIHRoaXMucGFyYW1zID0gdCwgdGhpcy5saWJyYXJ5ID0gYSwgdGhpcy5zZXR1cFNpemUoKSwgdGhpcy5zZXR1cFBvc2l0aW9uKHMpLCBcbiAgICAgICAgICAgICAgICB0aGlzLnNldHVwQ29sb3IociksIHRoaXMuc2V0dXBPcGFjaXR5KCksIHRoaXMuc2V0dXBBbmltYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuKGUsIFsge1xuICAgICAgICAgICAgICAgIGtleTogXCJzZXR1cFNpemVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmFkaXVzID0gKHRoaXMucGFyYW1zLnBhcnRpY2xlcy5zaXplLnJhbmRvbSA/IE1hdGgucmFuZG9tKCkgOiAxKSAqIHRoaXMucGFyYW1zLnBhcnRpY2xlcy5zaXplLnZhbHVlLCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMucGFydGljbGVzLnNpemUuYW5pbS5lbmFibGUgJiYgKHRoaXMuc2l6ZV9zdGF0dXMgPSAhMSwgdGhpcy52cyA9IHRoaXMucGFyYW1zLnBhcnRpY2xlcy5zaXplLmFuaW0uc3BlZWQgLyAxMDAsIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuc2l6ZS5hbmltLnN5bmMgfHwgKHRoaXMudnMgPSB0aGlzLnZzICogTWF0aC5yYW5kb20oKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwic2V0dXBQb3NpdGlvblwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5saWJyYXJ5LCBhID0gdC5jYW52YXMsIGkgPSB0LnZlbmRvcnM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IGUgPyBlLnggOiBNYXRoLnJhbmRvbSgpICogYS53aWR0aCwgdGhpcy55ID0gZSA/IGUueSA6IE1hdGgucmFuZG9tKCkgKiBhLmhlaWdodCwgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCA+IGEud2lkdGggLSAyICogdGhpcy5yYWRpdXMgPyB0aGlzLnggPSB0aGlzLnggLSB0aGlzLnJhZGl1cyA6IHRoaXMueCA8IDIgKiB0aGlzLnJhZGl1cyAmJiAodGhpcy54ID0gdGhpcy54ICsgdGhpcy5yYWRpdXMpLCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ID4gYS5oZWlnaHQgLSAyICogdGhpcy5yYWRpdXMgPyB0aGlzLnkgPSB0aGlzLnkgLSB0aGlzLnJhZGl1cyA6IHRoaXMueSA8IDIgKiB0aGlzLnJhZGl1cyAmJiAodGhpcy55ID0gdGhpcy55ICsgdGhpcy5yYWRpdXMpLCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMucGFydGljbGVzLm1vdmUuYm91bmNlICYmIGkuY2hlY2tPdmVybGFwKHRoaXMsIGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwic2V0dXBDb2xvclwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPSBzLmdldENvbG9yKGUudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwic2V0dXBPcGFjaXR5XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wYWNpdHkgPSAodGhpcy5wYXJhbXMucGFydGljbGVzLm9wYWNpdHkucmFuZG9tID8gTWF0aC5yYW5kb20oKSA6IDEpICogdGhpcy5wYXJhbXMucGFydGljbGVzLm9wYWNpdHkudmFsdWUsIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMub3BhY2l0eS5hbmltLmVuYWJsZSAmJiAodGhpcy5vcGFjaXR5X3N0YXR1cyA9ICExLCB0aGlzLnZvID0gdGhpcy5wYXJhbXMucGFydGljbGVzLm9wYWNpdHkuYW5pbS5zcGVlZCAvIDEwMCwgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLnBhcnRpY2xlcy5vcGFjaXR5LmFuaW0uc3luYyB8fCAodGhpcy52byA9IHRoaXMudm8gKiBNYXRoLnJhbmRvbSgpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJzZXR1cEFuaW1hdGlvblwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmxpYnJhcnksIHQgPSBlLnRtcCwgYSA9IGUudmVuZG9ycywgaSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5wYXJhbXMucGFydGljbGVzLm1vdmUuZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRvcFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwidG9wLXJpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IC41LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IC0uNVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJvdHRvbS1yaWdodFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAuNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAuNVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJvdHRvbVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJib3R0b20tbGVmdFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAtLjUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogMVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRvcC1sZWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IC0uNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAtLjVcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5zdHJhaWdodCA/ICh0aGlzLnZ4ID0gaS54LCB0aGlzLnZ5ID0gaS55LCB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5yYW5kb20gJiYgKHRoaXMudnggPSB0aGlzLnZ4ICogTWF0aC5yYW5kb20oKSwgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudnkgPSB0aGlzLnZ5ICogTWF0aC5yYW5kb20oKSkpIDogKHRoaXMudnggPSBpLnggKyBNYXRoLnJhbmRvbSgpIC0gLjUsIHRoaXMudnkgPSBpLnkgKyBNYXRoLnJhbmRvbSgpIC0gLjUpLCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52eF9pID0gdGhpcy52eCwgdGhpcy52eV9pID0gdGhpcy52eTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuc2hhcGUudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwib2JqZWN0XCIgPT0gKHZvaWQgMCA9PT0gbiA/IFwidW5kZWZpbmVkXCIgOiByKG4pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gbltNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBuLmxlbmd0aCldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcGUgPSBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zaGFwZSA9IG47XG4gICAgICAgICAgICAgICAgICAgIGlmIChcImltYWdlXCIgPT0gdGhpcy5zaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuc2hhcGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmltZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IG8uaW1hZ2Uuc3JjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGlvOiBvLmltYWdlLndpZHRoIC8gby5pbWFnZS5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuaW1nLnJhdGlvIHx8ICh0aGlzLmltZy5yYXRpbyA9IDEpLCBcInN2Z1wiID09IHQuaW1nX3R5cGUgJiYgdm9pZCAwICE9IG8uaW1hZ2UuZGF0YSAmJiAoYS5jcmVhdGVTdmdJbWcodGhpcywgby5pbWFnZS5kYXRhKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnB1c2hpbmcgJiYgKHRoaXMuaW1nLmxvYWRlZCA9ICExKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiaW1hZ2VzXCIgPT0gdGhpcy5zaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuc2hhcGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmltZ19pbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBjLmltYWdlc1t0LmltZ19pbmRleCAlIGMuaW1hZ2VzLmxlbmd0aF07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmltZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IGwuc3JjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGlvOiBsLndpZHRoIC8gbC5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuaW1nLnJhdGlvIHx8ICh0aGlzLmltZy5yYXRpbyA9IDEpLCBcInN2Z1wiID09IHQuaW1nX3R5cGUgJiYgdm9pZCAwICE9IGwuZGF0YSAmJiAoYS5jcmVhdGVTdmdJbWcodGhpcywgbC5kYXRhKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnB1c2hpbmcgJiYgKHRoaXMuaW1nLmxvYWRlZCA9ICExKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImRyYXdcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcywgdCA9IHRoaXMubGlicmFyeSwgYSA9IHQuY2FudmFzLCBpID0gdC50bXAsIHIgPSB0LnZlbmRvcnMsIG4gPSAodGhpcy5wYXJhbXMucGFydGljbGVzLCBcbiAgICAgICAgICAgICAgICAgICAgdm9pZCAwKTtcbiAgICAgICAgICAgICAgICAgICAgbiA9IHZvaWQgMCAhPSB0aGlzLnJhZGl1c19idWJibGUgPyB0aGlzLnJhZGl1c19idWJibGUgOiB0aGlzLnJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgIHMgPSB2b2lkIDAgIT0gdGhpcy5vcGFjaXR5X2J1YmJsZSA/IHRoaXMub3BhY2l0eV9idWJibGUgOiB0aGlzLm9wYWNpdHk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2xvci5yZ2IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gdGhpcy5jb2xvci5yZ2I7XG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gXCJyZ2JhKCBcIiArIGMuciArIFwiLCBcIiArIGMuZyArIFwiLCBcIiArIGMuYiArIFwiLCBcIiArIHMgKyBcIiApXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHRoaXMuY29sb3IuaHNsO1xuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IFwiaHNsYSggXCIgKyBsLmggKyBcIiwgXCIgKyBsLnMgKyBcIiwgXCIgKyBsLmwgKyBcIiwgXCIgKyBzICsgXCIgKVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYS5jdHguZmlsbFN0eWxlID0gbywgYS5jdHguYmVnaW5QYXRoKCksIHRoaXMuc2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY2lyY2xlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmN0eC5hcmModGhpcy54LCB0aGlzLnksIG4sIDAsIDIgKiBNYXRoLlBJLCAhMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlZGdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmN0eC5yZWN0KHRoaXMueCAtIG4sIHRoaXMueSAtIG4sIDIgKiBuLCAyICogbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0cmlhbmdsZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgci5kcmF3U2hhcGUoYS5jdHgsIHRoaXMueCAtIG4sIHRoaXMueSArIG4gLyAxLjY2LCAyICogbiwgMywgMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJwb2x5Z29uXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByLmRyYXdTaGFwZShhLmN0eCwgdGhpcy54IC0gbiAvICh0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuc2hhcGUucG9seWdvbi5uYl9zaWRlcyAvIDMuNSksIHRoaXMueSAtIG4gLyAuNzYsIDIuNjYgKiBuIC8gKHRoaXMucGFyYW1zLnBhcnRpY2xlcy5zaGFwZS5wb2x5Z29uLm5iX3NpZGVzIC8gMyksIHRoaXMucGFyYW1zLnBhcnRpY2xlcy5zaGFwZS5wb2x5Z29uLm5iX3NpZGVzLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0YXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuZHJhd1NoYXBlKGEuY3R4LCB0aGlzLnggLSAyICogbiAvICh0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuc2hhcGUucG9seWdvbi5uYl9zaWRlcyAvIDQpLCB0aGlzLnkgLSBuIC8gMS41MiwgMiAqIG4gKiAyLjY2IC8gKHRoaXMucGFyYW1zLnBhcnRpY2xlcy5zaGFwZS5wb2x5Z29uLm5iX3NpZGVzIC8gMyksIHRoaXMucGFyYW1zLnBhcnRpY2xlcy5zaGFwZS5wb2x5Z29uLm5iX3NpZGVzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImltYWdlc1wiOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbWFnZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB1ID0gXCJzdmdcIiA9PSBpLmltZ190eXBlID8gdGhpcy5pbWcub2JqIDogaS5pbWdfb2JqLCB1ICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmN0eC5kcmF3SW1hZ2UodCwgZS54IC0gbiwgZS55IC0gbiwgMiAqIG4sIDIgKiBuIC8gZS5pbWcucmF0aW8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSh1KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhLmN0eC5jbG9zZVBhdGgoKSwgdGhpcy5wYXJhbXMucGFydGljbGVzLnNoYXBlLnN0cm9rZS53aWR0aCA+IDAgJiYgKGEuY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5wYXJhbXMucGFydGljbGVzLnNoYXBlLnN0cm9rZS5jb2xvciwgXG4gICAgICAgICAgICAgICAgICAgIGEuY3R4LmxpbmVXaWR0aCA9IHRoaXMucGFyYW1zLnBhcnRpY2xlcy5zaGFwZS5zdHJva2Uud2lkdGgsIGEuY3R4LnN0cm9rZSgpKSwgYS5jdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXSksIGU7XG4gICAgICAgIH0oKTtcbiAgICAgICAgdC5kZWZhdWx0ID0gbztcbiAgICB9LCBmdW5jdGlvbihlLCB0LCBhKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBmdW5jdGlvbiBpKGUsIHQpIHtcbiAgICAgICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiB0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZShlLCB0KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCB0Lmxlbmd0aDsgYSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gdFthXTtcbiAgICAgICAgICAgICAgICAgICAgaS5lbnVtZXJhYmxlID0gaS5lbnVtZXJhYmxlIHx8ICExLCBpLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gaSAmJiAoaS53cml0YWJsZSA9ICEwKSwgXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBpLmtleSwgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSAmJiBlKHQucHJvdG90eXBlLCBhKSwgaSAmJiBlKHQsIGkpLCB0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSgpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG4gPSBhKDApLCBzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKHQsIGEsIHIsIG4sIHMpIHtcbiAgICAgICAgICAgICAgICBpKHRoaXMsIGUpLCB0aGlzLnBhcmFtcyA9IHQsIHRoaXMuaW50ZXJhY3QgPSBhLCB0aGlzLm1vZGVzID0gciwgdGhpcy52ZW5kb3JzID0gbiwgXG4gICAgICAgICAgICAgICAgdGhpcy5saWJyYXJ5ID0gcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByKGUsIFsge1xuICAgICAgICAgICAgICAgIGtleTogXCJwYXJ0aWNsZXNDcmVhdGVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMsIHQgPSBlLmNvbG9yLCBhID0gZS5vcGFjaXR5LCBpID0gMDsgaSA8IHRoaXMucGFyYW1zLnBhcnRpY2xlcy5udW1iZXIudmFsdWU7IGkrKykgdGhpcy5wYXJhbXMucGFydGljbGVzLmFycmF5LnB1c2gobmV3IG4uUGFydGljbGUodGhpcy5wYXJhbXMsIHRoaXMubGlicmFyeSwgdCwgYS52YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwicGFydGljbGVzVXBkYXRlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsIHQgPSB0aGlzLmxpYnJhcnksIGEgPSB0LmNhbnZhcywgaSA9IHQuaW50ZXJhY3QsIHIgPSB0Lm1vZGVzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuYXJyYXkuZm9yRWFjaChmdW5jdGlvbih0LCBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5wYXJhbXMucGFydGljbGVzLm1vdmUuZW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlLnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5zcGVlZCAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC54ICs9IHQudnggKiBvLCB0LnkgKz0gdC52eSAqIG87XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnBhcmFtcy5wYXJ0aWNsZXMub3BhY2l0eS5hbmltLmVuYWJsZSAmJiAoMSA9PSB0Lm9wYWNpdHlfc3RhdHVzID8gKHQub3BhY2l0eSA+PSBlLnBhcmFtcy5wYXJ0aWNsZXMub3BhY2l0eS52YWx1ZSAmJiAodC5vcGFjaXR5X3N0YXR1cyA9ICExKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICB0Lm9wYWNpdHkgKz0gdC52bykgOiAodC5vcGFjaXR5IDw9IGUucGFyYW1zLnBhcnRpY2xlcy5vcGFjaXR5LmFuaW0ub3BhY2l0eV9taW4gJiYgKHQub3BhY2l0eV9zdGF0dXMgPSAhMCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5vcGFjaXR5IC09IHQudm8pLCB0Lm9wYWNpdHkgPCAwICYmICh0Lm9wYWNpdHkgPSAwKSksIGUucGFyYW1zLnBhcnRpY2xlcy5zaXplLmFuaW0uZW5hYmxlICYmICgxID09IHQuc2l6ZV9zdGF0dXMgPyAodC5yYWRpdXMgPj0gZS5wYXJhbXMucGFydGljbGVzLnNpemUudmFsdWUgJiYgKHQuc2l6ZV9zdGF0dXMgPSAhMSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5yYWRpdXMgKz0gdC52cykgOiAodC5yYWRpdXMgPD0gZS5wYXJhbXMucGFydGljbGVzLnNpemUuYW5pbS5zaXplX21pbiAmJiAodC5zaXplX3N0YXR1cyA9ICEwKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnJhZGl1cyAtPSB0LnZzKSwgdC5yYWRpdXMgPCAwICYmICh0LnJhZGl1cyA9IDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjID0gXCJib3VuY2VcIiA9PSBlLnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5vdXRfbW9kZSA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4X2xlZnQ6IHQucmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhfcmlnaHQ6IGEud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeV90b3A6IHQucmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlfYm90dG9tOiBhLmhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4X2xlZnQ6IC10LnJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4X3JpZ2h0OiBhLndpZHRoICsgdC5yYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeV90b3A6IC10LnJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5X2JvdHRvbTogYS5oZWlnaHQgKyB0LnJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdC54IC0gdC5yYWRpdXMgPiBhLndpZHRoID8gKHQueCA9IGMueF9sZWZ0LCB0LnkgPSBNYXRoLnJhbmRvbSgpICogYS5oZWlnaHQpIDogdC54ICsgdC5yYWRpdXMgPCAwICYmICh0LnggPSBjLnhfcmlnaHQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgdC55ID0gTWF0aC5yYW5kb20oKSAqIGEuaGVpZ2h0KSwgdC55IC0gdC5yYWRpdXMgPiBhLmhlaWdodCA/ICh0LnkgPSBjLnlfdG9wLCB0LnggPSBNYXRoLnJhbmRvbSgpICogYS53aWR0aCkgOiB0LnkgKyB0LnJhZGl1cyA8IDAgJiYgKHQueSA9IGMueV9ib3R0b20sIFxuICAgICAgICAgICAgICAgICAgICAgICAgdC54ID0gTWF0aC5yYW5kb20oKSAqIGEud2lkdGgpLCBlLnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5vdXRfbW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYm91bmNlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC54ICsgdC5yYWRpdXMgPiBhLndpZHRoID8gdC52eCA9IC10LnZ4IDogdC54IC0gdC5yYWRpdXMgPCAwICYmICh0LnZ4ID0gLXQudngpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnkgKyB0LnJhZGl1cyA+IGEuaGVpZ2h0ID8gdC52eSA9IC10LnZ5IDogdC55IC0gdC5yYWRpdXMgPCAwICYmICh0LnZ5ID0gLXQudnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4uaXNJbkFycmF5KFwiZ3JhYlwiLCBlLnBhcmFtcy5pbnRlcmFjdGl2aXR5LmV2ZW50cy5vbmhvdmVyLm1vZGUpICYmIHIuZ3JhYlBhcnRpY2xlKHQpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIChuLmlzSW5BcnJheShcImJ1YmJsZVwiLCBlLnBhcmFtcy5pbnRlcmFjdGl2aXR5LmV2ZW50cy5vbmhvdmVyLm1vZGUpIHx8IG4uaXNJbkFycmF5KFwiYnViYmxlXCIsIGUucGFyYW1zLmludGVyYWN0aXZpdHkuZXZlbnRzLm9uY2xpY2subW9kZSkpICYmIHIuYnViYmxlUGFydGljbGUodCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgKG4uaXNJbkFycmF5KFwicmVwdWxzZVwiLCBlLnBhcmFtcy5pbnRlcmFjdGl2aXR5LmV2ZW50cy5vbmhvdmVyLm1vZGUpIHx8IG4uaXNJbkFycmF5KFwicmVwdWxzZVwiLCBlLnBhcmFtcy5pbnRlcmFjdGl2aXR5LmV2ZW50cy5vbmNsaWNrLm1vZGUpKSAmJiByLnJlcHVsc2VQYXJ0aWNsZSh0KSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnBhcmFtcy5wYXJ0aWNsZXMubGluZV9saW5rZWQuZW5hYmxlIHx8IGUucGFyYW1zLnBhcnRpY2xlcy5tb3ZlLmF0dHJhY3QuZW5hYmxlKSBmb3IgKHZhciBsID0gcyArIDE7IGwgPCBlLnBhcmFtcy5wYXJ0aWNsZXMuYXJyYXkubGVuZ3RoOyBsKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGUucGFyYW1zLnBhcnRpY2xlcy5hcnJheVtsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnBhcmFtcy5wYXJ0aWNsZXMubGluZV9saW5rZWQuZW5hYmxlICYmIGkubGlua1BhcnRpY2xlcyh0LCB1KSwgZS5wYXJhbXMucGFydGljbGVzLm1vdmUuYXR0cmFjdC5lbmFibGUgJiYgaS5hdHRyYWN0UGFydGljbGVzKHQsIHUpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5ib3VuY2UgJiYgaS5ib3VuY2VQYXJ0aWNsZXModCwgdSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwicGFydGljbGVzRHJhd1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmxpYnJhcnksIHQgPSBlLmNhbnZhcywgYSA9IGUubWFuYWdlcjtcbiAgICAgICAgICAgICAgICAgICAgdC5jdHguY2xlYXJSZWN0KDAsIDAsIHQud2lkdGgsIHQuaGVpZ2h0KSwgYS5wYXJ0aWNsZXNVcGRhdGUoKSwgdGhpcy5wYXJhbXMucGFydGljbGVzLmFycmF5LmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5kcmF3KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwicGFydGljbGVzRW1wdHlcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLnBhcnRpY2xlcy5hcnJheSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwicGFydGljbGVzUmVmcmVzaFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmxpYnJhcnksIHQgPSBlLnRtcDtcbiAgICAgICAgICAgICAgICAgICAgZS52ZW5kb3JzO1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0LmNoZWNrQW5pbUZyYW1lKSwgY2FuY2VsQW5pbWF0aW9uRnJhbWUodC5kcmF3QW5pbUZyYW1lKSwgdC5pbWdfb2JqID0gdm9pZCAwLCBcbiAgICAgICAgICAgICAgICAgICAgdC5jb3VudF9zdmcgPSAwLCB0aGlzLnBhcnRpY2xlc0VtcHR5KCksIHRoaXMubGlicmFyeS5jYW52YXNDbGVhcigpLCB0aGlzLmxpYnJhcnkuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IF0pLCBlO1xuICAgICAgICB9KCk7XG4gICAgICAgIHQuZGVmYXVsdCA9IHM7XG4gICAgfSwgZnVuY3Rpb24oZSwgdCwgYSkge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgZnVuY3Rpb24gaShlLCB0KSB7XG4gICAgICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgdCkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUoZSwgdCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwgdC5sZW5ndGg7IGErKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRbYV07XG4gICAgICAgICAgICAgICAgICAgIGkuZW51bWVyYWJsZSA9IGkuZW51bWVyYWJsZSB8fCAhMSwgaS5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIGkgJiYgKGkud3JpdGFibGUgPSAhMCksIFxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgaS5rZXksIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgJiYgZSh0LnByb3RvdHlwZSwgYSksIGkgJiYgZSh0LCBpKSwgdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgICAgICAgICB2YWx1ZTogITBcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBuID0gYSgwKSwgcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZSh0KSB7XG4gICAgICAgICAgICAgICAgaSh0aGlzLCBlKSwgdGhpcy50bXAgPSB7fSwgdGhpcy50bXAgPSB7fSwgdGhpcy5sb2FkUGFyYW1ldGVycyh0KSwgdGhpcy5leHRlbmRQYXJhbXMoKSwgXG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcmFjdCA9IG5ldyBuLkludGVyYWN0KHRoaXMucGFyYW1zLCB0aGlzKSwgdGhpcy5tb2RlcyA9IG5ldyBuLk1vZGVzKHRoaXMucGFyYW1zLCB0aGlzKSwgXG4gICAgICAgICAgICAgICAgdGhpcy52ZW5kb3JzID0gbmV3IG4uVmVuZG9ycyh0aGlzLnBhcmFtcywgdGhpcyksIHRoaXMubWFuYWdlciA9IG5ldyBuLlBhcnRpY2xlTWFuYWdlcih0aGlzLnBhcmFtcywgdGhpcy5pbnRlcmFjdCwgdGhpcy5tb2RlcywgdGhpcy52ZW5kb3JzLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByKGUsIFsge1xuICAgICAgICAgICAgICAgIGtleTogXCJsb2FkUGFyYW1ldGVyc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gbi5nZXREZWZhdWx0UGFyYW1zKCksIGEgPSBuLmRlZXBFeHRlbmQodCwgZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zID0gYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImxvYWRDYW52YXNcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogZS5vZmZzZXRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogZS5vZmZzZXRIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcInN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMudmVuZG9ycztcbiAgICAgICAgICAgICAgICAgICAgZS5ldmVudHNMaXN0ZW5lcnMoKSwgZS5zdGFydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnRtcDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRhY2hMaXN0ZW5lcnMoKSwgdGhpcy52ZW5kb3JzLmRldGFjaExpc3RlbmVycygpLCBjYW5jZWxBbmltYXRpb25GcmFtZShlLmRyYXdBbmltRnJhbWUpLCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNDbGVhcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiZGV0YWNoTGlzdGVuZXJzXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uV2luZG93UmVzaXplKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImV4dGVuZFBhcmFtc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHRlbmRUbXBEZWZpbml0aW9uKCksIHRoaXMub25XaW5kb3dSZXNpemUgPSB0aGlzLm9uV2luZG93UmVzaXplLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJleHRlbmRUbXBEZWZpbml0aW9uXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMudG1wO1xuICAgICAgICAgICAgICAgICAgICBlLm9iaiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemVfdmFsdWU6IHRoaXMucGFyYW1zLnBhcnRpY2xlcy5zaXplLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZV9hbmltX3NwZWVkOiB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuc2l6ZS5hbmltLnNwZWVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZV9zcGVlZDogdGhpcy5wYXJhbXMucGFydGljbGVzLm1vdmUuc3BlZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lX2xpbmtlZF9kaXN0YW5jZTogdGhpcy5wYXJhbXMucGFydGljbGVzLmxpbmVfbGlua2VkLmRpc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZV9saW5rZWRfd2lkdGg6IHRoaXMucGFyYW1zLnBhcnRpY2xlcy5saW5lX2xpbmtlZC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVfZ3JhYl9kaXN0YW5jZTogdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5ncmFiLmRpc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZV9idWJibGVfZGlzdGFuY2U6IHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLmRpc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZV9idWJibGVfc2l6ZTogdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5idWJibGUuc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVfcmVwdWxzZV9kaXN0YW5jZTogdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5yZXB1bHNlLmRpc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgIH0sIGUuY291bnRfc3ZnID0gMCwgZS5pbWdfaW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwicmV0aW5hSW5pdFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmNhbnZhcywgdCA9IHRoaXMudG1wO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcy5yZXRpbmFfZGV0ZWN0ICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID4gMSA/IChlLnB4cmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgXG4gICAgICAgICAgICAgICAgICAgIHQucmV0aW5hID0gITAsIGUud2lkdGggPSBlLmVsZW1lbnQub2Zmc2V0V2lkdGggKiBlLnB4cmF0aW8sIGUuaGVpZ2h0ID0gZS5lbGVtZW50Lm9mZnNldEhlaWdodCAqIGUucHhyYXRpbywgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLnBhcnRpY2xlcy5zaXplLnZhbHVlID0gdC5vYmouc2l6ZV92YWx1ZSAqIGUucHhyYXRpbywgdGhpcy5wYXJhbXMucGFydGljbGVzLnNpemUuYW5pbS5zcGVlZCA9IHQub2JqLnNpemVfYW5pbV9zcGVlZCAqIGUucHhyYXRpbywgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLnBhcnRpY2xlcy5tb3ZlLnNwZWVkID0gdC5vYmoubW92ZV9zcGVlZCAqIGUucHhyYXRpbywgdGhpcy5wYXJhbXMucGFydGljbGVzLmxpbmVfbGlua2VkLmRpc3RhbmNlID0gdC5vYmoubGluZV9saW5rZWRfZGlzdGFuY2UgKiBlLnB4cmF0aW8sIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5Lm1vZGVzLmdyYWIuZGlzdGFuY2UgPSB0Lm9iai5tb2RlX2dyYWJfZGlzdGFuY2UgKiBlLnB4cmF0aW8sIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5Lm1vZGVzLmJ1YmJsZS5kaXN0YW5jZSA9IHQub2JqLm1vZGVfYnViYmxlX2Rpc3RhbmNlICogZS5weHJhdGlvLCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMucGFydGljbGVzLmxpbmVfbGlua2VkLndpZHRoID0gdC5vYmoubGluZV9saW5rZWRfd2lkdGggKiBlLnB4cmF0aW8sIHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLnNpemUgPSB0Lm9iai5tb2RlX2J1YmJsZV9zaXplICogZS5weHJhdGlvLCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5yZXB1bHNlLmRpc3RhbmNlID0gdC5vYmoubW9kZV9yZXB1bHNlX2Rpc3RhbmNlICogZS5weHJhdGlvKSA6IChlLnB4cmF0aW8gPSAxLCBcbiAgICAgICAgICAgICAgICAgICAgdC5yZXRpbmEgPSAhMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJjYW52YXNJbml0XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuY2FudmFzO1xuICAgICAgICAgICAgICAgICAgICBlLmN0eCA9IGUuZWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJjYW52YXNTaXplXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuY2FudmFzO1xuICAgICAgICAgICAgICAgICAgICBlLmVsZW1lbnQud2lkdGggPSBlLndpZHRoLCBlLmVsZW1lbnQuaGVpZ2h0ID0gZS5oZWlnaHQsIHRoaXMucGFyYW1zICYmIHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHkuZXZlbnRzLnJlc2l6ZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uV2luZG93UmVzaXplKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImNhbnZhc1BhaW50XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuY2FudmFzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLmN0eCkgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY3R4LmZpbGxSZWN0KDAsIDAsIGUud2lkdGgsIGUuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJjYW52YXNDbGVhclwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmNhbnZhcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgZS5jdHgpIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmN0eC5jbGVhclJlY3QoMCwgMCwgZS53aWR0aCwgZS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIm9uV2luZG93UmVzaXplXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuY2FudmFzLCB0ID0gdGhpcy5tYW5hZ2VyLCBhID0gdGhpcy50bXAsIGkgPSB0aGlzLnZlbmRvcnM7XG4gICAgICAgICAgICAgICAgICAgIGUud2lkdGggPSBlLmVsZW1lbnQub2Zmc2V0V2lkdGgsIGUuaGVpZ2h0ID0gZS5lbGVtZW50Lm9mZnNldEhlaWdodCwgYS5yZXRpbmEgJiYgKGUud2lkdGggKj0gZS5weHJhdGlvLCBcbiAgICAgICAgICAgICAgICAgICAgZS5oZWlnaHQgKj0gZS5weHJhdGlvKSwgZS5lbGVtZW50LndpZHRoID0gZS53aWR0aCwgZS5lbGVtZW50LmhlaWdodCA9IGUuaGVpZ2h0LCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMucGFydGljbGVzLm1vdmUuZW5hYmxlIHx8ICh0LnBhcnRpY2xlc0VtcHR5KCksIHQucGFydGljbGVzQ3JlYXRlKCksIHQucGFydGljbGVzRHJhdygpLCBcbiAgICAgICAgICAgICAgICAgICAgaS5kZW5zaXR5QXV0b1BhcnRpY2xlcygpKSwgaS5kZW5zaXR5QXV0b1BhcnRpY2xlcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXSksIGU7XG4gICAgICAgIH0oKTtcbiAgICAgICAgdC5kZWZhdWx0ID0gcztcbiAgICB9LCBmdW5jdGlvbihlLCB0LCBhKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBmdW5jdGlvbiBpKGUsIHQpIHtcbiAgICAgICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiB0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZShlLCB0KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCB0Lmxlbmd0aDsgYSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gdFthXTtcbiAgICAgICAgICAgICAgICAgICAgaS5lbnVtZXJhYmxlID0gaS5lbnVtZXJhYmxlIHx8ICExLCBpLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gaSAmJiAoaS53cml0YWJsZSA9ICEwKSwgXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBpLmtleSwgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSAmJiBlKHQucHJvdG90eXBlLCBhKSwgaSAmJiBlKHQsIGkpLCB0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSgpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG4gPSBhKDApLCBzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKHQsIGEpIHtcbiAgICAgICAgICAgICAgICBpKHRoaXMsIGUpLCB0aGlzLnBhcmFtcyA9IHQsIHRoaXMubGlicmFyeSA9IGEsIHRoaXMub25Nb3VzZU1vdmUgPSB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyksIFxuICAgICAgICAgICAgICAgIHRoaXMub25Nb3VzZUxlYXZlID0gdGhpcy5vbk1vdXNlTGVhdmUuYmluZCh0aGlzKSwgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcihlLCBbIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiZXZlbnRzTGlzdGVuZXJzXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMucGFyYW1zLmludGVyYWN0aXZpdHksIHQgPSB0aGlzLmxpYnJhcnkuY2FudmFzO1xuICAgICAgICAgICAgICAgICAgICBcIndpbmRvd1wiID09IGUuZGV0ZWN0X29uID8gZS5lbCA9IHdpbmRvdyA6IGUuZWwgPSB0LmVsZW1lbnQsIChlLmV2ZW50cy5vbmhvdmVyLmVuYWJsZSB8fCBlLmV2ZW50cy5vbmNsaWNrLmVuYWJsZSkgJiYgKGUuZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm9uTW91c2VNb3ZlKSwgXG4gICAgICAgICAgICAgICAgICAgIGUuZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5vbk1vdXNlTGVhdmUpKSwgZS5ldmVudHMub25jbGljay5lbmFibGUgJiYgZS5lbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkNsaWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImRldGFjaExpc3RlbmVyc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5LCB0ID0gdGhpcy5saWJyYXJ5LnRtcDtcbiAgICAgICAgICAgICAgICAgICAgZS5lbCAmJiAoKGUuZXZlbnRzLm9uaG92ZXIuZW5hYmxlIHx8IGUuZXZlbnRzLm9uY2xpY2suZW5hYmxlKSAmJiAoZS5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMub25Nb3VzZU1vdmUpLCBcbiAgICAgICAgICAgICAgICAgICAgZS5lbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLm9uTW91c2VMZWF2ZSkpLCBlLmV2ZW50cy5vbmNsaWNrLmVuYWJsZSAmJiBlLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uQ2xpY2spKSwgXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0LmRyYXdBbmltRnJhbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwib25Nb3VzZU1vdmVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMubGlicmFyeSwgYSA9IHQuY2FudmFzLCBpID0gdC50bXAsIHIgPSB0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5LCBuID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICBuID0gci5lbCA9PSB3aW5kb3cgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBlLmNsaWVudFgsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBlLmNsaWVudFlcbiAgICAgICAgICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGUub2Zmc2V0WCB8fCBlLmNsaWVudFgsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBlLm9mZnNldFkgfHwgZS5jbGllbnRZXG4gICAgICAgICAgICAgICAgICAgIH0sIHIubW91c2UucG9zX3ggPSBuLngsIHIubW91c2UucG9zX3kgPSBuLnksIGkucmV0aW5hICYmIChyLm1vdXNlLnBvc194ICo9IGEucHhyYXRpbywgXG4gICAgICAgICAgICAgICAgICAgIHIubW91c2UucG9zX3kgKj0gYS5weHJhdGlvKSwgci5zdGF0dXMgPSBcIm1vdXNlbW92ZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwib25Nb3VzZUxlYXZlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5O1xuICAgICAgICAgICAgICAgICAgICB0Lm1vdXNlLnBvc194ID0gbnVsbCwgdC5tb3VzZS5wb3NfeSA9IG51bGwsIHQuc3RhdHVzID0gXCJtb3VzZWxlYXZlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJvbkNsaWNrXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMubGlicmFyeSwgdCA9IGUubW9kZXMsIGEgPSBlLnRtcCwgaSA9IHRoaXMucGFyYW1zLCByID0gaS5pbnRlcmFjdGl2aXR5LCBuID0gaS5wYXJ0aWNsZXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyLm1vdXNlLmNsaWNrX3Bvc194ID0gci5tb3VzZS5wb3NfeCwgci5tb3VzZS5jbGlja19wb3NfeSA9IHIubW91c2UucG9zX3ksIHIubW91c2UuY2xpY2tfdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBcbiAgICAgICAgICAgICAgICAgICAgci5ldmVudHMub25jbGljay5lbmFibGUpIHN3aXRjaCAoci5ldmVudHMub25jbGljay5tb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInB1c2hcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ubW92ZS5lbmFibGUgPyB0LnB1c2hQYXJ0aWNsZXMoci5tb2Rlcy5wdXNoLnBhcnRpY2xlc19uYiwgci5tb3VzZSkgOiAxID09IHIubW9kZXMucHVzaC5wYXJ0aWNsZXNfbmIgPyB0LnB1c2hQYXJ0aWNsZXMoci5tb2Rlcy5wdXNoLnBhcnRpY2xlc19uYiwgci5tb3VzZSkgOiByLm1vZGVzLnB1c2gucGFydGljbGVzX25iID4gMSAmJiB0LnB1c2hQYXJ0aWNsZXMoci5tb2Rlcy5wdXNoLnBhcnRpY2xlc19uYik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZW1vdmVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHQucmVtb3ZlUGFydGljbGVzKHIubW9kZXMucmVtb3ZlLnBhcnRpY2xlc19uYik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJidWJibGVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuYnViYmxlX2NsaWNraW5nID0gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZXB1bHNlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBhLnJlcHVsc2VfY2xpY2tpbmcgPSAhMCwgYS5yZXB1bHNlX2NvdW50ID0gMCwgYS5yZXB1bHNlX2ZpbmlzaCA9ICExLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEucmVwdWxzZV9jbGlja2luZyA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMWUzICogci5tb2Rlcy5yZXB1bHNlLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiZGVuc2l0eUF1dG9QYXJ0aWNsZXNcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5saWJyYXJ5LCB0ID0gZS5jYW52YXMsIGEgPSBlLm1vZGVzLCBpID0gZS50bXAsIHIgPSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyLm51bWJlci5kZW5zaXR5LmVuYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0LmVsZW1lbnQud2lkdGggKiB0LmVsZW1lbnQuaGVpZ2h0IC8gMWUzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaS5yZXRpbmEgJiYgKG4gPSBuIC8gdC5weHJhdGlvICogMik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IG4gKiByLm51bWJlci52YWx1ZSAvIHIubnVtYmVyLmRlbnNpdHkudmFsdWVfYXJlYSwgbyA9IHIuYXJyYXkubGVuZ3RoIC0gcztcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPCAwID8gYS5wdXNoUGFydGljbGVzKE1hdGguYWJzKG8pKSA6IGEucmVtb3ZlUGFydGljbGVzKG8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJjaGVja092ZXJsYXBcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMubGlicmFyeSwgaSA9IGEuY2FudmFzLCByID0gYS52ZW5kb3JzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcy5wYXJ0aWNsZXMuYXJyYXkuZm9yRWFjaChmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGEsIHMgPSBlLnggLSBuLngsIG8gPSBlLnkgLSBuLnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNxcnQocyAqIHMgKyBvICogbykgPD0gZS5yYWRpdXMgKyBuLnJhZGl1cyAmJiAoZS54ID0gdCA/IHQueCA6IE1hdGgucmFuZG9tKCkgKiBpLndpZHRoLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGUueSA9IHQgPyB0LnkgOiBNYXRoLnJhbmRvbSgpICogaS5oZWlnaHQsIHIuY2hlY2tPdmVybGFwKGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJjcmVhdGVTdmdJbWdcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMubGlicmFyeS50bXAsIGkgPSAvIyhbMC05QS1GXXszLDZ9KXxyZ2JcXChbMC05LF0rXFwpL2dpLCByID0gdC5yZXBsYWNlKGksIGZ1bmN0aW9uKHQsIGEsIGksIHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuY29sb3IucmdiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBlLmNvbG9yLnJnYjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gXCJyZ2JhKCBcIiArIHMuciArIFwiLCBcIiArIHMuZyArIFwiLCBcIiArIHMuYiArIFwiLCBcIiArIGUub3BhY2l0eSArIFwiIClcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlLmNvbG9yLmhzbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gXCJyZ2JhKCBcIiArIG8uaCArIFwiLCBcIiArIG8ucyArIFwiLCBcIiArIG8ubCArIFwiLCBcIiArIGUub3BhY2l0eSArIFwiIClcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgICAgICAgICAgICB9KSwgbiA9IG5ldyBCbG9iKFsgciBdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOFwiXG4gICAgICAgICAgICAgICAgICAgIH0pLCBzID0gd2luZG93LlVSTCB8fCB3aW5kb3csIG8gPSBzLmNyZWF0ZU9iamVjdFVSTChuKSwgYyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgICAgICAgICBjLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5pbWcub2JqID0gYywgZS5pbWcubG9hZGVkID0gITAsIHMucmV2b2tlT2JqZWN0VVJMKG8pLCBhLmNvdW50X3N2ZysrO1xuICAgICAgICAgICAgICAgICAgICB9KSwgYy5zcmMgPSBvO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmxpYnJhcnksIHQgPSBlLmNhbnZhcywgYSA9IGUudG1wO1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhLmRyYXdBbmltRnJhbWUpLCB0LmVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJkcmF3U2hhcGVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oZSwgdCwgYSwgaSwgciwgbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IHIgKiBuLCBvID0gciAvIG4sIGMgPSAxODAgKiAobyAtIDIpIC8gbywgbCA9IE1hdGguUEkgLSBNYXRoLlBJICogYyAvIDE4MDtcbiAgICAgICAgICAgICAgICAgICAgZS5zYXZlKCksIGUuYmVnaW5QYXRoKCksIGUudHJhbnNsYXRlKHQsIGEpLCBlLm1vdmVUbygwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdSA9IDA7IHUgPCBzOyB1KyspIGUubGluZVRvKGksIDApLCBlLnRyYW5zbGF0ZShpLCAwKSwgZS5yb3RhdGUobCk7XG4gICAgICAgICAgICAgICAgICAgIGUuZmlsbCgpLCBlLnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImV4cG9ydEltZ1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmxpYnJhcnkuY2FudmFzO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihlLmVsZW1lbnQudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpLCBcIl9ibGFua1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImxvYWRJbWdcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMubGlicmFyeSwgaSA9IGEudG1wLCByID0gYS52ZW5kb3JzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaS5pbWdfZXJyb3IgPSB2b2lkIDAsIFwiXCIgIT0gdC5zcmMpIGlmIChcInN2Z1wiID09IGUpIGlmICh0LmRhdGEpIHIuY2hlY2tCZWZvcmVEcmF3KCk7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ub3BlbihcIkdFVFwiLCB0LnNyYyksIG4ub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQgPT0gbi5yZWFkeVN0YXRlICYmICgyMDAgPT0gbi5zdGF0dXMgPyAodC5kYXRhID0gZS5jdXJyZW50VGFyZ2V0LnJlc3BvbnNlLCByLmNoZWNrQmVmb3JlRHJhdygpKSA6IChjb25zb2xlLmxvZyhcIkVycm9yIHJlYWN0LXBhcnRpY2xlcy1qcyAtIGltYWdlIG5vdCBmb3VuZFwiKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5pbWdfZXJyb3IgPSAhMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgbi5zZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmltZ19vYmogPSBzLCByLmNoZWNrQmVmb3JlRHJhdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIHMuc3JjID0gdC5zcmM7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjb25zb2xlLmxvZyhcIkVycm9yIHJlYWN0LXBhcnRpY2xlcy1qcyAtIG5vIGltYWdlLnNyY1wiKSwgaS5pbWdfZXJyb3IgPSAhMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImRyYXdcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5saWJyYXJ5LCB0ID0gZS50bXAsIGEgPSBlLm1hbmFnZXIsIGkgPSBlLnZlbmRvcnMsIHIgPSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXM7XG4gICAgICAgICAgICAgICAgICAgIFwiaW1hZ2VcIiA9PSByLnNoYXBlLnR5cGUgfHwgXCJpbWFnZXNcIiA9PSByLnNoYXBlLnR5cGUgPyBcInN2Z1wiID09IHQuaW1nX3R5cGUgPyB0LmNvdW50X3N2ZyA+PSByLm51bWJlci52YWx1ZSA/IChhLnBhcnRpY2xlc0RyYXcoKSwgXG4gICAgICAgICAgICAgICAgICAgIHIubW92ZS5lbmFibGUgPyB0LmRyYXdBbmltRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaS5kcmF3LmJpbmQoaSkpIDogY2FuY2VsQW5pbWF0aW9uRnJhbWUodC5kcmF3QW5pbUZyYW1lKSkgOiB0LmltZ19lcnJvciB8fCAodC5kcmF3QW5pbUZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGkuZHJhdy5iaW5kKGkpKSkgOiB2b2lkIDAgIT0gdC5pbWdfb2JqID8gKGEucGFydGljbGVzRHJhdygpLCBcbiAgICAgICAgICAgICAgICAgICAgci5tb3ZlLmVuYWJsZSA/IHQuZHJhd0FuaW1GcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShpLmRyYXcuYmluZChpKSkgOiBjYW5jZWxBbmltYXRpb25GcmFtZSh0LmRyYXdBbmltRnJhbWUpKSA6IHQuaW1nX2Vycm9yIHx8ICh0LmRyYXdBbmltRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaS5kcmF3LmJpbmQoaSkpKSA6IChhLnBhcnRpY2xlc0RyYXcoKSwgXG4gICAgICAgICAgICAgICAgICAgIHIubW92ZS5lbmFibGUgPyB0LmRyYXdBbmltRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaS5kcmF3LmJpbmQoaSkpIDogY2FuY2VsQW5pbWF0aW9uRnJhbWUodC5kcmF3QW5pbUZyYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJjaGVja0JlZm9yZURyYXdcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5saWJyYXJ5LCB0ID0gZS50bXAsIGEgPSBlLnZlbmRvcnMsIGkgPSB0aGlzLnBhcmFtcy5wYXJ0aWNsZXM7XG4gICAgICAgICAgICAgICAgICAgIFwiaW1hZ2VcIiA9PSBpLnNoYXBlLnR5cGUgfHwgXCJpbWFnZXNcIiA9PSBpLnNoYXBlLnR5cGUgPyAoY2FuY2VsQW5pbWF0aW9uRnJhbWUodC5jaGVja0FuaW1GcmFtZSksIFxuICAgICAgICAgICAgICAgICAgICB0LmltZ19lcnJvciB8fCAoYS5pbml0KCksIGEuZHJhdygpKSkgOiAoYS5pbml0KCksIGEuZHJhdygpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImluaXRcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5saWJyYXJ5LCB0ID0gZS5tYW5hZ2VyLCBhID0gZS52ZW5kb3JzLCBpID0gdGhpcy5wYXJhbXMucGFydGljbGVzO1xuICAgICAgICAgICAgICAgICAgICBlLnJldGluYUluaXQoKSwgZS5jYW52YXNJbml0KCksIGUuY2FudmFzU2l6ZSgpLCB0LnBhcnRpY2xlc0NyZWF0ZSgpLCBhLmRlbnNpdHlBdXRvUGFydGljbGVzKCksIFxuICAgICAgICAgICAgICAgICAgICBpLmxpbmVfbGlua2VkLmNvbG9yX3JnYl9saW5lID0gbi5oZXhUb1JnYihpLmxpbmVfbGlua2VkLmNvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcInN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMubGlicmFyeSwgdCA9IGUudG1wLCBhID0gZS52ZW5kb3JzLCBpID0gdGhpcy5wYXJhbXMucGFydGljbGVzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJpbWFnZVwiID09IGkuc2hhcGUudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAociA9IC9eZGF0YTppbWFnZVxcLyhcXHd7M30pXFwreG1sO2Jhc2U2NCwoLiopJC8uZXhlYyhpLnNoYXBlLmltYWdlLnNyYykpID8gKHQuaW1nX3R5cGUgPSByWzFdLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2hhcGUuaW1hZ2UuZGF0YSA9IGF0b2IoclsyXSkpIDogKHIgPSAvXi4qKFxcd3szfSkkLy5leGVjKGkuc2hhcGUuaW1hZ2Uuc3JjKSkgJiYgKHQuaW1nX3R5cGUgPSByWzFdKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmxvYWRJbWcodC5pbWdfdHlwZSwgaS5zaGFwZS5pbWFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXCJpbWFnZXNcIiA9PSBpLnNoYXBlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gITAsIHMgPSAhMSwgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYywgbCA9IGkuc2hhcGUuaW1hZ2VzW1N5bWJvbC5pdGVyYXRvcl0oKTsgIShuID0gKGMgPSBsLm5leHQoKSkuZG9uZSk7IG4gPSAhMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGMudmFsdWUsIHAgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwID0gL15kYXRhOmltYWdlXFwvKFxcd3szfSlcXCt4bWw7YmFzZTY0LCguKikkLy5leGVjKHUuc3JjKSkgPyAodC5pbWdfdHlwZSA9IHBbMV0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1LmRhdGEgPSBhdG9iKHBbMl0pKSA6IChwID0gL14uKihcXHd7M30pJC8uZXhlYyh1LnNyYykpICYmICh0LmltZ190eXBlID0gcFsxXSksIGEubG9hZEltZyh0LmltZ190eXBlLCB1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9ICEwLCBvID0gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIW4gJiYgbC5yZXR1cm4gJiYgbC5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocykgdGhyb3cgbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBhLmNoZWNrQmVmb3JlRHJhdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXSksIGU7XG4gICAgICAgIH0oKTtcbiAgICAgICAgdC5kZWZhdWx0ID0gcztcbiAgICB9LCBmdW5jdGlvbihlLCB0LCBhKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiAhMFxuICAgICAgICB9KSwgdC5nZXREZWZhdWx0UGFyYW1zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlczoge1xuICAgICAgICAgICAgICAgICAgICBudW1iZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiA0MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNpdHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGU6ICExLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlX2FyZWE6IDEyMDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIiNGRkZcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzaGFwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjaXJjbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiMwMDAwMDBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlnb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYl9zaWRlczogNVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlczogW11cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IC41LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZG9tOiAhMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW06IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGU6ICEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVkOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHlfbWluOiAuMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW5jOiAhMVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzaXplOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbTogITEsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlOiAhMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlZDogNDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZV9taW46IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3luYzogITFcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbGluZV9saW5rZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZTogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTogMTUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiI0ZGRlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogLjYsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvdzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZTogITEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmx1cjogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCJsaW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbW92ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVkOiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbTogITEsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJhaWdodDogITEsXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRfbW9kZTogXCJib3VuY2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5jZTogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyYWN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlOiAhMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVYOiAzZTMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlWTogM2UzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFycmF5OiBbXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpdml0eToge1xuICAgICAgICAgICAgICAgICAgICBkZXRlY3Rfb246IFwiY2FudmFzXCIsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25ob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZTogITEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJncmFiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlOiAhMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcInJlcHVsc2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogITBcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbW9kZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYWI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTogMTgwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVfbGlua2VkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IC4zNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBidWJibGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTogMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IDgwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAuNFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcHVsc2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTogMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHVzaDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlc19uYjogNFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlc19uYjogMlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtb3VzZToge31cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJldGluYV9kZXRlY3Q6ICEwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0sIGZ1bmN0aW9uKGUsIHQsIGEpIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIHZhciBpID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBlO1xuICAgICAgICB9IDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7XG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcIl9fZXNNb2R1bGVcIiwge1xuICAgICAgICAgICAgdmFsdWU6ICEwXG4gICAgICAgIH0pLCB0LmhleFRvUmdiID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSAvXiM/KFthLWZcXGRdKShbYS1mXFxkXSkoW2EtZlxcZF0pJC9pO1xuICAgICAgICAgICAgZSA9IGUucmVwbGFjZSh0LCBmdW5jdGlvbihlLCB0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgKyB0ICsgYSArIGEgKyBpICsgaTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGEgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoZSk7XG4gICAgICAgICAgICByZXR1cm4gYSA/IHtcbiAgICAgICAgICAgICAgICByOiBwYXJzZUludChhWzFdLCAxNiksXG4gICAgICAgICAgICAgICAgZzogcGFyc2VJbnQoYVsyXSwgMTYpLFxuICAgICAgICAgICAgICAgIGI6IHBhcnNlSW50KGFbM10sIDE2KVxuICAgICAgICAgICAgfSA6IG51bGw7XG4gICAgICAgIH0sIHQuY2xhbXAgPSBmdW5jdGlvbihlLCB0LCBhKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgoZSwgdCksIGEpO1xuICAgICAgICB9LCB0LmlzSW5BcnJheSA9IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmluZGV4T2YoZSkgPiAtMTtcbiAgICAgICAgfSwgdC5kZWVwRXh0ZW5kID0gZnVuY3Rpb24oZSwgYSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBhKSBhW2ldICYmIGFbaV0uY29uc3RydWN0b3IgJiYgYVtpXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0ID8gKGVbaV0gPSBlW2ldIHx8IHt9LCBcbiAgICAgICAgICAgIHQuZGVlcEV4dGVuZChlW2ldLCBhW2ldKSkgOiBlW2ldID0gYVtpXTtcbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9LCB0LmdldENvbG9yID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIGEgPSB7fTtcbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09ICh2b2lkIDAgPT09IGUgPyBcInVuZGVmaW5lZFwiIDogaShlKSkpIGlmIChlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IGVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZS5sZW5ndGgpXTtcbiAgICAgICAgICAgICAgICBhLnJnYiA9IHQuaGV4VG9SZ2Iocik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBuID0gZS5yLCBzID0gZS5nLCBvID0gZS5iO1xuICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IG4gJiYgdm9pZCAwICE9PSBzICYmIHZvaWQgMCAhPT0gbykgYS5yZ2IgPSB7XG4gICAgICAgICAgICAgICAgICAgIHI6IG4sXG4gICAgICAgICAgICAgICAgICAgIGc6IHMsXG4gICAgICAgICAgICAgICAgICAgIGI6IG9cbiAgICAgICAgICAgICAgICB9OyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBlLmgsIGwgPSBlLnMsIHUgPSBlLmw7XG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gYyAmJiB2b2lkIDAgIT09IHMgJiYgdm9pZCAwICE9PSBvICYmIChhLmhzbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGg6IGMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzOiBsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbDogdVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgXCJyYW5kb21cIiA9PSBlID8gYS5yZ2IgPSB7XG4gICAgICAgICAgICAgICAgcjogTWF0aC5mbG9vcigyNTUgKiBNYXRoLnJhbmRvbSgpKSArIDEsXG4gICAgICAgICAgICAgICAgZzogTWF0aC5mbG9vcigyNTUgKiBNYXRoLnJhbmRvbSgpKSArIDEsXG4gICAgICAgICAgICAgICAgYjogTWF0aC5mbG9vcigyNTUgKiBNYXRoLnJhbmRvbSgpKSArIDFcbiAgICAgICAgICAgIH0gOiBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIChhLnJnYiA9IHQuaGV4VG9SZ2IoZSkpO1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH07XG4gICAgfSBdKTtcbn0pOyIsImltcG9ydCBQYXJ0aWNsZXMgZnJvbSBcInJlYWN0LXBhcnRpY2xlcy1qc1wiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5pbXBvcnQgXCIuLi9TcGFjZUJhY2tncm91bmQvX1NwYWNlQmFja2dyb3VuZFN0eWxlc2hlZXQuc2Nzc1wiO1xyXG5pbXBvcnQgTW9vbiBmcm9tIFwiLi4vTW9vbi9Nb29uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3BhY2VCYWNrZ3JvdW5kIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHt9LCB7fT4ge1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lci1zcGFjZWJhY2tncm91bmRcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2ViYWNrZ3JvdW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFBhcnRpY2xlcyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDEwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlX2FyZWE6IDc4OS4xNDc2NDE2MzIyNzI3LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiI2ZmZmZmZlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjaXJjbGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiMwMDAwMDBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9seWdvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmJfc2lkZXM6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaW1hZ2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgc3JjOiBcImltZy9naXRodWIuc3ZnXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHdpZHRoOiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIGhlaWdodDogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwLjQ4OTI3MTUzNzgxMjAwOTA1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5kb206IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlZDogMC4wNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHlfbWluOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3luYzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAxLjUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplX21pbjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bmM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZV9saW5rZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IDE1MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiI2ZmZmZmZlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVkOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IFwibm9uZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5kb206IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmFpZ2h0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0X21vZGU6IFwib3V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5jZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmFjdDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZVg6IDYwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZVk6IDEyMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGl2aXR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZWN0X29uOiBcImNhbnZhc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcImJ1YmJsZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcInB1c2hcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhYjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IDQwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVfbGlua2VkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IDgzLjkxNjA4MzkxNjA4MzkyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXB1bHNlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTogMjAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDAuNCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVzaDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydGljbGVzX25iOiA0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlc19uYjogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9QYXJ0aWNsZXM+XHJcbiAgICAgICAgICAgICAgICAgICAgPE1vb24gLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFNwYWNlQmFja2dyb3VuZDtcclxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi40LjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxxPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcix0PXI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdj1yP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx3PXI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQseT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx6PXI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsQT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLEI9XG5yP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMjtyJiZTeW1ib2wuZm9yKFwicmVhY3QudGltZW91dFwiKTt2YXIgQz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWUrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO24oITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixlKX1cbnZhciBFPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtmdW5jdGlvbiBGKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/RChcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEcoKXt9XG5HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2soSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjp0LHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09dH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixlLGMpe2lmKFAubGVuZ3RoKXt2YXIgZD1QLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB0OmNhc2UgdTpnPSEwfX1pZihnKXJldHVybiBlKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2Q9YVtoXTt2YXIgZj1iK1QoZCxoKTtnKz1TKGQsZixlLGMpfWVsc2UgaWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYT9mPW51bGw6KGY9QyYmYVtDXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxcbmg9MDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVChkLGgrKyksZys9UyhkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSxEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBVKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIFYoYSxiLGUpe3ZhciBjPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VyhhLGMsZSxxLnRoYXRSZXR1cm5zQXJndW1lbnQpOm51bGwhPWEmJihOKGEpJiYoYj1kKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBXKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxkKTtudWxsPT1hfHxTKGEsXCJcIixWLGIpO1IoYil9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtXKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFMoYSxcIlwiLFUsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtXKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6RChcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RixQdXJlQ29tcG9uZW50OkgsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnosXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX2NoYW5nZWRCaXRzOjAsX2NoYW5nZWRCaXRzMjowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpCLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOkEsdW5zdGFibGVfUHJvZmlsZXI6eCxjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9EKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1cbmIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi40LjBcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SixcbmFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0P1ouZGVmYXVsdDpaO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IE1vb24gZnJvbSBcIi4uLy4uL01vb24vTW9vblwiO1xyXG5pbXBvcnQgU3BhY2VCYWNrZ3JvdW5kIGZyb20gXCIuLi8uLi9TcGFjZUJhY2tncm91bmQvU3BhY2VCYWNrZ3JvdW5kXCI7XHJcbmltcG9ydCBcIi4uL1NwYWNlL1NwYWNlU3R5bGVzaGVldC5jc3NcIjtcclxuaW1wb3J0IHsgQ29tcGFueU1vdHRvIH0gZnJvbSBcIi4uLy4uL0NvbXBhbnlNb3R0by9Db21wYW55TW90dG9cIjtcclxuaW1wb3J0IHsgTmF2aWdhdGlvbkljb25zIH0gZnJvbSBcIi4uLy4uL05hdmlnYXRpb25JY29ucy9OYXZpZ2F0aW9uSWNvbnNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTcGFjZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7fSwge30+IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxTcGFjZUJhY2tncm91bmQgLz5cclxuICAgICAgICAgICAgICAgIDxOYXZpZ2F0aW9uSWNvbnMgLz5cclxuICAgICAgICAgICAgICAgIDxDb21wYW55TW90dG8gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCBTcGFjZTtcclxuIiwiaW1wb3J0IFNwYWNlIGZyb20gJy4uLy4uL0NvbXBvbmVudHMvQ2xpZW50L0hpZ2hPcmRlckNvbXBvbmVudHMvU3BhY2UvU3BhY2UnO1xyXG5pbXBvcnQgTmF2aWdhdGlvbkJhciBmcm9tICcuLi8uLi9Db21wb25lbnRzL1NlcnZlci9OYXZpZ2F0aW9uQmFyL05hdmlnYXRpb25CYXInXHJcbmltcG9ydCBBYm91dFVzIGZyb20gJy4uLy4uL0NvbXBvbmVudHMvQ2xpZW50L0Fib3V0VXMvQWJvdXRVcydcclxuaW1wb3J0IFByb2R1Y3RzIGZyb20gJy4uLy4uL0NvbXBvbmVudHMvQ2xpZW50L1Byb2R1Y3RzL1Byb2R1Y3RzJ1xyXG5pbXBvcnQgUm9ja2V0IGZyb20gJy4uLy4uL0NvbXBvbmVudHMvQ2xpZW50L1JvY2tldC9Sb2NrZXQnXHJcbmltcG9ydCBDb21wYW55RGV0YWlscyBmcm9tICcuLi8uLi9Db21wb25lbnRzL0NsaWVudC9Db21wYW55RGV0YWlscy9Db21wYW55RGV0YWlscydcclxuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgUmVhY3RET00ucmVuZGVyKFxyXG4gICAgICAgIDxSb2NrZXQgLz4sXHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvY2tldE1vdW50JylcclxuICAgIClcclxuICAgIFJlYWN0RE9NLnJlbmRlcihcclxuICAgICAgICA8U3BhY2UgLz4sXHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NwYWNlTW91bnQnKVxyXG4gICAgKTtcclxuICAgIFJlYWN0RE9NLnJlbmRlcihcclxuICAgICAgICA8QWJvdXRVcyAvPixcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWJvdXRVc01vdW50JylcclxuICAgICk7XHJcbiAgICBSZWFjdERPTS5yZW5kZXIoXHJcbiAgICAgICAgPFByb2R1Y3RzIC8+LFxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9kdWN0c01vdW50JylcclxuICAgICk7XHJcbiAgICBSZWFjdERPTS5yZW5kZXIoXHJcbiAgICAgICAgPENvbXBhbnlEZXRhaWxzIFRpdGxlPVwiU2VydmljZXNcIiBEZXNjcmlwdGlvbj1cIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci5cIiBCdXR0b25UZXh0PVwiTGVhcm4gTW9yZVwiIEJ1dHRvbkNvbG9yPVwiI0Y3NzI0OVwiIEltYWdlUGF0aD1cImh0dHA6Ly9pMC5reW0tY2RuLmNvbS9lbnRyaWVzL2ljb25zL29yaWdpbmFsLzAwMC8wMDAvODg4L1ZhbmlsbGFIYXBweUNhdC5qcGdcIiBJY29uUGF0aD1cIlwiIFJldmVyc2VkPXtmYWxzZX0gIC8+LFxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZXJ2aWNlc01vdW50JylcclxuICAgIClcclxufSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlZ0V4cCwgcmVwbGFjZSkge1xuICB2YXIgcmVwbGFjZXIgPSByZXBsYWNlID09PSBPYmplY3QocmVwbGFjZSkgPyBmdW5jdGlvbiAocGFydCkge1xuICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuICB9IDogcmVwbGFjZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBTdHJpbmcoaXQpLnJlcGxhY2UocmVnRXhwLCByZXBsYWNlcik7XG4gIH07XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmUgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHsgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpIHsgcmV0dXJuICRyZShpdCk7IH0gfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsLnByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgZ2xvYmFsLnByb2Nlc3MuZG9tYWluKSB7XG4gICAgICBpbnZva2UgPSBnbG9iYWwucHJvY2Vzcy5kb21haW4uYmluZChpbnZva2UpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxuICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3RcbiAgLy8gdXNlIGluZGlyZWN0IGV2YWwgKHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cbiAgdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XG4gIHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgPyB3aW5kb3cgOlxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0aGlzXG4pO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgT0JTRVJWQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgUkVUVVJOID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYgKGNsZWFudXApIHtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzdWJzY3JpYmVyKSB7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmICghbSkgdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yd2FsZHJvbi90YzM5LW5vdGVzL2Jsb2IvbWFzdGVyL2VzNi8yMDE0LTA5L3NlcHQtMjUubWQjNTEwLWdsb2JhbGFzYXAtZm9yLWVucXVldWluZy1hLW1pY3JvdGFza1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIHByb2Nlc3MgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wcm9jZXNzO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtcbiAgYXNhcDogZnVuY3Rpb24gYXNhcChmbikge1xuICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7XG4iLCJ2YXIgJG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xuXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgU2V0ID0gcmVxdWlyZSgnLi9lczYuc2V0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbnZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlNZXRhZGF0YUtleXMgPSBmdW5jdGlvbiAoTywgUCkge1xuICB2YXIgb0tleXMgPSBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICBpZiAocGFyZW50ID09PSBudWxsKSByZXR1cm4gb0tleXM7XG4gIHZhciBwS2V5cyA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XG4gIHJldHVybiBwS2V5cy5sZW5ndGggPyBvS2V5cy5sZW5ndGggPyBmcm9tKG5ldyBTZXQob0tleXMuY29uY2F0KHBLZXlzKSkpIDogcEtleXMgOiBvS2V5cztcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcDtcbnZhciBzdG9yZSA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoeyBkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgaWYgKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKG1ldGFkYXRhTWFwLnNpemUpIHJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gbWV0YWRhdGEuc2V0O1xuXG5tZXRhZGF0YS5leHAoeyBkZWZpbmVNZXRhZGF0YTogZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YUtleSh0YXJnZXRLZXkpKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1Byb21pc2UnLCB7ICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gcGVyZm9ybShjYWxsYmFja2ZuKTtcbiAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIvLyBodHRwOi8vamZiYXN0aWVuLmdpdGh1Yi5pby9wYXBlcnMvTWF0aC5zaWduYml0Lmh0bWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbmJpdDogZnVuY3Rpb24gc2lnbmJpdCh4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpICE9IHggPyB4IDogeCA9PSAwID8gMSAvIHggPT0gSW5maW5pdHkgOiB4ID4gMDtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB1bXVsaDogZnVuY3Rpb24gdW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4+IDE2O1xuICAgIHZhciB2MSA9ICR2ID4+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+Pj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+Pj4gMTYpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2NhbGU6IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSArICh5MSA+Pj4gMCkgKyAoKCR4MCAmICR5MCB8ICgkeDAgfCAkeTApICYgfigkeDAgKyAkeTAgPj4+IDApKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNjYWxlID0gcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnNjYWxlOiBmdW5jdGlvbiBmc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gICAgcmV0dXJuIGZyb3VuZChzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIFJBRF9QRVJfREVHID0gMTgwIC8gTWF0aC5QSTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBkZWdyZWVzOiBmdW5jdGlvbiBkZWdyZWVzKHJhZGlhbnMpIHtcbiAgICByZXR1cm4gcmFkaWFucyAqIFJBRF9QRVJfREVHO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgREVHX1BFUl9SQUQ6IE1hdGguUEkgLyAxODAgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCh4LCBsb3dlciwgdXBwZXIpIHtcbiAgICByZXR1cm4gTWF0aC5taW4odXBwZXIsIE1hdGgubWF4KGxvd2VyLCB4KSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCkge1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0LmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0JywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdTZXQnKSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELnNldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELmdldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjMgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9TdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBnZXRGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gKHJlZ2V4cCwgc3RyaW5nKSB7XG4gIHRoaXMuX3IgPSByZWdleHA7XG4gIHRoaXMuX3MgPSBzdHJpbmc7XG59O1xuXG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKCRSZWdFeHBTdHJpbmdJdGVyYXRvciwgJ1JlZ0V4cCBTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgbWF0Y2ggPSB0aGlzLl9yLmV4ZWModGhpcy5fcyk7XG4gIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogbWF0Y2ggPT09IG51bGwgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCkge1xuICAgIGRlZmluZWQodGhpcyk7XG4gICAgaWYgKCFpc1JlZ0V4cChyZWdleHApKSB0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7XG4gICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgdmFyIGZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHBQcm90byA/IFN0cmluZyhyZWdleHAuZmxhZ3MpIDogZ2V0RmxhZ3MuY2FsbChyZWdleHApO1xuICAgIHZhciByeCA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJjZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpO1xuICAgIHJ4Lmxhc3RJbmRleCA9IHRvTGVuZ3RoKHJlZ2V4cC5sYXN0SW5kZXgpO1xuICAgIHJldHVybiBuZXcgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJ4LCBTKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KSwgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIGF0OiBmdW5jdGlvbiBhdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXR0ZW5cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbigvKiBkZXB0aEFyZyA9IDEgKi8pIHtcbiAgICB2YXIgZGVwdGhBcmcgPSBhcmd1bWVudHNbMF07XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aEFyZykpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXR0ZW4nKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4sIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVEZXNjKDAsIFYpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcbiIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpIH0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW107ICAgICAgLy8ga2V5c1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGtleXMgPSB0aGF0Ll9rO1xuICB2YXIga2V5O1xuICBkbyB7XG4gICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7IHZhbHVlOiBrZXksIGRvbmU6IGZhbHNlIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX1NFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19TRVQpLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG4gIHZhciBfc3BsaXQgPSAkc3BsaXQ7XG4gIHZhciAkcHVzaCA9IFtdLnB1c2g7XG4gIHZhciAkU1BMSVQgPSAnc3BsaXQnO1xuICB2YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG4gIHZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgdmFyIE5QQ0cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHVuZGVmaW5lZDsgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuIF9zcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aCwgaTtcbiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgaWYgKCFOUENHKSBzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZykpIHtcbiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0dcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICAgICAgaWYgKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKSBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHNbTEVOR1RIXSAtIDI7IGkrKykgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdCkgOiAkc3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICB9LCAkc3BsaXRdO1xufSk7XG4iLCIvLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKSB7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTtcbiIsIi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlKSB7XG4gIC8vIDIxLjEuMy4xNCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSlcbiAgcmV0dXJuIFtmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICB9LCAkcmVwbGFjZV07XG59KTtcbiIsIi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCkge1xuICAvLyAyMS4xLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5tYXRjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJG1hdGNoXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpO1xudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7XG4gICAgdmFyIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuKTtcbiAgICB2YXIgdXBUbyA9IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbik7XG4gICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpO1xuICAgIHZhciBjbG9uZWQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCJ2YXIgRGF0ZVByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywgeyBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBmcm91bmQ6IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJykgfSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyICR0b1ByZWNpc2lvbiA9IDEuMC50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5mc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS50cnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXNhcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9fY29yZScpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3NoaW1cIik7XG5cbnJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGVcIik7XG5cbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcbn1cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7XG5cbnZhciBERUZJTkVfUFJPUEVSVFkgPSBcImRlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBkZWZpbmUoTywga2V5LCB2YWx1ZSkge1xuICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KTtcbn1cblxuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkTGVmdFwiLCBcIlwiLnBhZFN0YXJ0KTtcbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZFJpZ2h0XCIsIFwiXCIucGFkRW5kKTtcblxuXCJwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzLGluZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMsam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLHJlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGxcIi5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIFtdW2tleV0gJiYgZGVmaW5lKEFycmF5LCBrZXksIEZ1bmN0aW9uLmNhbGwuYmluZChbXVtrZXldKSk7XG59KTsiXSwic291cmNlUm9vdCI6IiJ9 
//# sourceMappingURL=HomeBundle.bundle.js.map